{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This repository contain documentation and scripts that aim to help PC Engines apuX platform users and developers to customize firmware to their needs.</p>"},{"location":"APU_mPCIe_capabilities/","title":"APU mPCIe capabilities","text":""},{"location":"APU_mPCIe_capabilities/#apu2b-apu2c-apu2d-apu2e","title":"APU2B, APU2C, APU2D, APU2E","text":"Slot Interfaces Use Cases J14 (mPCIe1) USB, PCIe, SIM LTE and Wifi modules J13 (mPCIe2) USB, PCIe  SIM LTE and Wifi modules J12 (mSATA) mSATA only mSATA disks"},{"location":"APU_mPCIe_capabilities/#apu3a-apu3b-apu3c","title":"APU3A, APU3B, APU3C","text":"Slot Interfaces Use Cases J16 (mPCIe1) USB, PCIe USB and Wifi modules J15 (mPCIe2) USB, SIM1 only LTE modules J14 (mSATA) mSATA, USB, SIM2 mSATA disks and LTE modules"},{"location":"APU_mPCIe_capabilities/#apu4a-apu4b-apu4c","title":"APU4A, APU4B, APU4C","text":"Slot Interfaces Use Cases J15 (mPCIe1) USB, PCIe USB and Wifi modules J14 (mPCIe2) USB, SIM1 only LTE modules J13 (mSATA) mSATA, USB, SIM2 mSATA disks and LTE modules"},{"location":"apu2_vboot/","title":"Vboot measured boot on apu2","text":"<p>This document describes a procedure of building a coreboot image for apu2 with vboot support and measured boot utilizing a TPM module. Procedure will work only on apu2 versions v4.9.0.6 and newer.</p>"},{"location":"apu2_vboot/#building-coreboot-image","title":"Building coreboot image","text":"<ol> <li>Clone the pce-fw-builder</li> <li> <p>Pull or build     docker container:</p> <pre><code>docker pull pcengines/pce-fw-builder\n</code></pre> </li> <li> <p>Build v4.9.0.6 image:</p> <pre><code>./build.sh release v4.9.0.6 apu2\n</code></pre> </li> <li> <p>Invoke distclean:</p> <pre><code>./build.sh dev-build $PWD/release/coreboot apu2 distclean\n</code></pre> </li> <li> <p>Copy the vboot miniconfig:</p> <pre><code>cp $PWD/release/coreboot/configs/config.pcengines_apu2_vboot $PWD/release/coreboot/.config\n</code></pre> </li> <li> <p>Create full config:</p> <pre><code>./build.sh dev-build $PWD/release/coreboot apu2 olddefconfig\n</code></pre> </li> <li> <p>Build the image again:</p> <pre><code>./build.sh dev-build $PWD/release/coreboot apu2 CPUS=$(nproc)\n</code></pre> </li> <li> <p>Flash the new image. The firmware image can be found in     <code>release/coreboot/build</code> which is relative to cloned <code>pce-fw-builder</code>     directory.</p> </li> </ol>"},{"location":"apu2_vboot/#using-custom-keys","title":"Using custom keys","text":"<p>The config file present in repository builds the binary with default vboot developer keys. If one would like to use own keys, vboot has bash scripts that simplify the key generation process.</p> <ol> <li> <p>Enter previously cloned coreboot directory and change directory to vboot:</p> <pre><code>cd $PWD/release/coreboot/3rdparty/vboot\n</code></pre> </li> <li> <p>Compile and install the vboot library (outside docker on the host):</p> <pre><code>make\nDESTDIR=/usr sudo make install\n</code></pre> </li> <li> <p>Then invoke from <code>$PWD/release/coreboot</code>:</p> <pre><code>3rdparty/vboot/scripts/keygeneration/create_new_keys.sh --4k --4k-root --output keys\n</code></pre> <p>This script will produce whole set of new random keys in the <code>keys</code> directory. In order to use them, follow the procedure described previously, but:</p> </li> <li> <p>Create full config:</p> <pre><code>./build.sh dev-build $PWD/release/coreboot apu2 olddefconfig\n</code></pre> </li> <li> <p>Enter menuconfig:</p> <pre><code>./build.sh dev-build $PWD/release/coreboot apu2 menuconfig\n</code></pre> </li> <li> <p>Enter Security -&gt; Verified boot (vboot) -&gt; Vboot keys. Change the directories:</p> <pre><code>$(VBOOT_SOURCE)/tests/devkeys/some_key.vbpubk ----&gt; $(top)/some_key.vbpubk\n</code></pre> </li> <li> <p>Do the change for all 4 key paths, but do not change the filename (generated     keys have the same names):</p> <pre><code>($(VBOOT_SOURCE)/tests/devkeys/root_key.vbpubk) Root key (public)\n($(VBOOT_SOURCE)/tests/devkeys/recovery_key.vbpubk) Recovery key (public)\n($(VBOOT_SOURCE)/tests/devkeys/firmware_data_key.vbprivk) Firmware key (private)($(VBOOT_SOURCE)/tests/devkeys/kernel_subkey.vbpubk) Kernel subkey (public)\n($(VBOOT_SOURCE)/tests/devkeys/firmware.keyblock) Keyblock to use for the RW regions\n</code></pre> </li> <li> <p>Build the image again:</p> <pre><code>./build.sh dev-build $PWD/release/coreboot apu2 CPUS=$(nproc)\n</code></pre> </li> <li> <p>Flash the new image. The firmware image can be found in     <code>release/coreboot/build</code> which is relative to cloned <code>pce-fw-builder</code>     directory.</p> </li> </ol>"},{"location":"apu2_vboot/#advantages-of-vboot","title":"Advantages of vboot","text":"<ol> <li> <p>Flashmap layout.</p> <p>Whole flash is divided into sections describe in an FMD (FlashMap Descriptor) file (located in <code>src/mainboard/pcengines/apu2</code> directory). Each section has strictly precised size. This allows to flash only certain flash regions with flashrom (requires quite fresh compilation of flashrom).</p> <p>Flashing a single region, for example RW_SECTION_A:</p> <pre><code>flashrom -p internal -w coreboot.rom --fmap -i RW_SECTION_A\n</code></pre> <p>Region names are defined in the FMD file.</p> </li> <li> <p>Verified boot</p> <p>Each boot component in firmware block A or B (depending which one is correctly booting) is verified again the keys that signed the blocks and the root key which public part lies in the recovery region. Only the firmware signed by the keys that belong to the cryptographical keychain (established during key generation) is allowed to boot. If the signatures are not matching, another firmware slot is used (also must pass verification). If everything else fails, boot from recovery. Recovery partition aka read-only is supposed to be protected by SPI flash protection mechanism as it make the Root of Trust.</p> <p>Note that firmware components signed by different keyset won't work. If You change the keys, flash whole firmware.</p> </li> <li> <p>Measured boot</p> <p>By utlizing TPM capabilities, each boot component is cryptographically measured i.e. its hash is computed and extended in TPM's PCR (Platform Configuration Register). The hash is not directly written into PCR, but extended, which means that TPM takes current PCR value, add the hash value of the component and rehashes the combined value. The final result is written to PCR. Such approach has the advantage that the final PCR values after boot process is finished are fixed. In other words, by measuring the same components, in same order, without any changes in its content we are able to obtain same PCR values. There is no other way to obtain the same result if any of the components changed, or if the measuring order has been altered. Given that, the PCR values can clearly assure that the firmware has not been tampered.</p> </li> </ol>"},{"location":"apu2_vboot/#how-to-check-it-works","title":"How to check it works","text":"<p>In order to verify whether vboot and TPM works, one has to compile the cbmem utility:</p> <pre><code>cd $PWD/release/coreboot/util/cbmem\nmake\n</code></pre> <p>And copy the cbmem executable to the apu2 platform booted with vboot support. Dump the bootlog to a file:</p> <pre><code>./cbmem -c &gt; bootconsole.log\n</code></pre> <p>And analyze it. You should see similar messages:</p> <pre><code>Phase 1\nFMAP: area GBB found @ 505000 (978944 bytes)\nVB2:vb2_check_recovery() Recovery reason from previous boot: 0x0 / 0x0\nPhase 2\nPhase 3\nFMAP: area GBB found @ 505000 (978944 bytes)\nFMAP: area VBLOCK_A found @ a0000 (65536 bytes)\nFMAP: area VBLOCK_A found @ a0000 (65536 bytes)\nVB2:vb2_verify_keyblock() Checking key block signature...\nFMAP: area VBLOCK_A found @ a0000 (65536 bytes)\nFMAP: area VBLOCK_A found @ a0000 (65536 bytes)\nVB2:vb2_verify_fw_preamble() Verifying preamble.\nPhase 4\nFMAP: area FW_MAIN_A found @ b0000 (2228160 bytes)\nVB2:vb2api_init_hash() HW crypto for hash_alg 2 not supported, using SW\ntlcl_extend: response is 0\ntlcl_extend: response is 0\ntlcl_lock_nv_write: response is 0\nSlot A is selected\ncreating vboot_handoff structure\n</code></pre> <p>And the measurements made during boot process:</p> <pre><code> PCR-2 51d3adcb927807324651c102e5e07d8085b66bae944f37d4de3d89d6118a595f SHA256 [FMAP: COREBOOT CBFS: bootblock]\n PCR-2 fd582fcb2af6ff4e703b2398df919f94c9c3bbcb675429a1414646d123ab141d SHA256 [FMAP: COREBOOT CBFS: fallback/romstage]\n PCR-0 2547cc736e951fa4919853c43ae890861a3b3264 SHA1 [GBB flags]\n PCR-1 a66c8c2cda246d332d0c2025b6266e1e23c89410051002f46bfad1c9265f43d0 SHA256 [GBB HWID]\n PCR-2 a5e02cf99b58d52493d295dca701fdefe3cfc0afa901a70475c2de20603984e7 SHA256 [FMAP: FW_MAIN_A CBFS: fallback/ramstage]\n PCR-3 269138dedbdc3d6d236212392fb18d29aefce116586c5f058419a214efa866a1 SHA256 [FMAP: FW_MAIN_A CBFS: bootorder]\n PCR-3 269138dedbdc3d6d236212392fb18d29aefce116586c5f058419a214efa866a1 SHA256 [FMAP: FW_MAIN_A CBFS: bootorder]\n PCR-3 269138dedbdc3d6d236212392fb18d29aefce116586c5f058419a214efa866a1 SHA256 [FMAP: FW_MAIN_A CBFS: bootorder]\n PCR-2 6c1d20616d91442b61de89de6bf81f0ee8e929919c9284061e00d004de893994 SHA256 [FMAP: COREBOOT CBFS: spd.bin]\n PCR-3 787ba3c5d060991254426794207f64eefe825f93cdebc00f24e7ca0f2acceae9 SHA256 [PSPDIR]\n PCR-2 ca09ef53266de8a9f95a70b28279fdab4d8d21c48d12f6f20ebba9685adc2168 SHA256 [FMAP: COREBOOT CBFS: AGESA]\n PCR-2 ca09ef53266de8a9f95a70b28279fdab4d8d21c48d12f6f20ebba9685adc2168 SHA256 [FMAP: COREBOOT CBFS: AGESA]\n PCR-2 ca09ef53266de8a9f95a70b28279fdab4d8d21c48d12f6f20ebba9685adc2168 SHA256 [FMAP: COREBOOT CBFS: AGESA]\n PCR-2 ca09ef53266de8a9f95a70b28279fdab4d8d21c48d12f6f20ebba9685adc2168 SHA256 [FMAP: COREBOOT CBFS: AGESA]\n PCR-2 ca09ef53266de8a9f95a70b28279fdab4d8d21c48d12f6f20ebba9685adc2168 SHA256 [FMAP: COREBOOT CBFS: AGESA]\n PCR-2 ca09ef53266de8a9f95a70b28279fdab4d8d21c48d12f6f20ebba9685adc2168 SHA256 [FMAP: COREBOOT CBFS: AGESA]\n PCR-2 ca09ef53266de8a9f95a70b28279fdab4d8d21c48d12f6f20ebba9685adc2168 SHA256 [FMAP: COREBOOT CBFS: AGESA]\n PCR-2 6f51a6e4ea6f26b2a5ae619421d0942515db9977c6136a4a6b3d2759b2616143 SHA256 [FMAP: FW_MAIN_A CBFS: fallback/dsdt.aml]\n PCR-3 269138dedbdc3d6d236212392fb18d29aefce116586c5f058419a214efa866a1 SHA256 [FMAP: FW_MAIN_A CBFS: bootorder]\n PCR-2 a6b195044628cf787c9006c3f8a520a0d3fce1df2566fa1ce0294ecc5daf0441 SHA256 [FMAP: FW_MAIN_A CBFS: fallback/payload]\n</code></pre> <p>Some components are listed few times, because access to them is made several times. Each time component is accessed from flash, it is measured.</p> <p>As one can see the logs contain the PCR number that has been extended, the hash value, used hashing algorithm and then the component name and location that the measurement is corresponding to.</p> <p>The final PCR numbers can be checked with <code>tpm2-tools</code>. It is pretty hard to compile them, so there is a prepared docker container that has already the tools compiled. Refer to 3mdeb/tpm2-tools-docker.</p> <p>To check PCRs:</p> <pre><code>docker run --privileged --rm -it 3mdeb/tpm2-tools-docker tpm2_pcrlist\n</code></pre>"},{"location":"apu2_vs_apu3/","title":"Apu2 vs apu3","text":""},{"location":"apu2_vs_apu3/#apu2-vs-apu3","title":"APU2 vs APU3","text":"<p>Brief walkthrough APU2 and APU3 schematics show below difference:</p> <ul> <li>power/reset/watchdog header changed</li> <li>LPC header changed to debug</li> <li>RXD3/TXD3 wired to PCIe x1 expansion</li> <li>SIM switch added</li> <li>use of mPCI slots explicitly specified</li> <li>fan control removed</li> <li>SIMSWAP pin added</li> <li>APU straps changed</li> <li>I'm not sure about mSATA changes, but it looks something is different</li> <li>internal us2.0 header added</li> <li>some PCIe connections removed (page 5)</li> </ul>"},{"location":"apu2_vs_apu4/","title":"Apu2 vs apu4","text":""},{"location":"apu2_vs_apu4/#apu2-vs-apu4","title":"apu2 vs apu4","text":"<ul> <li>4GB DRAM</li> <li> <p>additional internal USB header</p> </li> <li> <p>power/reset/watchdog header changed</p> </li> <li>LPC header removed</li> <li>RXD3/TXD3 wired to PCIe x1 expansion</li> <li>SIM switch added</li> <li>use of mPCI slots explicitly specified</li> <li>fan control removed</li> <li>SIMSWAP pin added</li> <li>APU straps changed</li> <li>I'm not sure about mSATA changes, but it looks something is different</li> <li>internal USB2.0 header added</li> <li>some PCIe connections removed (page 5)</li> </ul>"},{"location":"apu_CPU_boost/","title":"APU Core Performance Boost","text":"<p>Since coreboot v4.9.0.2 PC Engines firmware for apu2/3/4/5 has the Core Performance Boost (aka CPU boost) enabled by default. The feature automatically detects huge loads on the processor and temporarily raises the core frequency to 1400MHz. More details how to check whether boost works available in the blog post</p>"},{"location":"apu_CPU_boost/#checking-frequency-in-the-operating-system","title":"Checking frequency in the operating system","text":"<p>Operating systems have problems with reporting the boosted frequency and certain tricks have to be performed to reveal the true frequency of the processor. Benchmarks and few utilities give the increased results, but the common frequency reading methods not.</p>"},{"location":"apu_CPU_boost/#bsd","title":"BSD","text":"<p>Check the frequency status on the system with:</p> <pre><code># sysctl dev.cpu.0\ndev.cpu.0.cx_method: C1/hlt C2/io\ndev.cpu.0.cx_usage_counters: 382 6500\ndev.cpu.0.cx_usage: 5.55% 94.44% last 28331us\ndev.cpu.0.cx_lowest: C2\ndev.cpu.0.cx_supported: C1/1/0 C2/2/400\ndev.cpu.0.freq_levels: 1000/924 800/760 600/571\ndev.cpu.0.freq: 600\ndev.cpu.0.%parent: acpi0\ndev.cpu.0.%pnpinfo: _HID=none _UID=0\ndev.cpu.0.%location: handle=\\_PR_.P000\ndev.cpu.0.%driver: cpu\ndev.cpu.0.%desc: ACPI CPU\n</code></pre> <p>In order to notice the boosted frequency, one has to add:</p> <pre><code>hint.p4tcc.0.disabled=1\nhint.acpi_throttle.0.disabled=1\nhint.acpi_perf.0.disabled=1\n</code></pre> <p>to <code>boot/loader.conf</code> and reboot the platform.</p> <p>After reboot, run some load generating task in the background like:</p> <pre><code># dd if=/dev/zero of=/dev/null count=4G &amp;\n</code></pre> <p>Then read the CPU status again:</p> <pre><code># sysctl dev.cpu.0\ndev.cpu.0.cx_method: C1/hlt C2/io\ndev.cpu.0.cx_usage_counters: 291 3224\ndev.cpu.0.cx_usage: 8.27% 91.72% last 11496us\ndev.cpu.0.cx_lowest: C2\ndev.cpu.0.cx_supported: C1/1/0 C2/2/400\ndev.cpu.0.freq_levels: 1400/-1 1200/-1 1000/-1\ndev.cpu.0.freq: 1400\ndev.cpu.0.%parent: acpi0\ndev.cpu.0.%pnpinfo: _HID=none _UID=0\ndev.cpu.0.%location: handle=\\_PR_.P000\ndev.cpu.0.%driver: cpu\ndev.cpu.0.%desc: ACPI CPU\n</code></pre> <p>Without running the task in background, frequency will be capped at 1400MHz:</p> <pre><code># sysctl dev.cpu.0\ndev.cpu.0.cx_method: C1/hlt C2/io\ndev.cpu.0.cx_usage_counters: 289 2606\ndev.cpu.0.cx_usage: 9.98% 90.01% last 18267us\ndev.cpu.0.cx_lowest: C2\ndev.cpu.0.cx_supported: C1/1/0 C2/2/400\ndev.cpu.0.freq_levels: 1400/-1 1200/-1 1000/-1\ndev.cpu.0.freq: 1000\ndev.cpu.0.%parent: acpi0\ndev.cpu.0.%pnpinfo: _HID=none _UID=0\ndev.cpu.0.%location: handle=\\_PR_.P000\ndev.cpu.0.%driver: cpu\ndev.cpu.0.%desc: ACPI CPU\n</code></pre>"},{"location":"apu_CPU_boost/#linux","title":"Linux","text":"<p>Currently there is no known method to show boosted frequency on Linux systems. Solution is work in progress.</p>"},{"location":"apu_ecc/","title":"Issues with ECC enabling","text":"<p>According to previous work on this issue ECC error injection fails due to a range of memory that is used by APUs integrated graphics being excluded from ECC support. This feature is controlled by a couple of registers, one of them is D18F5x240, which has bit EccExclEn. This bit is set by AGESA as 1 soon after memory training.</p> <p>Using version of AGESA that doesn't set mentioned bit results in working ECC error injection in MemTest86 V7.4 Pro on apu2 and apu4:</p> <pre><code>2018-09-25 16:59:03 - MtSupportRunAllTests - Injecting ECC error\n2018-09-25 16:59:03 - inject_amd64 - new nb_arr_add = 80000000\n2018-09-25 16:59:03 - inject_amd64 - new dram_ecc = 0012000F\n2018-09-25 16:59:03 - MCA NB Status High=00000000\n2018-09-25 16:59:03 - inject_amd64 - new nb_arr_add = 80000002\n2018-09-25 16:59:03 - inject_amd64 - new dram_ecc = 0012000F\n2018-09-25 16:59:03 - MCA NB Status High=00000000\n2018-09-25 16:59:03 - inject_amd64 - new nb_arr_add = 80000004\n2018-09-25 16:59:03 - inject_amd64 - new dram_ecc = 0012000F\n2018-09-25 16:59:03 - MCA NB Status High=00000000\n2018-09-25 16:59:03 - MtSupportRunAllTests - Setting random seed to 0x50415353\n2018-09-25 16:59:03 - MtSupportRunAllTests - Start time: 453 ms\n2018-09-25 16:59:03 - ReadMemoryRanges - Available Pages = 1035071\n2018-09-25 16:59:03 - MtSupportRunAllTests - Enabling memory cache for test\n2018-09-25 16:59:03 - MtSupportRunAllTests - Enabling memory cache complete\n2018-09-25 16:59:03 - Start memory range test (0x0 - 0x12F000000)\n2018-09-25 16:59:03 - Pre-allocating memory ranges &gt;=16MB first...\n2018-09-25 16:59:04 - All memory ranges successfully locked\n2018-09-25 16:59:04 - MCA NB Status=846FC000F2080813 \n2018-09-25 16:59:04 - MCA NB Address=00000000CFE528E0\n2018-09-25 16:59:04 - [MEM ERROR - ECC] Test: 3, Address: CFE528E0, ECC Corrected: yes, Syndrome: F2DF, Channel/Slot: N/A\n2018-09-25 17:00:08 - MCA NB Status=846FC000F2080813 \n2018-09-25 17:00:08 - MCA NB Address=00000000CE3F46C0\n2018-09-25 17:00:08 - [MEM ERROR - ECC] Test: 3, Address: CE3F46C0, ECC Corrected: yes, Syndrome: F2DF, Channel/Slot: N/A\n</code></pre> <p>Configuration file used: <pre><code>TSTLIST=3,5,13\nNUMPASS=2\n\nDISABLEMP=1\nECCPOLL=1\nECCINJECT=1\n\nAUTOMODE=1\nSKIPSPLASH=1\nCONSOLEMODE=0\n</code></pre> List of tests and number of passed were stripped down to speed up research. <code>DISABLEMP</code> is set because of buggy multiprocessor support in UEFI. <code>ECCPOLL</code> enables checking for detected ECC errors after each test and <code>ECCINJECT</code> enables ECC error injection on start of each test. The rest of options enables automode with report generation.</p> <p>On apu3 with 2GB RAM ECC isn't detected at all because of SPD which doesn't report this feature.</p>"},{"location":"apu_ecc/#potential-workarounds","title":"Potential workarounds","text":"<p>AGESA specification mentions a build time option:</p> <p>BLDCFG_UMA_ALLOCATION_MODE   Supply the UMA memory allocation mode build time customization, if any.   The default mode is Auto.   * UMA_NONE \u2014 no UMA memory will be allocated.   * UMA_SPECIFIED \u2014 up to the requested UMA memory will be allocated.   * UMA_AUTO \u2014 allocate the optimum UMA memory size for the platform.</p> <p>For APUs with integrated graphics, this will provide the optimum   UMA allocation for the platform and for other platforms will be the   same as NONE</p> <p>There is also a runtime option <code>UmaMode</code> in <code>MemConfig</code>, which is parameter for <code>AmdInitPost</code>, but it isn't clear if AGESA uses data received from host or changes it along the way before memory initialization. However, initial value of <code>UmaMode</code> already is <code>UMA_NONE</code>, and neither changing it before calling <code>AmdInitPost</code> nor in any callout functions doesn't change the outcome.</p> <p>Clearing bit EccExclEn in register D18F5x240 from coreboot after it gets set by AGESA seems to work as well. Description of this register in BKDG, 52740 Rev 3.06 informs that</p> <p>BIOS must quiesce all other forms of DRAM traffic when configuring this range. See MSRC001_001F[DisDramScrub].</p>"},{"location":"apu_ecc/#additional-findings","title":"Additional findings","text":"<p>Somewhere between memory training and setting UMA I receive <code>WARNING Event: 04012200 Data: 0, 0, 0, 0</code>. From specification:</p> <p>MEM_WARNING_BANK_INTERLEAVING_NOT_ENABLED</p> <p>I don't know if this is connected in any way to problems with ECC.</p> <p>Every corrected ECC error has the same syndrome - F2DF. It is caused by MemTest86 setting D18F3xBC_x8 (DRAM ECC) to <code>0012000F</code>. More info about meaning of these is available in BKDG on pages 172-174 (ECC syndromes) and 456 (DRAM ECC register). Another register that is set by MemTest86 is D18F3xB8 (NB Array Address) as <code>8000000x</code>, where <code>x</code> is 0, 2 and 4.</p> <p>On apu3 (4GB version) and apu5 register D18F3xB8 have some bits set on fields marked as reserved in BKDG. After clearing these bits before starting MemTest86 ECC injection started to work as expected on all platforms with ECC-capable memory.</p>"},{"location":"apu_flashing_ipxe/","title":"PC Engines APUx flashing with iPXE usage","text":""},{"location":"apu_flashing_ipxe/#intro","title":"Intro","text":"<ul> <li>Name of used APUx serial console visible in PC: <code>ttyUSB0</code></li> <li>IP of used PXE server: <code>192.168.0.108</code></li> </ul>"},{"location":"apu_flashing_ipxe/#requirements","title":"Requirements","text":"<ul> <li>Ethernet connection to the network</li> <li>iPXE server has to be online and in the same network</li> <li>PXE boot has to be enabled in SeaBIOS options</li> <li>OS with installed <code>flashrom</code></li> <li>Serial connection between APUx and PC</li> </ul>"},{"location":"apu_flashing_ipxe/#flashing-procedure","title":"Flashing procedure","text":"<ol> <li> <p>Open APUx serial console. You can use <code>minicom</code> to do that.     Parameters of connection:</p> <ul> <li>Baudrate: 115200</li> <li>Data bits: 8</li> <li>Parity: None</li> <li>Stop bits: 1</li> </ul> <pre><code>sudo minicom -b 115200 -o -D /dev/&lt;name of APUx serial console visible in PC&gt;\n</code></pre> <p>E.g.</p> <p><code>sudo minicom -b 115200 -o -D /dev/ttyUSB0</code></p> </li> <li> <p>Turn on APUx.</p> </li> <li> <p>When following communicate appears:</p> <pre><code>Press F10 key now for boot menu, N for PXE boot\n</code></pre> <p>press <code>N</code> to enter to the PXE boot menu.</p> <pre><code>---------------- iPXE boot menu ----------------\nipxe shell\nautoboot\n</code></pre> </li> <li> <p>Select <code>ipxe shell</code>. You have to hurry because default option is <code>autoboot</code> and     it will be selected after few seconds.</p> </li> <li> <p>After successful running the ipxe shell the following prompt will appear</p> <pre><code>iPXE&gt;\n</code></pre> <p>Now you have to type commands showed below:</p> <pre><code>dhcp net1\nset filename pxelinux.0\nset next-server 192.168.0.108\nchain tftp://${next-server}/${filename}\n</code></pre> <p>The <code>X</code> number in <code>netX</code> interface can be different depending on the connector to which Ethernet is connected. If selected interface is connected to network information similar to the showed below should appear:</p> <pre><code>Configuring (net1 00:0d:b9:47:bb:e1).................. ok\n</code></pre> <p>MAC address should be displayed. If there is no MAC address that means that there is no connection to the network for that interface.</p> <p>IP placed next to <code>next-server</code> should be correct IP of used PXE server. In case http server is used use http:// instead of tftp://</p> </li> <li> <p>After few seconds PXE server boot menu  should appear:</p> <pre><code>                lqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqk\n                x         PXE server boot menu          x\n                tqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqu\n                x Install                               x\n                x Debian-netboot                        x\n                x Voyage-netinst                        x\n                x                                       x\n                x                                       x\n                x                                       x\n                x                                       x\n                x                                       x\n                x                                       x\n                x                                       x\n                x                                       x\n                x                                       x\n                mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqj\n\n                        Press [Tab] to edit options\n</code></pre> <p>Select <code>Debian-netboot</code> because it's the only OS with installed <code>flashrom</code> available in PXE server boot menu when instruction is being written. After that OS booting should start.</p> <p>Number of OSes can be increased in the future.</p> <p>When <code>Legacy Console Redirection</code> is turned on displayed characters are doubled. It's beacause iPXE is outputting data to the serial console and to the screen, which is emulated on serial console.</p> </li> <li> <p>When a prompt similar to the shown below appears:</p> <pre><code>pcengines login:\n</code></pre> <p>Type <code>root</code> as login. Then next prompt should appear:</p> <pre><code>Password:\n</code></pre> <p>Type <code>root</code> as password to finish logging process.</p> <p>Steps shown above can be automated using Robot Framework.</p> </li> <li> <p>Now you can start flashing process. To flash firmware with <code>flashrom</code> usage     type:</p> </li> <li> <p>Now you can reboot the platform.</p> <p>Sometimes after APUx flashing platform doesn't turn on after warm boot. In that situation cold boot is required.</p> </li> </ol>"},{"location":"apu_flashing_ipxe/#apu1","title":"APU1","text":"<pre><code>flashrom -w &lt;directory to ROM&gt; -p internal -c \"MX25L1605A/MX25L1606E/MX25L1608E\"\n</code></pre>"},{"location":"apu_flashing_ipxe/#apu2345","title":"APU2/3/4/5","text":"<pre><code>flashrom -w &lt;directory to ROM&gt; -p internal\n</code></pre> <p>E.g. (APU2):</p> <pre><code>flashrom -w /tmp/coreboot.rom -p internal\n</code></pre> <p>After correct firmware flashing the following message should appear:</p> <pre><code>Reading old flash chip contents... done.\nErasing and writing flash chip... Erase/write done.\nVerifying flash... VERIFIED.\n</code></pre>"},{"location":"apu_flashing_ipxe/#sending-rom-image-to-apux-device-with-scp-usage","title":"Sending ROM image to APUx device with <code>scp</code> usage","text":"<p>To send ROM image to device you can use <code>scp</code>.</p> <pre><code>cd &lt;directory with ROM image&gt;\nscp &lt;ROM image&gt; root@&lt;IP of APUx to flash&gt;:&lt;directory to store ROM image on APUx&gt;\n</code></pre> <p>E.g (APU2).:</p> <pre><code>cd /home/me/coreboot/build\nscp coreboot.rom root@192.168.0.123:/tmp\n</code></pre> <p>Then to flash APU2 type in the serial console:</p> <pre><code>cd\nflashrom -w /tmp/coreboot.rom -p internal\n</code></pre>"},{"location":"apu_flashing_ipxe/#enabling-pxe-boot-in-seabios","title":"Enabling PXE boot in SeaBIOS","text":"<ol> <li> <p>Turn on APUx.</p> </li> <li> <p>When the following prompt shows:</p> <pre><code>Press F10 key now for boot menu\n</code></pre> <p>Press <code>F10</code>.</p> </li> <li> <p>Then menu similar to the showed below should appear:</p> <pre><code>Select boot device:\n\n1. Payload [setup]\n2. Payload [memtest]\n</code></pre> <p>Select <code>1. Payload [setup]</code> by pressing <code>1</code>.</p> </li> <li> <p>Next menu will be showed:</p> <pre><code>### PC Engines apu2 setup v4.5.7 ###\nBoot order - type letter to move device to top.\n\na USB 1 / USB 2 SS and HS\nb SDCARD\nc mSATA\nd SATA\ne mPCIe1 SATA1 and SATA2\nf iPXE (disabled)\n\n\nr Restore boot order defaults\nn Network/PXE boot - Currently Disabled\nu USB boot - Currently Enabled\nl Legacy console redirection - Currently Disabled\nw Enable BIOS write protect - Currently Disabled\nx Exit setup without save\ns Save configuration and exit\n</code></pre> <p>Select <code>n Network/PXE boot - Currently Disabled</code> by pressing <code>n</code>. This position should change to <code>n Network/PXE boot - Currently Enabled</code>.</p> </li> <li> <p>Now you can reboot platform by choosing <code>s Save configuration and exit</code>, so     press <code>s</code> to do that.</p> </li> </ol>"},{"location":"apu_flashing_with_rpi/","title":"Flashing APUx with Raspberry Pi","text":""},{"location":"apu_flashing_with_rpi/#preparing-environment-and-building-image","title":"Preparing environment and building image","text":"<p>Details about building firmware are mentioned in README</p>"},{"location":"apu_flashing_with_rpi/#flashing-apux-using-rpi23zero","title":"Flashing APUx using RPi2/3/zero","text":"<p>If You have already built an image with descriptions provided earlier, it is time to connect RPi to apu.</p> <ol> <li> <p>Prepare wire connections.</p> <p>pinout:</p> Signal RPi Pin number APUx SPI pin header 3V power 17 1 VCC (may be omitted) GND 20 2 GND SPI0 CS0 24 3 SPICS SPI0 CLK 23 4 SPICLK SPI0 MISO 21 5 SPIDI SPI0 MOSI 19 6 SPIDO <p>Except that before flashing we have to make sure that APUx is on and   in S5 state. That means we have to connect pins 2 and 3 on J2 header   before turning power on. In such case there will be no output on serial   port.</p> </li> <li> <p>Configure SPI and SSH on RPi.</p> </li> </ol> <p>On RPi side we can use other pins as well. There are 2xSPI, 2x3V power and   8xGND. Note that SPI requires <code>dtoverlay=spi1-1cs</code> in <code>/boot/config.txt</code>:</p> <ul> <li>I have Raspbian on SD card, I need additional customizations:</li> <li>if /dev/spidev0.0 doesn't exist, set <code>dtparam=spi=on</code> in <code>boot/config.txt</code>,     reboot.</li> <li>I want to connect via WiFi/SSH. So I place config <code>wpa_supplicant.conf</code> <code>/boot/</code> (<code>/etc/wpa_supplicant/</code> should work as well).</li> <li>enable SSH on boot (in <code>/etc/rc.local</code>):</li> </ul> <pre><code>    /etc/init.d/ssh start\n</code></pre> <ul> <li>To figure out RPi's IP address I use:</li> </ul> <pre><code>    ~/img&gt; sudo nmap -sP 192.168.0.255/24\n\n    [...]\n    Nmap scan report for 192.168.0.16\n    Host is up (0.17s latency).\n    MAC Address: B8:27:EB:24:81:58 (Raspberry Pi Foundation)\n    [...]\n</code></pre> <p>Be carefull, you may need to adjust IP address mask!</p> <ul> <li>I can login on pi user (default password: raspberry), which     has sudo priviledges:</li> </ul> <pre><code>    ssh pi@192.168.0.16\n</code></pre> <ul> <li>install flashrom</li> </ul> <pre><code>    pi@raspberrypi:~$ sudo apt-get install flashrom\n</code></pre> <ul> <li>read ROM image:</li> </ul> <p>##### APU1   <pre><code>    pi@raspberrypi:~$ sudo flashrom -p linux_spi:dev=/dev/spidev0.0,spispeed=16000 -r apu.rom -c \"MX25L1605A/MX25L1606E/MX25L1608E\"\n</code></pre></p> <p>##### APU2/3/4/5:</p> <p><pre><code>    pi@raspberrypi:~$ sudo flashrom -p linux_spi:dev=/dev/spidev0.0,spispeed=16000 -r apu.rom\n</code></pre> 3. Connecting via serial port:</p> <ul> <li>RS232 connection - according to the image (TX &amp; RX crossed)</li> </ul> <p></p> <p>Terminal command:</p> <pre><code>sudo screen -L /dev/ttyUSB0 115200,-cstopb\n</code></pre>"},{"location":"cbmem_building/","title":"Coreboot <code>cbmem</code> building","text":""},{"location":"cbmem_building/#intro","title":"Intro","text":"<ul> <li>Instruction based on Linux Voyage</li> <li>Checked for ALIX.1E and APU5 platforms</li> <li>Root user is recommended</li> <li>Git is required if it's not installated type: <pre><code>apt-get install git -y\n</code></pre></li> </ul>"},{"location":"cbmem_building/#building-and-installation-process","title":"Building and installation process","text":"<ol> <li> <p>Clone coreboot repository</p> <pre><code>git clone https://review.coreboot.org/coreboot.git\n</code></pre> <p>If an error similar to the showed below occurs:</p> <pre><code>error: Problem with the SSL CA cert (path? access rights?) while accessing https://review.coreboot.org/coreboot.git/info/refs\nfatal: HTTP request failed\n</code></pre> <p>Install <code>ca-certificates</code> package:</p> <pre><code>apt-get install ca-certificates -y\n</code></pre> </li> <li> <p>Build and install <code>cbmem</code> in OS</p> <pre><code>cd coreboot/util/cbmem/\nmake\nmake install\n</code></pre> <p><code>cbmem</code> tool should be installed in OS to display help you can type:</p> <pre><code>cbmem -h\n</code></pre> </li> </ol>"},{"location":"cold_reset/","title":"Performing cold reset remotely","text":"<p>It is not possible to perform 100% cold boot without physically disconnecting power supply, some registers cannot be reset otherwise. BKDG differentiates between cold boot, cold reset and warm reset, but even within one type of reset some bits marked with \"Cold reset: 0\" are cleared and others are not.</p>"},{"location":"cold_reset/#discovered-ways-to-perform-reset","title":"Discovered ways to perform reset","text":"<p>Table below gives initial values, they are changed during boot sequence. Bits changing in D18F0x6C (Link Initialization Control) are set and checked by AGESA to differentiate cold boot from warm boot. Some bits (0x1003ff) in PMxC0 (S5/Reset Status) are checked by FCH initialization code, they result in additional reset when set.</p> Reset type D18F0x6C PMxC0 Cold boot 0x000ff800 0x00000800 Reboot 0x000ffe00 0x40080400 Reset 0x000ff800 0x40010400 Power button 0x000ff800 0x40200402 FullRst 0x000ff800 0x40200400 ACPI reset 0x000ff800 0x40000400 PCI reset 0x000ffe00 0x40020400 <p>Bits 10 and 11 in PMxC0 can't be changed by software, even though they are described as read-write in BKDG. Bits describing reset reasons can be cleared by writing 1 to them, others were not tested.</p>"},{"location":"cold_reset/#reboot","title":"Reboot","text":"<p>Done with <code>reboot</code> in shell or after changing options in sortbootorder. It performs warm reset. Sets DoReset in PMxC0.</p>"},{"location":"cold_reset/#reset-button","title":"Reset button","text":"<p>Done by temporary shorting reset pin to the ground. Performs cold reset from AGESA's point of view. Sets UsrReset in PMxC0.</p>"},{"location":"cold_reset/#power-button","title":"Power button","text":"<p>By shorting power button pin to the ground for more than 4 seconds platform enters S5 state. After second, short press the platform starts up. It is considered to be cold reset, but during FCH initialization platform will perform another reset (after which PMxC0 is set as in reboot, D18F0x6C as in cold boot). This was one of causes for doubled sign of life. During first reboot SleepReset and FourSecondPwrBtn are set in PMxC0.</p>"},{"location":"cold_reset/#fullrst-through-io-port-cf9","title":"FullRst through IO port CF9","text":"<p>Bit 3 of IO port CF9 is:</p> <p>FullRst. Read-write. Reset: 0. 0=Assert reset signals only. 1=Place system in S5 state for 3 to 5 seconds.</p> <p>Bits 1 (SysRst) and 2 (RstCmd) need to be set as well. CF9 can be accessed through its shadow in ACPI space (PMxC5, at address 0xFED803C5 when MMIO is enabled). Performs cold reset and gives time for most peripheral devices to get into stable state. SleepReset is set in PMxC0.</p>"},{"location":"cold_reset/#acpi-emulated-reset-button","title":"ACPI emulated reset button","text":"<p>Done by setting bit 6 (ResetAllAcpi) of PMxC4 (Reset Command). It is described as emulating a reset button event, but it does not set UsrReset in PMxC0, while physical button does.</p>"},{"location":"cold_reset/#pci-reset","title":"PCI reset","text":"<p>Also triggered through PMxC4. Reset is done after setting bit 0 (Reset), but only if bit 7 (ResetEn) was set. They need to be set with two separate writes. Performs \"soft PCI reset\" (SoftPciRst in PMxC0), which is a warm reset.</p>"},{"location":"cold_reset/#forcing-cold-reset-from-started-os","title":"Forcing cold reset from started OS","text":"<p>After flashing new firmware it is highly recommended (sometimes even necessary) to perform a cold boot. It is not always an option for remote devices, so tests were made to find another way of forcing cold boot path in firmware. Note that this cannot guarantee that when any device on board entered an unexpected state it can be brought back to defined state without full power cycle.</p> <p>As these steps are most likely to be run on production software stack options like using custom kernel/driver or applying kernel parameters at boot time were not considered. Tests were made with Debian 9 and pfSense 2.4.2.</p> <p>FullRst was chosen as most promising one: it can be done both by IO as well as memory mapped ACPI register. It also puts platform in state closest to cold boot from all tested options by staying in S5 for some time.</p>"},{"location":"cold_reset/#debian","title":"Debian","text":"<p>By default it is impossible to access physical memory space without changes to the kernel, however access to IO ports is unrestricted for root user. Thus, to perform FullRst type as root:</p> <pre><code>echo -ne \"\\xe\" | dd of=/dev/port bs=1 count=1 seek=$((0xcf9))\n</code></pre> <p><code>\\xe</code> is a bitmap for FullRst, RstCmd and SysRst. After this command platform enters S5 immediately, so save your work, sync all filesystems etc. using e.g. SysRq, of course do not perform last step (reboot or shutdown), as it will be done by FullRst. We found that sometimes 5 seconds is not enough for syncing. Full sequence required for reset is:</p> <pre><code>for i in s u; do echo $i | sudo tee /proc/sysrq-trigger; sleep 15; done\necho -ne \"\\xe\" | dd of=/dev/port bs=1 count=1 seek=$((0xcf9))\n</code></pre>"},{"location":"cold_reset/#pfsense","title":"pfSense","text":"<p>Shell in pfSense does not support backslash in <code>echo</code> command arguments. It also does not allow to use subshells to convert hex to decimal. IO ports cannot be accessed, but MMIO can.</p> <pre><code>printf \"\\016\" | dd of=/dev/mem bs=1 count=1 seek=4275569605\n</code></pre> <p><code>\\016</code> is the same as <code>\\xe</code>, in octal. Seek value is 0xFED803C5 written in decimal. There is no SysRq as in Linux, so manual sync and read-only remount is required, most likely it needs to be forced because of open file descriptors. It needs to be performed for all mounted filesystems, this example for forced reboot shows only root filesystem:</p> <pre><code>sync &amp;&amp; mount -u -f -r /\nprintf \"\\016\" | dd of=/dev/mem bs=1 count=1 seek=4275569605\n</code></pre>"},{"location":"firmware_flashing/","title":"Firmware flashing","text":""},{"location":"firmware_flashing/#firmware-version-check","title":"Firmware version check","text":"<p>To check firmware version you can use:</p> <pre><code>dmidecode -s bios-version\n</code></pre> <p>In case <code>dmidecode</code> is not installed use following command:</p>"},{"location":"firmware_flashing/#for-debian-based-distributions","title":"For Debian-based distributions:","text":"<pre><code>apt-get install dmidecode\n</code></pre>"},{"location":"firmware_flashing/#for-freebsd","title":"For FreeBSD:","text":"<pre><code>pkg install -y dmidecode\n</code></pre>"},{"location":"firmware_flashing/#for-netbsd","title":"For NetBSD:","text":"<pre><code>pkg_add dmidecode\n</code></pre>"},{"location":"firmware_flashing/#apux-firmware-flashing","title":"APUx firmware flashing","text":"<p>To flash firmware image to APUx SPI install (or use system with already installed) flashrom.</p> <p>For Debian-based distributions you can install <code>flashrom</code> by simply:</p> <pre><code>sudo apt-get install flashrom\n</code></pre> <p>For FreeBSD you can install <code>flashrom</code> by:</p> <pre><code>pkg install -y flashrom\n</code></pre> <p>For NetBSD: <pre><code>pkg_add flashrom\n</code></pre></p> <p>You can also use minimal distributions with already installed <code>flashrom</code> like TinyCoreLinux.</p>"},{"location":"firmware_flashing/#corebootrom-flashing","title":"coreboot.rom flashing","text":""},{"location":"firmware_flashing/#apu1","title":"APU1","text":"<pre><code>flashrom -w coreboot.rom -p internal -c \"MX25L1605A/MX25L1606E/MX25L1608E\"\n</code></pre>"},{"location":"firmware_flashing/#apu23456","title":"APU2/3/4/5/6","text":"<pre><code>flashrom -w coreboot.rom -p internal\n</code></pre> <p>IMPORTANT</p> <p>To update the firmware and keep the runtime configuration unchanged please use the following command:</p> <pre><code>flashrom -p internal -w apuX_v4.14.0.2.rom --fmap -i COREBOOT\n</code></pre> <p>The persistent runtime configuration works only when migrating from versions v4.14.0.1 and later. The feature is not yet supported on apu1. Flashrom version needs to be v1.1 or newer.</p> <p>A full power cycle is required after flashing. If it is not possible (e.g. remote firmware upgrade), when flashing coreboot v4.9.0.4 or newer a full reset can be forced with the following commands after using <code>flashrom</code>. For older firmware versions please refer to cold_reset.md.</p>"},{"location":"firmware_flashing/#linux","title":"Linux","text":"<pre><code>setpci -s 18.0 6c.L=10:10\n</code></pre>"},{"location":"firmware_flashing/#freebsd","title":"FreeBSD","text":"<pre><code>pciconf -w pci0:24:0 0x6c 0x580ffe10\n</code></pre>"},{"location":"firmware_flashing/#netbsd","title":"NetBSD","text":"<pre><code>pcictl pci0 read -d 24 -f 0 0x6c\n# verify that you see 580ffe00\npcictl pci0 write -d 24 -f 0 0x6c 0x580ffe10\n</code></pre> <p>After that reboot as usual. Platform will turn off for 3-5 seconds. Note that there are parts of the platform which cannot be reset with this approach. A full power cycle is strongly suggested when possible.</p>"},{"location":"firmware_flashing/#motherboard-mismatch-warning","title":"Motherboard mismatch warning","text":"<p>When you update firmware and try to flash image to apu board, <code>motherboard mismatch warning</code> can be yielded. It is known issue related to SMBIOS table entries. Since <code>v4.6.7</code> in mainline and <code>v4.0.15</code> in legacy, part number entry is in shorter (correct) form. Therefore, if you update to those version (or newer) a warning will appear. To flash BIOS correctly, just add <code>-p internal:boardmismatch=force</code> flag. Entire flashing command should look like this:</p> <pre><code>flashrom -w coreboot.rom -p internal:boardmismatch=force\n</code></pre>"},{"location":"firmware_flashing/#developer-tricks","title":"Developer tricks","text":"<p>To automate firmware update while developing copy ssh keys to target machine:</p> <pre><code>cat ~/.ssh/id_rsa.pub | ssh root@192.168.0.101 'cat &gt;&gt; .ssh/authorized_keys'\n</code></pre> <p>Then you can use below command to flash APU2 recently built changes:</p> <pre><code>APU2_IP=192.168.0.101 &amp;&amp; ssh root@$APU2_IP remountrw &amp;&amp; \\\nscp build/coreboot.rom root@$APU2_IP:/root &amp;&amp; \\\nssh root@$APU2_IP flashrom -w /root/coreboot.rom -p internal \\\n&amp;&amp; ssh root@$APU2_IP reboot\n</code></pre>"},{"location":"firmware_flashing/#flashrom-known-problems","title":"Flashrom known problems","text":"<p>If flashrom tells you <code>/dev/mem mmap failed: Operation not permitted</code>:</p> <ul> <li>Most common at the time of writing is a Linux kernel option,  CONFIG_IO_STRICT_DEVMEM, that prevents even the root user from  accessing hardware from user-space. Try again after rebooting with  iomem=relaxed in your kernel command line.</li> <li>Some systems with incorrect memory reservations (e.g. E820 map)  may have the same problem even with CONFIG_STRICT_DEVMEM.  In that case iomem=relaxed in the kernel command line may help too.</li> </ul> <p>You can set iomem=relaxed via Grub by appending to file <code>/etc/default/grub</code>  this line:</p> <p><pre><code>GRUB_CMDLINE_LINUX=\"iomem=relaxed\"\n</code></pre> Then run following commad:</p> <pre><code>grub-mkconfig -o /boot/grub/grub.cfg\n</code></pre> <p>Finally reboot</p>"},{"location":"firmware_flashing/#apu-firmware-updater-for-opnsense","title":"APU firmware updater for OPNsense","text":"<p>You can use a script to update the firmware on an OPNsense firewall.</p> <ul> <li>Login via SSH to your OPNsense firewall.</li> <li>Copy the script apu_fw_updater_opnsense.sh where you want it.</li> <li>Make the script executable using <code>chmod +x apu_fw_updater_opnsense.sh</code>.</li> <li>Set the correct type, e.g. <code>TYPE=\"apu2\"</code>.</li> <li>Set the desired version, e.g. <code>VERSION=\"4.12.0.4\"</code>.</li> <li>Execute the script <code>./apu_fw_updater_opnsense.sh</code>.</li> </ul>"},{"location":"flashrom_building/","title":"Flashrom building","text":""},{"location":"flashrom_building/#intro","title":"Intro","text":"<ul> <li>Instruction based on Linux Voyage</li> <li>Checked for ALIX.1E platform</li> <li>Root user is recommended</li> </ul> <p>Instructions is based on the informations from official flashrom website. For more details visit https://www.flashrom.org/Downloads.</p>"},{"location":"flashrom_building/#building-process","title":"Building process","text":"<ol> <li> <p>Install all required packages.</p> <p><pre><code>apt-get update\n</code></pre> Then: <pre><code>apt-get install git -y \\\n    build-essential -y \\\n    libpci-dev -y \\\n    libusb-dev -y \\\n    libusb-1.0-0-dev -y \\\n    libftdi-dev -y\n</code></pre></p> </li> <li> <p>Clone flashrom repository.</p> <pre><code>git clone https://review.coreboot.org/flashrom.git\n</code></pre> <p>If an error similar to the showed below occurs: <pre><code>error: Problem with the SSL CA cert (path? access rights?) while accessing https://review.coreboot.org/flashrom.git/info/refs\nfatal: HTTP request failed\n</code></pre> Install <code>ca-certificates</code> package: <pre><code>apt-get install ca-certificates -y\n</code></pre></p> </li> <li> <p>Enter to the downloaded directory and build flashrom.</p> <p><pre><code>cd flashrom\nmake\n</code></pre> You can install it in OS by typing: <pre><code>make install\n</code></pre></p> </li> </ol>"},{"location":"flashrom_building/#flashing-firmware-with-flashrom-usage","title":"Flashing firmware with flashrom usage","text":"<pre><code>flashrom -w &lt;ROM directory&gt; -p internal\n</code></pre> <p>E.g.: <pre><code>flashrom -w coreboot.rom -p internal\n</code></pre></p>"},{"location":"generating_coreboot_support_logs/","title":"Generating coreboot support logs and sending them for verification purposes","text":""},{"location":"generating_coreboot_support_logs/#intro","title":"Intro","text":"<ul> <li>PLATFORM_IP used as example is <code>192.168.0.100</code></li> <li>PLATFORM_SERIAL_DEVICE used as example is <code>/dev/ttyUSB0</code></li> </ul>"},{"location":"generating_coreboot_support_logs/#requirements","title":"Requirements","text":"<ul> <li>OS with <code>cbmem</code> and <code>dmesg</code> installed on the target board (<code>cbmem</code> installation instruction)</li> <li>Coreboot gerrit account: https://review.coreboot.org/</li> <li>Possibility to login to <code>root</code> user on the target board via SSH or enabled coreboot boot logs redirection to the serial console</li> <li>Git (type on target device<code>apt-get install git -y</code> to install git on it)</li> <li>Internet connection</li> </ul>"},{"location":"generating_coreboot_support_logs/#common-steps-for-every-log-generation-process","title":"Common steps for every log generation process","text":"<ol> <li> <p>Build coreboot ROM.</p> <p>It's important to not delete the ROM image, because script used to generate   support logs requires that image. Default directory of built ROM image is   <code>coreboot/build/</code>.</p> </li> <li> <p>Flash your device with flashrom.</p> <p>If you have <code>flashrom</code> installed on your OS you can jump to   <code>Flashing firmware with flashrom</code> section of instruction linked above.</p> </li> <li> <p>Enter to the <code>coreboot</code> directory.</p> <p>It's important to run script from that directory, because it's root directory   for coreboot scripts. If you try to run script from another directory there   is a good chance that an error will be displayed and you will be prompted to   change the directory to the correct one.</p> </li> <li> <p>Choose one of the methods shown in sections below and generate coreboot       support logs.</p> <p><code>board_status.sh</code> is responsible for required logs collecting.   It's placed in <code>coreboot/util/board_status</code> directory. But don't enter there.   You have to stay in <code>coreboot</code> directory.</p> <p>Sending logs for verification is descibred in <code>Generating logs and sending   them for verification</code> section.</p> </li> </ol>"},{"location":"generating_coreboot_support_logs/#generating-logs-with-ssh-usage","title":"Generating logs with SSH usage","text":"<p>Run <code>board_status.sh</code> script with <code>-r</code> option:</p> <pre><code>./util/board_status/board_status.sh -r &lt;PLATFORM_IP&gt;\n</code></pre> <p>Eg.: <pre><code>./util/board_status/board_status.sh -r 192.168.0.100\n</code></pre></p> <p>You will be requested to enter <code>root</code> user password many times. It is uncomfortable for a longer period of time. To avoid this requirement follow those steps</p> <p>After finishing that process information where logs were saved may be shown. Example output: <pre><code>output files are in /tmp/coreboot_board_status.XM0Q6Hn6/pcengines/alix2d/4.6-1329-g5bceca1c530c/2017-09-05T08_27_51Z\n</code></pre> Generating logs and sending them for verification</p> <p>To generate logs and then send them to coreboot supported boards repository add <code>-u</code> option:</p> <pre><code>./util/board_status/board_status.sh -r &lt;PLATFORM_IP&gt; -u\n</code></pre> <p>Eg.: <pre><code>./util/board_status/board_status.sh -r 192.168.0.100 -u\n</code></pre> Logs will be sent to the https://review.coreboot.org/cgit/board-status.git/ repository automatically.</p> <p>If you have no SSH key added correctly to coreboot gerrit you will be prompted to enter your user name and HTTP password. To generate temporary HTTP password enter to the settings of your coreboot gerrit account, select <code>HTTP Password</code> section and click on <code>Generate Password</code> button. Generated password will appear next to the <code>Password</code> cell. You can use that password to upload support logs with <code>board_status.sh</code> script.</p>"},{"location":"generating_coreboot_support_logs/#generating-logs-with-serial-console","title":"Generating logs with serial console","text":"<p>There is a possibility to get logs with serial port: <pre><code>sudo ./util/board_status/board_status.sh -s &lt;PLATFORM_SERIAL_DEVICE&gt;\n</code></pre></p> <p>Eg.: <pre><code>sudo ./util/board_status/board_status.sh -s /dev/ttyUSB0\n</code></pre> That method is not as comfortable as SSH. Sometimes problems with logs formatting may occur. What is more you have to press <code>Enter</code> when you log to the OS, because first phase of logs collecting ends when grub starts. Second phase of logs collecting start after pressing <code>Enter</code>.</p>"},{"location":"generating_coreboot_support_logs/#generating-logs-using-earlier-built-rom-image","title":"Generating logs using earlier built ROM image","text":"<p>If you have ROM image built earlier you can set custom directory to ROM image (default directory is <code>coreboot/build/</code>). To do that use <code>-i</code> option:</p> <p><pre><code>./util/board_status/board_status.sh -i &lt;DIRECTORY_TO_ROM_IMAGE&gt; -r &lt;PLATFORM_IP&gt;\n</code></pre> Eg.:</p> <pre><code>./util/board_status/board_status.sh -i /tmp/coreboot.rom -r 192.168.0.100\n</code></pre>"},{"location":"generating_coreboot_support_logs/#enabling-the-possibility-to-ssh-login-without-entering-user-password","title":"Enabling the possibility to SSH login without entering user password","text":"<p>On master device:</p> <ol> <li>Generate public/private rsa key pair:       <pre><code>ssh-keygen -t rsa\n</code></pre></li> <li> <p>Send generated public id via SSH:       <pre><code>ssh-copy-id root@&lt;PLATFORM_IP&gt;\n</code></pre>       Eg.:       <pre><code>ssh-copy-id root@192.168.0.100\n</code></pre></p> <p>and enter the correct user password.</p> <p>If the following error message appears:   <pre><code>bash: .ssh/authorized_keys: No such file or directory\n</code></pre></p> <p>That means you have to create <code>.ssh</code> folder. To do this type:   <pre><code>cd\nmkdir .ssh\n</code></pre>   If there were no errors you should be able to connect to your target device via   SSH without entering user password.</p> <p>Eg.:</p> <pre><code>arek@kal:~$ ssh root@192.168.0.100\nLinux voyage 3.10.11 #2 SMP Thu Sep 7 11:36:30 UTC 2017 i586\n\nThe programs included with the Debian GNU/Linux system are free software;\nthe exact distribution terms for each program are described in the\nindividual files in /usr/share/doc/*/copyright.\n\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\npermitted by applicable law.\n__  __\n\\ \\/ /___ __  __ ___  ___  ___    Useful Commands:\n\\  // _ \\\\ \\/ /,-_ |/ _ |/ -_)     remountrw - mount disk as read-write\n\\/ \\___/ \\  / \\___,\\_  |\\___|     remountro - mount disk as read-only\n      _/_/        _'_|          remove.docs - remove all docs and manpages\n{ V o y a g e } - L i n u x\n      &lt; http://linux.voyage.hk &gt;   Version: 0.9.2 (Build Date 20131219)\n\nLast login: Tue Sep 12 10:16:21 2017 from 192.168.0.108\nroot@voyage:~#\n</code></pre> </li> </ol>"},{"location":"gpios/","title":"APU GPIO tutorial","text":"<p>PC Engines apu2 platform series have many features that are being controlled by GPIOs, in particular:</p> <ul> <li>mPCIe resets</li> <li>WLAN disable on mPCIe slots</li> <li>SIM swaps</li> <li>LEDs</li> <li>S1 switch</li> </ul> <p>In order to make it possible to modify/read their state, an OS driver is required. In Linux there is a <code>pinctrl_amd</code> module which is responsible for GPIO controller handling. The driver required special ACPI device definition for GPIO controller to work. Since 4.10.0.1 version, the ACPI support was added and enabled GPIO interface via sysfc in Linux systems.</p>"},{"location":"gpios/#leds","title":"LEDs","text":"<p>Linux has a special driver called <code>gpio-leds</code> which interacts with GPIO controller pinctrl driver to utilize a fancy sysfs interface for LED handling. All 3 front leds have been assigned to this driver and as a result are exposing following interface:</p> <pre><code>$ ls /sys/class/leds/\napu2:green:led1  apu2:green:led2  apu2:green:led3\n</code></pre> <p>The name of the platform in the leds filename changes according to platform. So apu3 will have like <code>apu3:green:ledX</code></p> <p>Each of these LEDs expose following interface:</p> <pre><code>$ ls /sys/class/leds/apu2\\:green\\:ledX\nbrightness  device  max_brightness  power  subsystem  trigger  uevent\n</code></pre> <p>The most interesting are <code>brightness</code> and <code>trigger</code>:</p> <ol> <li><code>brightness</code> - as the name says, it can control the LED brightness.</li> </ol> <p>GPIO controller only supports binary output (0 or 1) so the led can only be turned on or off</p> <ul> <li>turn the led on: <code>echo 1 &gt; brightness</code></li> <li>turn the led off: <code>echo 0 &gt; brightness</code></li> <li> <p>get current led state: <code>cat brightness</code></p> </li> <li> <p><code>trigger</code> - is a string which defines the system activity that will cause    the LED to be on or off. There are various triggers like:    <code>disk-activity, kbd-capslock, mmc0, heartbeat</code>. Each of them can light the    led up on certain event like disk activity, SD activity, keyboard special    key etc.</p> </li> <li> <p>to set a trigger: <code>echo kbd-capslock &gt; trigger</code></p> </li> <li>to unset a trigger: <code>echo none &gt; trigger</code></li> </ul> <p>By default LED3 has been set as a <code>heartbeat</code>. <code>heartbeat</code> requires additional module to be loaded: <code>ledtrig-heartbeat</code>. In order to load the module by default add the <code>ledtrig-heartbeat</code> to <code>/etc/modules-load.d/modules.conf</code>.</p>"},{"location":"gpios/#s1-switch-button","title":"S1 switch button","text":"<p>The small button near the SD card slot is called a S1 button. With the ACPI it has been configured to work with <code>gpio-keys</code> module which handles a interrupt GPIO keys/keyboards. S1 switch has following attributes:</p> <ul> <li>active state low</li> <li>edge triggered</li> <li>pull-up by default</li> <li>interrupt line 7</li> <li>debounce time interval: 100ms</li> </ul> <p>The driver is also set to use the S1 switch as <code>EV_KEY</code> event type and the key code to emit <code>BTN_1</code> (257).</p> <p>In order to determine whether the interrupt work for the S1 switch one can check the initial interrupts statistics with <code>cat /proc/interrupts</code>:</p> <pre><code>            CPU0       CPU1       CPU2       CPU3\n...\n   7:          0          0          0          1  IR-IO-APIC    7-fasteoi   pinctrl_amd\n...\n  58:          0          0          0          0  amd_gpio   89  switch1\n...\n</code></pre> <p>After pressing the button few times:</p> <pre><code>            CPU0       CPU1       CPU2       CPU3\n...\n   7:          0          0          0         17  IR-IO-APIC    7-fasteoi   pinctrl_amd\n...\n  58:          0          0          0         16  amd_gpio   89  switch1\n...\n</code></pre> <p>The button can be further used in user own applications.</p>"},{"location":"gpios/#raw-gpio-control","title":"Raw GPIO control","text":"<p>Other GPIO signals that do not have a dedicated river have to be controlled manually. In order to control a GPIO, a simple sysfs interface is introduced.</p> <pre><code>$ ls /sys/class/gpio/\nexport  gpiochip320  unexport\n</code></pre> <p>As one can see there is a <code>gpiochip320</code> which corresponds to GPIO controller of the SoC. The 320 number according to documentation corresponds to the first GPIO number that can be controlled by this chip. The exact number of controllable GPIOs for this chip can be retrieved with:</p> <pre><code>$ cat /sys/class/gpio/gpiochip320/ngpio\n192\n</code></pre> <p>As one can see this driver supports 192 GPIOs that can be controlled by this chip giving a range of 320-511 GPIO numbers. In order to control a GPIO one has to export the GPIO to sysfs first:</p> <pre><code>$ echo 391 &gt; /sys/class/gpio/export\n</code></pre> <p>Note that only GPIOs from range 320-512 are supported. Writing other values will cause <code>-bash: echo: write error: Invalid argument</code>.</p> <p>If the operation was successful a GPIO will appear:</p> <pre><code>$ ls /sys/class/gpio/\nexport  gpio391  gpiochip320  unexport\n</code></pre> <p>In fact we have exported a GPIO71 of the SoC, the 320 offset must be subtracted.</p> <p>Each GPIO can export following interface:</p> <pre><code>$ ls /sys/class/gpio/gpio391\nactive_low  device  direction  edge  power  subsystem  uevent  value\n</code></pre> <ul> <li><code>active_low</code> - indicates whether this pin is an active low signal (for input    only)</li> <li><code>direction</code> - can be either <code>in</code> or <code>out</code></li> <li><code>edge</code> - for inputs, whether pin should be active on <code>rising, falling, both</code>,    <code>none</code> edge</li> <li><code>value</code> - state of the pin</li> </ul> <ol> <li> <p>In order to change the state of the GPIO:    <pre><code># ensure pin is in output mode\n$ echo out &gt; direction\n# check current state\n$ cat value\n1\n# change the state\n$ echo 0 &gt; value\n$ cat value\n0\n</code></pre></p> </li> <li> <p>Change pin direction:    <pre><code># set to input\n$ echo in &gt; direction\n# set to output\n$ echo out &gt; direction\n</code></pre></p> </li> <li> <p>Set pin to active low:    <pre><code>$ echo 1 &gt; active_low\n</code></pre></p> </li> </ol>"},{"location":"gpios/#gpio-mappings","title":"GPIO mappings","text":"<p>PC Engines apu series has many GPIOs and they differ between board versions. In order to not disrupt platform operation, only the following GPIOs should be exported:</p> <ol> <li> <p>APU2:</p> </li> <li> <p><code>386</code> - mPCIe1 reset</p> </li> <li><code>387</code> - mPCIe2 reset</li> <li><code>391</code> - mPCIe1 WLAN disable</li> <li> <p><code>392</code> - mPCIe2 WLAN disable</p> </li> <li> <p>APU3/APU4:</p> </li> <li> <p><code>386</code> - mPCIe3 reset</p> </li> <li><code>387</code> - mPCIe2 reset</li> <li><code>391</code> - mPCIe3 WLAN disable</li> <li><code>392</code> - mPCIe2 WLAN disable</li> <li> <p><code>410</code> - SIM swap</p> </li> <li> <p>APU5:</p> </li> <li> <p><code>386</code> - mPCIe3 reset</p> </li> <li><code>387</code> - mPCIe2 reset</li> <li><code>391</code> - mPCIe3 WLAN disable</li> <li><code>392</code> - mPCIe2 WLAN disable</li> <li><code>410</code> - SIM swap</li> </ol> <p>Important: when exporting, pin changes its state to input and low state. In BIOS these pins are configured as output high. Be sure to configure them to output first before using them.</p> <p>Here is a script for controlling these GPIOs, as well as for invoking a coldboot: * GPIO control script</p>"},{"location":"gpios/#known-issues","title":"Known issues","text":"<ol> <li> <p>Since coreboot release v4.10.0.0 there is conflict with apuled driver    in FreeBSD. It is because BIOS reserves resources for GPIOs with ACPI    controller support. As a result, FreeBSD cannot reserve the memory for    native driver anymore. Entire issue with details is described    here.     The workaround was found by alexpro user and is simply adding environment    variable <code>debug.acpi.avoid=\"\\_SB_.PCI0.GPIO\"</code> to <code>loader.conf</code>. It doesn't affect    any other ACPI functionality then GPIOs.</p> </li> <li> <p>LED entries in sysfs in Linux are duplicated due to presence of leds_apu    module. Blacklisting leds_apu module will get rid of the duplicates. See    issue</p> </li> </ol>"},{"location":"ipxe_compile/","title":"Ipxe compile","text":""},{"location":"ipxe_compile/#ipxe-compilation-configuration-and-including-in-firmware","title":"iPXE - compilation, configuration and including in firmware","text":"<p>NOTE: this procedure applies to legacy releases older than v4.0.14</p>"},{"location":"ipxe_compile/#compilation","title":"Compilation","text":"<ol> <li>Prepare build environment, if you haven't done so yet</li> <li>Build firmware, if you haven't done so yet</li> <li> <p>Clone iPXE repository:</p> <pre><code>git clone git@github.com:pcengines/ipxe.git\n</code></pre> </li> <li> <p>Configure and run build in container:</p> <pre><code>docker run -v ${PWD}/../src/coreboot:/coreboot -v ${PWD}/../src/ipxe:/ipxe -t -i pc-engines/apu2b\ncd /ipxe\nwget https://raw.githubusercontent.com/pcengines/apu2-documentation/master/ipxe/general.h -O src/config/local/general.h\nwget https://raw.githubusercontent.com/pcengines/apu2-documentation/master/ipxe/shell.ipxe -O src/shell.ipxe\n</code></pre> <p><code>wget</code> downloads iPXE configuration that maximize feature set that is exposed. Supported features:</p> <ul> <li>net proto: IPV4, IPV6, STP</li> <li>download proto: TFTP, HTTP, HTTPS, FTP, SLAM, NFS</li> <li>image: NBI, ELF, MULTIBOOT, PXE, SCRIPT, BZIMAGE, COMBOOT, SDI, PNM, PNG</li> </ul> <p>For more details please check general.h.</p> <pre><code>make bin/8086157b.rom EMBED=./shell.ipxe\n</code></pre> <p>Note that <code>${PWD}/../src/ipxe</code> is absolute path to repository cloned in point 3.</p> </li> </ol> <p>As a result you will have <code>bin/8086157b.rom</code></p>"},{"location":"ipxe_compile/#including-in-firmware-image","title":"Including in firmware image","text":"<p>To include iPXE ROM in <code>coreboot.rom</code> please use <code>cbfstool</code>.</p> <p>To add iPXE ROM to existing image inside container:</p> <pre><code>cd /\n./coreboot/build/cbfstool ./coreboot/build/coreboot.rom add -f /ipxe/src/bin/8086157b.rom -n genroms/pxe.rom -t raw\n</code></pre> <p>If you already have <code>genroms/pxe.rom</code>, please remove it and then add new version:</p> <pre><code>./coreboot/build/cbfstool ./coreboot/build/coreboot.rom remove -n genroms/pxe.rom\n</code></pre>"},{"location":"j13_usb_header/","title":"J13 USB header enablement","text":""},{"location":"j13_usb_header/#j13-usb-header","title":"J13 USB header","text":"<p>The J13 USB header found on apu3-6 boards is disabled by default in some BIOS versions (this was last reported for version 4.12.0.4). If you encounter problems with USB peripherals (e.g. watchdog module) connected to this header, you may use <code>sortbootorder</code> to enable the EHCI controller functionality.</p>"},{"location":"j13_usb_header/#how-to-enable","title":"How to enable","text":"<ul> <li>Enter sortbootorder in the SeaBIOS menu while booting by choosing the option   <code>payload [setup]</code> in the boot menu</li> <li>Check the state of the EHCI controller - if it says <code>Disabled</code>, enable it   using the <code>H</code> key</li> <li>Save and exit sortbootorder by pressing <code>s</code>.</li> </ul>"},{"location":"linux_issues/","title":"Known issues with Linux","text":""},{"location":"linux_issues/#pcengines-apuv2-driver-is-broken-as-of-may-2-2022","title":"pcengines-apuv2 driver is broken (as of May 2, 2022)","text":"<p><code>pcengines-apuv2</code> was added in Linux 5.1 already supporting both APU2 and APU3, Linux 5.5 extended the driver to support APU4 as well.</p> <p>There are two ways for registering APU-specific devices used by the kernel: <code>pcengines-apuv2</code> driver and parsing of ACPI tables. The former way targets APUs specifically and has to be updated for each new version of the board, while the latter one is driven by generic ACPI tables and can work with an APU as long as the firmware it's running provides suitable ACPI data.</p> <p><code>pcengines-apuv2</code> in turn depends on <code>leds-gpio</code> and <code>gpio_keys_polled</code>. As per this issue, <code>gpio-keys-polled</code> has trouble querying description of a GPIO provided by <code>pcengines-apuv2</code> driver:</p> <pre><code>kernel: gpio-keys-polled gpio-keys-polled: unable to claim gpio 0, err=-517\n</code></pre> <p><code>leds-gpio</code> driver on the other hand works fine with inputs from ACPI data and from <code>pcengines-apuv2</code>, because it's capable of querying GPIO data by index.</p>"},{"location":"linux_issues/#potential-fix","title":"Potential fix","text":"<p>There are 3 commits from the author of <code>pcengines-apuv2</code> here, in his fork of the kernel.</p> <p><code>input: keyboard: gpio-keys-polled: skip oftree code when CONFIG_OF disabled</code> commit is not a functional change. The other two were submitted for review and <code>input: keyboard: gpio-keys-polled: use input name from pdata if available</code> was committed, but it's not enough to fix the issue.</p> <p>The last commit is supposed to make <code>gpio_keys_polled</code> work the same as <code>leds-gpio</code>, but it wasn't upstreamed because a more generic approach was supposed to be proposed. Apparently, more generic approach didn't make it either leaving <code>pcengines-apuv2</code> broken to this day.</p>"},{"location":"linux_issues/#workaround","title":"Workaround","text":"<p>Until situation with <code>gpio-keys-polled</code> or <code>pcengines-apuv2</code> improves, it's recommended to blacklist <code>pcengines-apuv2</code> module as a workaround for this issue and rely on parsing of ACPI data.</p>"},{"location":"microcode_patching/","title":"Microcode patching on PC Engines apu2/3/4/5","text":"<p>With v4.8.0.7 release we have implemented an experimental feature of microcode patching. Inspired by community we decided to add such feature to the PC Engines firmware.</p> <p>The first implementation did not work as expected unfortunately. The procedure patched only BSP core leaving APs unpatched and AGESA was overwriting the patch with its own microcode in one of initialization phases.</p> <p>Thus we have redesigned the feature to overwrite the microcode patch.</p>"},{"location":"microcode_patching/#user-guide","title":"User guide","text":"<p>To build the firmware from scratch and add microcode patch follow the steps:</p> <ol> <li>Clone the pce-fw-builder</li> <li> <p>Pull or build     docker container:</p> <pre><code>docker pull pcengines/pce-fw-builder\n</code></pre> <p>or for legacy:</p> <pre><code>docker pull pcengines/pce-fw-builder-legacy\n</code></pre> </li> <li> <p>Build v4.8.0.7 image (v4.0.22 for legacy):</p> <pre><code>./build.sh release v4.8.0.7 {apu2|apu3|apu4|apu5}\n</code></pre> </li> <li> <p>Download the microcode patch     and place it in <code>release/coreboot</code> which is relative to cloned <code>pce-fw-builder</code>     directory.</p> </li> <li> <p>Make changes to menuconfig:</p> <pre><code>./build.sh dev-build $PWD/release/coreboot {apu2|apu3|apu4|apu5} menuconfig\n</code></pre> <p>In the Chipset submenu find <code>Include CPU microcode in CBFS</code> and choose <code>Add microcode patch for AMD fam16h (EXPERIMENTAL)</code> option. Then in the Chipset submenu fill the <code>Microcode binary path and filename</code> field with <code>cpu00730F01_ver07030106_2018-02-09_88EDFAA0.bin</code> which was downloaded in previous step. If the binary has been renamed, please fill the renamed binary here. Path is relative to coreboot root directory. When finished, save the config file.</p> </li> <li> <p>Build the image again:</p> <pre><code>./build.sh dev-build $PWD/release/coreboot {apu2|apu3|apu4|apu5} CPUS=$(nproc)\n</code></pre> </li> <li> <p>Flash the new image. The firmware image can be found in     <code>release/coreboot/build</code> which is relative to cloned <code>pce-fw-builder</code>     directory.</p> </li> </ol>"},{"location":"microcode_patching/#summary","title":"Summary","text":"<p>By default the microcode patch level is <code>0x07030105</code> according to dmesg reports on Linux system. So v4.8.0.7 release binary will show:</p> <pre><code>microcode: CPU0: patch_level=0x07030105\nmicrocode: CPU1: patch_level=0x07030105\nmicrocode: CPU2: patch_level=0x07030105\nmicrocode: CPU3: patch_level=0x07030105\n</code></pre> <p>After successfully building and flashing the image, dmesg should show:</p> <pre><code>microcode: CPU0: patch_level=0x07030106\nmicrocode: CPU1: patch_level=0x07030106\nmicrocode: CPU2: patch_level=0x07030106\nmicrocode: CPU3: patch_level=0x07030106\n</code></pre> <p>Also when checking the vulnerability status with spectre-meltdown-checker one can notice that following fields have changed:</p> <p>With microcode patch:</p> <pre><code>* PRED_CMD MSR is available:  YES\n* CPU indicates IBPB capability:  YES  (IBPB_SUPPORT feature bit)\n...\n* IBPB enabled and active:  YES\n</code></pre> <p>Without microcode patch:</p> <pre><code>* PRED_CMD MSR is available:  NO\n* CPU indicates IBPB capability:  NO\n...\n* IBPB enabled and active:  NO\n</code></pre> <p>Load <code>msr</code> kernel module before launching the script.</p>"},{"location":"mpcie_modules/","title":"List of supported mPCIe modules","text":"<p>This document contains a list of supported WiFi and LTE modules in mini PCI Express card form factor. Document intends to present limitations of the modules and quirks necessary for their flawless operation.</p> <p>The list is currently limited only to tested and verified modules</p>"},{"location":"mpcie_modules/#lte-modules","title":"LTE modules","text":"<p>Note: By default, in apu3/4, the SIM card slots are \"crossed\", that is to say, the left SIM slot is wired to the mSATA slot and the right SIM slot is wired to the mPCIe2 slot. You can swap the SIM slots on the fly using GPIO 410 - follow the GPIO documentation for detailed instructions.</p>"},{"location":"mpcie_modules/#quectel-ep06","title":"Quectel EP06","text":"<p>This LTE module has certain problems with detection in the operating systems. The module uses a USB interface to communicate with the processor and OS. Due to the availability of USB 2.0 and USB 3.0 interfaces in the module, it often gets enumerated incorrectly. The presence of USB 3.0 lanes causes the module to use the USB 3.0 protocol instead of the USB 2.0 protocol. The mPCIe slots on apu boards have only USB 2.0 signals routed to the connectors. In place of the USB 3.0 signals, apu boards have either PCIe signals or SATA signals for WiFi and mSATA modules respectively. The design of the modules is intended to support majority of the modules, but it will not always be compatible with all possible modules, please take it into consideration.</p> <p>Symptoms of the wrong detection:</p> <ul> <li>only 1 ttyUSB node created by OS</li> <li>no ttyUSB nodes created by OS</li> <li>errors in USB enumeration for the module in dmesg</li> </ul> <p>Solutions:</p> <ol> <li>Contact PC Engines for a module firmware update with USB 3.0 protocol    disabled if You have problems with module detection.</li> <li>Cover USB 3.0 signals on the module with tape to block signal connection as    shown in the picture:</li> </ol> <p></p> <p>Black pins mean that they have to be covered with tape. The 6 black pins on the top side are USB3.0 signals. Two pins on the bottom side are I2C/SMBus pins which also should be covered with tape. The module design requires pull-ups on the mainboard side, but they are not present on apu.</p> <p>Compatible slots:</p> Platform mPCIe1 mPCIe2 mSATA apu2 \u2714 \u2714 \u2716 apu3 \u2716 \u2714 \u2714 \u00b9 apu4 \u2716 \u2714 \u2714 \u00b9 <p>(1) Do not forget to enable EHCI0 controller in sortbootorder</p> <p>For each port's capabilities please refer to mPCIe port capabilities</p>"},{"location":"mpcie_modules/#huawei-me909u","title":"HUAWEI ME909u","text":"<p>This module works fairly well with all apu boards. But be aware that due to its buggy firmware, LTE may not work in some conditions with the default <code>cdc_ether</code> driver selected by <code>usb_modeswitch</code>. You may have more success using the <code>qmi_wwan</code> driver (<code>echo Configuration=1 &gt;/etc/usb_modeswitch.d/12d1:1573</code>) which implements a workaround in qmi_wwan_rx_fixup().</p> <p>Compatible slots:</p> Platform mPCIe1 mPCIe2 mSATA apu2 \u2714 \u2714 \u2716 apu3 \u2716 \u2714 \u2714 \u00b9 apu4 \u2716 \u2714 \u2714 \u00b9 <p>(1) Do not forget to enable EHCI0 controller in sortbootorder</p>"},{"location":"mpcie_modules/#huawei-me906s-m2","title":"HUAWEI ME906s M.2","text":"<p>There is an option to use the M.2 Key B to Mini PCIE PCI-E Adapter Converter for 3G/4G/5G and connect Huawei ME906s M.2 4G to compatible mPCIe slot. This adapter includes routing the SIM signals so APU SIM slot may be used without problems.</p> <p>Kudos to Jamie Lentin (@lentinj) for checking this.</p> <p></p> <p></p> <p>Compatible slots:</p> Platform mPCIe1 mPCIe2 mSATA apu2 \u2714 \u2714 \u2716 apu3 \u2716 \u2714 \u2714 \u00b9 apu4 \u2716 \u2714 \u2714 \u00b9 <p>(1) Do not forget to enable EHCI0 controller in sortbootorder</p>"},{"location":"mpcie_modules/#wifi-modules","title":"WiFi modules","text":""},{"location":"mpcie_modules/#wle200nx","title":"WLE200NX","text":"<p>This module works fairly well with all apu boards. The module may have issues with interrupts. Related issues:</p> <ul> <li>coreboot #206</li> <li>coreboot #285</li> <li>coreboot #323</li> </ul> <p>Compatible slots:</p> Platform mPCIe1 mPCIe2 mSATA apu2 \u2714 \u2714 \u2716 apu3 \u2714 \u2716 \u2716 apu4 \u2714 \u2716 \u2716 <p>Quirks:</p> <p>The real culprit of interrupt routing problems is the ath9k kernel module responsible for WLE200NX operation. The module has no robust interrupt implementation and tries to remap legacy INTx interrupt with IOMMU which is not possible due to technical reasons. The correct solution is to force ath9k kernel module to use MSI interrupts which can be remapped. This can be done with:</p> <pre><code>echo \"options ath9k use_msi=1\" | sudo tee -a /etc/modprobe.d/ath9k.conf\n</code></pre> <p>When the module is loaded, it initializes interrupts coming from WiFi devices to be a MSI type. MSI interrupts are correctly remapped by kernel with IOMMU, thus the issue is not present.</p> <p>Other solutions with kernel command line options:</p> <ul> <li><code>amd_iommu=off</code> - disables the use of IOMMU in kernel.</li> <li><code>intremap=off</code> - disables security feature of IOMMU called interrupt   remapping.</li> </ul>"},{"location":"mpcie_modules/#wle600vx","title":"WLE600VX","text":"<p>This module works fairly well with all apu boards. Tested by PC Engines and apu users.</p> <p>Compatible slots:</p> Platform mPCIe1 mPCIe2 mSATA apu2 \u2714 \u2714 \u2716 apu3 \u2714 \u2716 \u2716 apu4 \u2714 \u2716 \u2716 <p>Quirks:</p> <ul> <li>Sometimes the module may have problems with OS communication on mainline   releases. In such case providing <code>amd_iommu=off</code> to kernel command line may   help.</li> </ul>"},{"location":"mpcie_modules/#wle900vx","title":"WLE900VX","text":"<p>This module works fairly well with all apu boards.</p> <p>Compatible slots:</p> Platform mPCIe1 mPCIe2 mSATA apu2 \u2714 \u2714 \u2716 apu3 \u2714 \u2716 \u2716 apu4 \u2714 \u2716 \u2716 <p>Quirks:</p> <ul> <li>Sometimes the module may have problems with OS communication on mainline   releases. In such case providing <code>amd_iommu=off</code> to kernel command line may   help.</li> </ul>"},{"location":"mpcie_modules/#wle1216v5-20","title":"WLE1216V5-20","text":"<p>Correct detection of this module is a little tricky and hardware related. Due to different PCI Express reset circuit on apu boards, apu2 has problems with this particular module detection. Most likely due to different reset timing caused by different <code>PE_RST</code> circuitry on apu2, the module does not come out of reset in time during PCI enumeration and thus is not detected in BIOS and operating system.</p> <p>Quirks:</p> <ul> <li>On apu2 in mPCIe2 slot module works only after a soft reboot with legacy   firmware, however during the tests we have encountered kernel panics. On the   other hand users did not experience kernel panics and are able to use the   module after reboot. The apu2 board revision plays a huge role in the   mentioned problems.</li> <li>on apu3 and apu4 the module works with any firmware and does not require   reboot</li> </ul> Platform mPCIe1 mPCIe2 mSATA apu2 \u2716 \u2714 \u00b9 \u2716 apu3 \u2714 \u2716 \u2716 apu4 \u2714 \u2716 \u2716 <p>(1) Refer to quirks, it is known to not work stably on all apu2 board revisions</p>"},{"location":"mpcie_modules/#aw7915-np1","title":"AW7915-NP1","text":"<p>The AW7915-NP1 is a MediaTek MT7915E based Wi-Fi 6 (802.11ax) card from AsiaRF. It features 4x4 MIMO and support for 160MHz channels, and a maximum theoretical bandwidth of 2400 Mb/s. In the apu2, the card can reach over 1Gb/s transfer speeds in ideal conditions.</p> <p>This module has been tested to work reliably in an apu2c4 board running OpenWRT 21.02.02. No firmware tweaks are necessary for correct operation.</p> <p>The card gets hot under sustained operation, easily reaching over 130 degrees celsius if not cooled sufficiently. A heatsink is recommended, the card does not come with one.</p> Platform mPCIe1 mPCIe2 mSATA apu2 \u2714 \u2714 \u2716 apu3 \u2714 \u2716 \u2716 apu4 \u2714 \u2716 \u2716"},{"location":"mpcie_modules/#ethernet-controllers","title":"Ethernet controllers","text":""},{"location":"mpcie_modules/#dual-ethernet-controller-realtek-rtl8111","title":"Dual Ethernet Controller Realtek RTL8111","text":"<p>Compatible slots</p> Platform mPCIe1 mPCIe2 mSATA apu2 \u2714 \u2714 \u00b9 \u2716 apu3 \u2714 \u2716 \u2716 apu4 \u2714 \u2716 \u2716 <p>(1) If RTL8111 is attached to mPCIe2 slot then option force mPCIe2 slot Clk in Payload menu must be enabled</p> <p>This model works well with apu1 boards. However, on apu2, apu3 and apu4 platforms following steps should be done to correctly enable it:</p> <ol> <li> <p>On apu2 board (apu1, apu3 and apu4 boards aren't affected) make sure to enable option force mPCIe2 slot Clk in Payload menu if you attached module to mPCIe2 slot. This menu is available during boot process by pressing <code>F10</code> button. In OS now, you should be able to see your Ethernet controller under PCI devices.</p> </li> <li> <p>Manually download and install missing Realtek firmware. Even if Ethernet controller is recognized by OS it won't work correctly without it. Installation can be done, for example in Debian OS, by performing those steps:</p> <ul> <li>Edit <code>/etc/apt/sources.list</code> file. It should contain additional two lines: <pre><code>deb http://ftp.pl.debian.org/debian stretch main non-free\ndeb-src  http://ftp.pl.debian.org/debian stretch main non-free\n</code></pre></li> <li>Update apt-get: <pre><code>sudo apt-get update\n</code></pre></li> <li>Install Realtek firmware <pre><code>sudo apt-get install firmware-realtek\n</code></pre></li> </ul> </li> </ol>"},{"location":"mpcie_modules/#sata-controllers","title":"SATA controllers","text":""},{"location":"mpcie_modules/#asmedia-asm1061","title":"ASMedia ASM1061","text":"<p>Module is NOT SUPPORTED by PC Engines apu platforms. ASM1061 was tested with Delock 95233 mPCIe 2xSATA module.</p> <p></p> <p>Compatible slots</p> <p>Due to apu boards construction, it is possible to test that module only under apu2 mPCIe2 slot. Capacitors placed near the mPCIe1 slot prevent connecting the SATA cables to the module. Therefore, module was tested only in mPCIe2 slot. After multiple tests performed, it turned out that ASM1061 module is not supported by PC Engines apu2 platform.</p> <p>Tests results</p> <p>Carried out tests and their results are presented in debug documentation. Detection problem is described more precisely there. Also, possible reasons of ASM1061 behavior are presented. Anyway, in every case and configuration that module doesn't work properly.</p>"},{"location":"mpcie_modules/#other-hardware-fixes","title":"Other hardware fixes","text":"<p>A good source of hardware fixes information of Your board is the PC Engines site.</p> <p>If You think Your problem may be related to issues listed here, contact PC Engines for details.</p> <p>If You have not found a solution either after reading this document or contacting PC Engines, feel free to open GitHub issue.</p>"},{"location":"mpcie_modules/#apu2","title":"apu2","text":"<p>Set of changes for apu2:</p> <p>Version apu2d:</p> <ul> <li>Reduce leakage current between V3 and V3A power rails (can cause problems   with SD cards).</li> <li>Add options for better compatibility with LTE modem modules.</li> </ul> <p>Version apu2c:</p> <ul> <li>Integrate blue wire patches (EMI, power-up circuit) into PCB fab.</li> </ul>"},{"location":"mpcie_modules/#apu3","title":"apu3","text":"<p>Set of changes for apu3:</p> <p>Version apu3c:</p> <ul> <li>Improve compatibility with LTE modem modules: Disconnect SMB_DAT / SMB_CLK   signals (1.8V level on Quectel).</li> <li>Improve compatibility with LTE modem modules: No stuff diodes D4 / D17,   option resistor bypass (extremely low VIL on Huawei modems, sensitive to   incoming EMI).</li> <li>Optional SIM presence indicator / SIM card detect.</li> <li>Disable non-functional NCT5104D watchdog timer.</li> <li>Increase 3.3V current limit to allow for two simultaneous LTE modems.</li> <li>Some DFM changes.</li> </ul> <p>Version apu3b:</p> <ul> <li>Fixed USB header J13 pinout.</li> </ul> <p>Version apu3a:</p> <ul> <li>The pinout on USB header J13 is wrong, do not use.</li> </ul>"},{"location":"mpcie_modules/#apu4","title":"apu4","text":"<p>Set of changes for apu4:</p> <p>Version apu4c:</p> <ul> <li>Minimize leakage from V3A to V3 rail (SD card compatibility)</li> <li>Fix USB header J12 pinout.</li> <li>Change SIM switch to FXLA2203, FXLA2204 went EOL.</li> <li>New 2GB version apu4c2, single SIM socket.</li> <li>Optional 10 pin LPC header to allow for future TPM option.</li> </ul>"},{"location":"order_of_PCI_addresses/","title":"Order of PCI addresses","text":""},{"location":"order_of_PCI_addresses/#standard-pci-addressing","title":"Standard PCI addressing","text":"<p>Initial coreboot port for APU2 was made with badly implemented PCIe engines definition passed to AGESA. It's done in the way that mPCIe cards get lower address than Network interface controllers (NICs). It causes weird and unwanted behavior like shifting addresses of NICs when a mPCIe device is added. Unfortunately it can\u2019t be changed without consequences, because of many years of APU existence on the market. If it had been changed, many APU owners would be surprised by e.g. change of interfaces names.</p>"},{"location":"order_of_PCI_addresses/#sortbootorder","title":"sortbootorder","text":"<p>To address this issue, we added a runtime option in sortbootorder which reverses the order of PCIe engines assignment in a way that:</p> <ul> <li>NICs occupy the lowest PCIe device numbers which make their enumeration persistent regardless of the WiFi module presence</li> <li>the WoL capable NIC is the first PCIe device in iPXE and in the operating system</li> <li>the mPCIe slots occupy the highest PCIe device numbers in following order: 3x NIC, mPCIe1, mPCIe2. In such case faulty detected WiFi in mPCIe2 slot will not affect interface renaming for mPCIe1 slot WiFi card.</li> </ul> <p>By default, this option is disabled which means nothing changes (compared to the state maintained for past 4 years) without intentional change of this setting.</p>"},{"location":"order_of_PCI_addresses/#how-to-change","title":"How to change","text":"<p>To reverse order of PCI addresses:</p> <ul> <li>enter the sortbootorder in the SeaBIOS menu while booting by choosing <code>payload [setup]</code></li> <li>enable the <code>Reverse order of PCI addresses</code> option by pressing <code>g</code> key</li> <li>save and exit sortbootorder by pressing <code>s</code>.</li> </ul>"},{"location":"os-status/","title":"Tested operating systems","text":""},{"location":"os-status/#os-status","title":"OS status","text":"<p>Some operating system have problems running with different storage medias. These table shows currently tested systems on BIOS v4.9.0.x with corresponding medias:</p> OS SD card SATA disk mSATA disk USB stick Voyage X1 OK OK OK*2 Debian OK OK OK OK*2 OPNsense OK OK OK OK*2 pfSense OK OK* OK OK*2 <p>*- works well with BIOS v4.6.8 or later in mainline and all legacy releases;    for v4.6.7 and older mainline versions issues with installation and system    functionality (installation break, unwanted reboots), can be fixed by adding    a hint <code>hint.ahci.0.msi=\"0\"</code>, for more information see this document</p> <p>*2 - all apu boards have problems with USB 3.x stick detection in BIOS,      system is working properly, but after reboot/warmboot/coldboot USB stick      may not appear in BIOS boot menu (depends on the stick, well working sticks      are mentioned in this document)</p> <p>X1 - Voyage Linux is bootable on SD card and works well in read-only mode,      remounting as read-write and writing changes to SD sometimes results      in kernel panic which often leads to non-operable system</p> <p>Voyage Linux 0.11:</p> <pre><code>Linux voyage 4.1.6-voyage #1 SMP Thu Jun 2 17:53:20 HKT 2016 x86_64 GNU/Linux\n</code></pre> <p>Linux Debian:</p> <pre><code>Linux debian 4.9.0-4-amd64 #1 SMP Debian 4.9.65-3+deb9u1 (2017-12-23) x86_64 GNU/Linux\n</code></pre> <p>pfSense:</p> <pre><code>FreeBSD pfSense.localdomain 11.1-RELEASE-p4 FreeBSD 11.1-RELEASE-p4 #5\nr313908+79c92265a31(RELENG_2_4): Mon Nov 20 08:18:22 CST 2017\nroot@buildbot2.netgate.com:/builder/ce-242/tmp/obj/builder/ce-242/tmp/FreeBSD-src/sys/pfSense  amd64\n</code></pre> <p>OPNsense:</p> <pre><code>OPNsense-19.1-OpenSSL-serial-amd64.img.bz2 \n</code></pre>"},{"location":"os-status/#tested-mediasos-","title":"Tested mediasos-","text":"<p>SD card: <pre><code>CID: 0353445343313647806cb1100a011a00\nCSD: 400e00325b59000076b27f800a404000\nDSR: 0x404\nFW Rev: 0x0\nHW Rev: 0x8\nManufacturer ID: 0x000003\nName: SC16G\nOCR: 00200000\nOEM ID: 0x5344\nSCR: 0235844300000000\nSerial: 0x6cb1100a\nSSR:\n0000000004000000040090000f050a0000000000000100000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000\n</code></pre></p> <p>HDD: <pre><code>Model Family:     Seagate Laptop SSHD\nDevice Model:     ST1000LM014-SSHD-8GB\nSerial Number:    W380YWQN\nLU WWN Device Id: 5 000c50 06e82fb73\nFirmware Version: LVD3\nUser Capacity:    1,000,204,886,016 bytes [1.00 TB]\nSector Sizes:     512 bytes logical, 4096 bytes physical\nRotation Rate:    5400 rpm\nForm Factor:      2.5 inches\nDevice is:        In smartctl database [for details use: -P show]\nATA Version is:   ACS-2, ACS-3 T13/2161-D revision 3b\nSATA Version is:  SATA 3.1, 6.0 Gb/s (current: 6.0 Gb/s)\nLocal Time is:    Wed Feb  7 11:06:32 2018 GMT\nSMART support is: Available - device has SMART capability.\nSMART support is: Enabled\n</code></pre></p> <p>mSATA SSD: <pre><code>Device Model:     SATA SSD\nSerial Number:    A1AE076419DF00167089\nFirmware Version: S9FM02.8\nUser Capacity:    16,013,942,784 bytes [16.0 GB]\nSector Size:      512 bytes logical/physical\nRotation Rate:    Solid State Device\nForm Factor:      mSATA\nDevice is:        Not in smartctl database [for details use: -P showall]\nATA Version is:   ACS-3 (minor revision not indicated)\nSATA Version is:  SATA 3.1, 6.0 Gb/s (current: 6.0 Gb/s)\nLocal Time is:    Wed Feb 21 13:24:02 2018 CET\nSMART support is: Available - device has SMART capability.\nSMART support is: Enabled\n</code></pre></p> <p>USB sticks parameters are presented in this document: USB tests</p>"},{"location":"os_boot_serial_console/","title":"Enabling OS boot serial console and setting connection parameters","text":""},{"location":"os_boot_serial_console/#intro","title":"Intro","text":"<ul> <li>Instructions is written for Voyage Linux, but steps shown here should work for another Linux distributions</li> <li>Used serial connection parameters: <code>baudrate</code>: 115200, <code>data bits</code>: 8, <code>parity</code>: none, <code>stop bits</code>: 1</li> <li>Used text editor is <code>nano</code>, but it can be any another text editor e.g. <code>vi</code></li> <li>Root user is recommended</li> </ul>"},{"location":"os_boot_serial_console/#enabling-sending-os-boot-logs-via-serial-console","title":"Enabling sending OS boot logs via serial console","text":"<p>Often sending OS boot logs via serial console is disabled as default setting. To enable that function <code>menu.lst</code> file has to be edited. To do that follow the steps below.</p> <ol> <li> <p>Login to Linux Voyage. Default login/password: <code>root</code>/<code>voyage</code>.</p> </li> <li> <p>After logging to Voyage Linux filesystem is mounted as <code>read-only</code>. To     change that type:</p> <pre><code>remountrw\n</code></pre> </li> <li> <p>Open <code>menu.lst</code> file with any text editor. E.g:</p> <pre><code>nano /boot/grub/menu.lst\n</code></pre> </li> <li> <p>Find the settings of configuration from grub menu which you choose. The     structure should look like:</p> <pre><code>title           Debian GNU/Linux, kernel 3.10.11\nroot            (hd0,0)\nkernel          /boot/vmlinuz-3.10.11 root=UUID=f45cf8c7-311e-47d6-88d0-a3a8861f37be ro\ninitrd          /boot/initrd.img-3.10.11\n</code></pre> </li> <li> <p>Add to the kernel line following options:</p> <pre><code>vga=normal console=tty0 console=ttyS0,115200n8\n</code></pre> <p>After that step settings of selected configuration should look like:</p> <pre><code>title           Debian GNU/Linux, kernel 3.10.11\nroot            (hd0,0)\nkernel          /boot/vmlinuz-3.10.11 root=UUID=f45cf8c7-311e-47d6-88d0-a3a8861f37be ro console=ttyS0,115200n8\ninitrd          /boot/initrd.img-3.10.11\n</code></pre> </li> <li> <p>Save the changes and close the file. For <code>nano</code> it's <code>Ctrl+O</code> to save the     file and <code>Ctrl+X</code> to exit from file.</p> </li> <li> <p>Now you can reboot the system and check that OS boot logs appear in serial     console:</p> </li> </ol> <pre><code>reboot\n</code></pre>"},{"location":"os_boot_serial_console/#changing-serial-console-connection-parameters","title":"Changing serial console connection parameters","text":"<ol> <li> <p>Login to Linux Voyage. Default login/password: <code>root</code>/<code>voyage</code>.</p> </li> <li> <p>After logging to Voyage Linux filesystem is mounted as <code>read-only</code>. To     change that type:</p> <pre><code>remountrw\n</code></pre> </li> <li> <p>Turn on serial redirection in the GRUB. To do that open <code>grub.conf</code> file     with any text editor. There can be no <code>grub.conf</code> file in your OS. Opening     text editor with correctly chosen directory and file name will create it     automatically:</p> <pre><code>nano /boot/grub/grub.conf\n</code></pre> <p>Then add lines shown below to the file:</p> <pre><code>serial --unit=1 --speed=19200\nterminal --timeout=8 console serial\n</code></pre> <p>Save the changes and exit from the file (for <code>nano</code>: <code>Ctrl+O</code> next <code>Ctrl+X</code>).</p> </li> <li> <p>Enable serial output from the Linux kernel. That step is descibed     above.</p> </li> <li> <p>Turn on logging in via the serial console. Edit file named <code>inittab</code>:</p> <pre><code>nano /etc/inittab\n</code></pre> <p>Find uncommented line which looks similar to the shown below:</p> <pre><code>T0:23:respawn:/sbin/getty -L ttyS0 115200\n</code></pre> <p>The last parameter is responsible for the set baudrate. In the example that value is set to <code>115200</code>. You can change it to the wanted baudrate.</p> <p>There can be more uncommented lines as indicated.</p> <p>Save the changes and exit from the file.</p> </li> <li> <p>Now you can reboot system and check that serial console baudrate was     correctly changed:</p> <pre><code>reboot\n</code></pre> <p>If you are using serial console to perform steps from this instruction take a note that you should change connection parameters in used serial terminal (e.g. <code>minicom</code>) too. Because characters won't be shown correctly after <code>reboot</code>.</p> </li> </ol>"},{"location":"pfSense-install-guide/","title":"pfSense Installation Guide","text":""},{"location":"pfSense-install-guide/#contents","title":"Contents","text":"<ul> <li>pfSense Installation Guide<ul> <li>Contents</li> <li>pfSense Image</li> <li>Booting installer</li> <li>Installation</li> </ul> </li> </ul>"},{"location":"pfSense-install-guide/#pfsense-image","title":"pfSense Image","text":"<p>In order to install pfSense on apu2/3/5 platforms from USB, obtain following Image from official mirror and follow the official Writing Disk Images guide for Windows, Linux, UNIX or MAC OS X.</p>"},{"location":"pfSense-install-guide/#booting-installer","title":"Booting installer","text":"<p>Plug the USB stick prepared earlier to apu and boot from it.</p> <p>Only for BIOS v4.6.7 or older, when main installer menu pops up do the following:</p> <ul> <li>Interrupt the installer by pressing <code>ESC</code> and type   following commands:</li> </ul> <pre><code>set hint.ahci.0.msi=\"0\"\nboot\n</code></pre> <p>BIOS versions v4.6.7 and older need to have MSI disabled, due to signal races causing disk write commands timeouts.</p> <p>Installer should load the kernel now and begin installation process.</p>"},{"location":"pfSense-install-guide/#installation","title":"Installation","text":"<p>Proceed with the installation choosing the options that fit you.</p> <p>At the end of installation, only BIOS v4.6.7 or older to prevent system hangs or reboots after few hours uptime, open the shell to customize the system:</p> <p>Edit <code>/boot/device.hints</code> and append <code>hint.ahci.0.msi=\"0\"</code></p>"},{"location":"pfsense_installerconfig/","title":"Unattended installation PFSense","text":"<p>This document describes the process of preparing the automatic installer pFsense on a USB stick. The whole procedure was tested on Ubuntu.</p>"},{"location":"pfsense_installerconfig/#kernel-installation","title":"Kernel installation","text":"<ol> <li>Download the required packages by running the following command:</li> </ol> <pre><code>sudo apt install linux-headers-$(uname -r) linux-source$(uname -r | cut -d- -f1)\n</code></pre> <ol> <li>Go to the indicated location and unzip the file named    <code>linux-source-$(uname -r | cut -d- -f1).tar.bz2</code> as shown below:</li> </ol> <pre><code>cd /usr/src/linux-source-$(uname -r | cut -d- -f1)/\nsudo tar xjf linux-source-$(uname -r | cut -d- -f1).tar.bz2\n</code></pre> <ol> <li>After successfully unpacking, copy the files required for kernel installation    by running the following commands:</li> </ol> <pre><code>sudo cp ../linux-headers-$(uname -r)/Module.symvers linux-source-$(uname -r | cut -d- -f1)/\ncd linux-source-$(uname -r | cut -d- -f1)/\nsudo cp /boot/config-$(uname -r) .config\n</code></pre> <ol> <li>Finally, build and install the kernel by running the following command:</li> </ol> <pre><code>sudo make olddefconfig\n</code></pre>"},{"location":"pfsense_installerconfig/#ufs-module-compilation","title":"UFS module compilation","text":"<ol> <li>Edit the <code>.config</code> file by setting the value of <code>UFS_FS_WRITE</code> to <code>y</code>.</li> <li>Prepare resources to compile the UFS module by running the following    commands:</li> </ol> <pre><code>sudo make prepare\nsudo make modules_prepare\nsudo make M=scripts/mod -j8\nsudo make M=fs/ufs modules -j8\n</code></pre> <ol> <li>Copy the previously prepared files by running the following commands (To load    an unsigned kernel module it is required to disable Secure Boot, otherwise it    won't work):</li> </ol> <pre><code>sudo cp /lib/modules/$(uname -r)/kernel/fs/ufs/ufs.ko   /lib/modules/$(uname -r)/kernel/fs/ufs/ufs_backup.ko \nsudo cp fs/ufs/ufs.ko /lib/modules/$(uname -r)/kernel/fs/ufs/ufs.ko\n</code></pre> <ol> <li>Load the UFS module by running the following commands:</li> </ol> <pre><code>sudo depmod\nsudo modprobe ufs\n</code></pre> <ol> <li>Mount the <code>FreeBSD_install</code> partition to properly configure the installer by    running the following command(<code>X</code> depending on how many drives are connected    to your computer):</li> </ol> <pre><code>sudo mount -t ufs -o ufstype=ufs2 /dev/sdX5 /mnt\n</code></pre>"},{"location":"pfsense_installerconfig/#rclocal","title":"rc.local","text":"<p>After booting from the USB stick installer <code>rc.local</code> is executed. Changes have to be applied to this file to eliminate interactive dialog options. After mounting parition edit the <code>rc.local</code> file located in the <code>etc</code> folder by using <code>nano</code> or <code>vim</code> editors.</p> <ol> <li> <p>Add environment variable defining terminal type:</p> <pre><code>#!/bin/sh\n# $FreeBSD$\nexport TERM=vt100\n</code></pre> </li> <li> <p>Comment out console type input:</p> <pre><code># Serial or other console\necho\necho \"Welcome to pfSense!\"\necho\necho \"Please choose the appropriate terminal type for you system.\"\necho \"Common console types are:\"\necho \"   ansi     Standard ANSI terminal\"\necho \"   vt100    VT100 or compatible terminal\"\necho \"   xterm    xterm terminal emulator (or compatible)\"\necho \"   cons25w  cons25w terminal\"\necho\necho -n \"Console type [vt100]: \"\n#read TERM\n#TERM=${TERM:-vt100}\n</code></pre> </li> </ol>"},{"location":"pfsense_installerconfig/#installerconfig","title":"installerconfig","text":"<p>The <code>installerconfig</code> script is called if exists. If it doesn't exist manual installation is performed.</p> <pre><code>#!/bin/bash\n# Unattended installation part\n...\n# After installation you can launch new system shell and change configuration\n...\n# When work is exit\nexit\n</code></pre> <p>This file must be located in the <code>etc</code> directory. The <code>etc/installerconfig</code> script will install pfSense and replace all configuration files that we want to change before the first boot.</p> <p>An example file is located here.</p>"},{"location":"pfsense_installerconfig/#problems","title":"Problems","text":"<p>During extracting distribution files phase installation sometimes hangs up. I waited for 15 minutes and nothing happened. My solution was to reset the platform.</p>"},{"location":"power_consumption_testing/","title":"Power Consumption Testing","text":""},{"location":"power_consumption_testing/#intro","title":"Intro","text":"<p>The energy consumption of apu platforms is a topic worth paying attention to. Power consumption is valuable with continuous software improvement. Thanks to this information, it takes less time to detect errors.</p>"},{"location":"power_consumption_testing/#setup-testing-environment","title":"Setup testing environment","text":"<p>Measuring power consumption is possible due to the connection of RTE with the INA219 sensor. RTE  (Remote Testing Environment) is the device which might support debugging and testing the devices, of course it might be replaced by another device with an I2C header. The INA219 is a current shunt and power monitor.</p> <p>Connecting the RTE I2C header (J9) with the INA219 I2C header allows reading information from the sensor:</p> RTE I2C header (J9) INA219 I2C header 1 (3V3) (Vcc) 2 (SCK) (SCL) 3 (SDA) (SDA) 4 (GND) (GND) <p>The next step is to connect the appropriate wires to Vin- and Vin+. It is required to cut one of the wires in the power cable running from RTE to the device. The connection is made by cutting off the plus and connecting the cable so that the part coming from RTE is connected to Vin +, and the part coming out of the device to Vin-.</p> <p></p> <p>The values \u200b\u200bfrom the sensor in the tests are normally read every 0.5s, but it is a modifiable value. It is possible to read information about voltage(V), current(A) and power(W) from the sensor. The following commands are used to read the values \u200b\u200bfrom the sensor:</p> <pre><code>cat /sys/class/hwmon/hwmon0/in1_input\ncat /sys/class/hwmon/hwmon0/curr1_input\ncat /sys/class/hwmon/hwmon0/power1_input\n</code></pre>"},{"location":"power_consumption_testing/#tests","title":"Tests","text":""},{"location":"power_consumption_testing/#apu-stress-test-cpu","title":"Apu stress-test CPU","text":"<p>A test case is following:</p> <ol> <li>Power on RTE and power on apu3.</li> <li>Boot to Debian 10 (buster) with kernel 4.19 on apu3.</li> <li>Start measurements on RTE: constantly measure bus voltage, current and     input power in 0.5 seconds time intervals and save them to a text file.</li> <li>After 10 seconds from starting measurements, invoke <code>sysbench</code> command on     apu3.</li> <li>When <code>sysbench</code> is finished, wait ~25 seconds and invoke the command again.</li> <li>When <code>sysbench</code> command was invoked 10 times, finish the entire test.</li> </ol>"},{"location":"power_consumption_testing/#presentation-of-the-results","title":"Presentation of the results","text":"<p>The test results are presented as charts based on the values \u200b\u200bobtained during the tests. Graphs or simple information on power consumption are available in the PC-ENGINES newsletter.</p>"},{"location":"power_consumption_testing/#plans-for-tests","title":"Plans for tests","text":"<p>Measurement plans in case of test development:</p> <ul> <li>at the start of the device</li> <li>during the memtest</li> <li>when the platform is constantly restarted</li> </ul>"},{"location":"pxelinux-cfg/","title":"Pxelinux cfg","text":""},{"location":"pxelinux-cfg/#pxelinux-on-apu-platforms","title":"Pxelinux on apu platforms","text":""},{"location":"pxelinux-cfg/#ipxe-serial-console","title":"iPXE serial console","text":"<p>Since we have rebased to SeaBIOS 1.11.0, which implements full serial console support, we do not need sgabios and serial console in iPXE anymore. However some pxe configurations seem to have problems with displaying and interacting the pxe boot menu.</p>"},{"location":"pxelinux-cfg/#ipxe-scripting-and-pxelinux","title":"iPXE scripting and pxelinux","text":"<p>When trying to boot by chain loading iPXE scripts (e.g. menu.ipxe) there are no problems with display and switching between options. Unfortunately when trying to boot Debian netinst via pxelinux provided with image, the bootmenu is not printed correctly (weird signs appear). Furthermore, when trying to switch between options, only the currently selected row is refreshed, which causes the screen to shift and makes it completely unreadable.</p>"},{"location":"pxelinux-cfg/#pxelinux-configuration","title":"Pxelinux configuration","text":"<p>In order to get rid of issues mentioned above, special configuration is needed. Since SeaBIOS 1.11.0 is redirecting screen output to console, it behaves like a video console. This is the main reason of the problems. As a workaround video console has to be disabled on pxelinux and serial port has to be enabled to act as a console. These parameters allows to achieve such effect:</p> <pre><code>CONSOLE flag_val\nIf flag_val is 0, disable output to the normal video console. If flag_val is 1,\nenable output to the video console (this is the default). Some BIOSes try to\nforward this to the serial console which can make a total mess of things, so\nthis option lets you disable the video console on these systems.\n\nSERIAL port [baudrate [flowcontrol]]\nEnable a serial port to act as the console. \"port\" is a number\n(0 = /dev/ttyS0 = COM1, etc.) or an I/O port address (e.g. 0x3F8). If \"baudrate\"\nis omitted, the baud rate defaults to 9600 bps. The serial parameters are\nhardcoded to 8 bits, no parity and 1 stop bit.\n</code></pre> <p>These parameters must be placed in <code>pxelinux.cfg</code>. Example of correct <code>pxelinux.cfg</code>:</p> <pre><code># D-I config version 2.0\n# search path for the c32 support libraries (libcom32, libutil etc.)\nserial 0 115200\nconsole 0\n\npath debian-installer/i386/boot-screens/\ninclude debian-installer/i386/boot-screens/menu.cfg\ndefault debian-installer/i386/boot-screens/vesamenu.c32\nprompt 0\ntimeout 300\n</code></pre> <p><code>serial</code> parameter has to be the first parameter in config file. <code>console</code> parameter has be set then to 0 to disable video console.</p>"},{"location":"release_process/","title":"Release process","text":""},{"location":"release_process/#intro","title":"Intro","text":"<p>Following document describes release process for new versions of firmware for PC Engines APU2, APU3, APU4 and APU5 platform. It is intended for developers who want to create fully featured binaries and test those with various versions of sortbootorder, SeaBIOS, memtest86+ or iPXE.</p> <p>For releases v4.0.17 and v4.6.10 or newer please use pce-fw-builder</p> <p>Please note that flashing without recovery procedure is not recommended and we are not responsible for any damage that inexperienced person can do to the system.</p>"},{"location":"release_process/#use-repo-tool-to-initialize-set-of-repositories","title":"Use repo tool to initialize set of repositories","text":"<pre><code>mkdir apu2_fw_rel\ncd apu2_fw_rel\n\nrepo init -u git@github.com:pcengines/release_manifests.git -b refs/tags/&lt;tag_release&gt;\n# or\nrepo init -u git@github.com:pcengines/release_manifests.git -b &lt;branch_name&gt;\n\nrepo sync --force-sync\n</code></pre> <p>where: * <code>&lt;tag_release&gt;</code> - is the release version number (e.g. <code>v4.6.4</code>) * <code>&lt;branch_name&gt;</code> - is the release branch (i.e. <code>coreboot-4.0.x</code> for legacy, and <code>coreboot-4.6.x</code> for mainline</p> <p>You can look-up changes, available branches and release tags on this github repository.</p>"},{"location":"release_process/#build-container","title":"Build container","text":"<p>This is to avoid impact of system on build results:</p> <pre><code>docker build -t pcengines/apu2 apu2/apu2-documentation\n</code></pre> <p>This step could be omitted, if there was build done before (container already exists).</p>"},{"location":"release_process/#build-release","title":"Build release","text":"<p>Assuming you initialized the repo with mainline release:</p> <pre><code>./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build-ml\n</code></pre> <p>If config file was not created yet, the menuconfig will pop up.</p> <p>Please choose:</p> <pre><code>Mainboard -&gt; Mainboard vendor -&gt; PC Engines\nMainboard -&gt; Mainboard model  -&gt; APU2\nor\nMainboard -&gt; Mainboard model  -&gt; APU3\nor\nMainboard -&gt; Mainboard model  -&gt; APU4\nor\nMainboard -&gt; Mainboard model  -&gt; APU5\n</code></pre> <p>All other pieces will be set according to recent release configuration. coreboot image will start to build after exiting menu.</p> <p>For legacy release you can use this command: <pre><code>./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build\n</code></pre></p> <p>There are also additional commands like: <pre><code># menuconfig\n./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build-ml menuconfig\n# or for legacy\n./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build menuconfig\n\n# distclean\n./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build-ml distclean\n# or for legacy\n./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build distclean\n\n# rm -rf .config*\n./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build-ml cfgclean\n# or for legacy\n./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build cfgclean\n\n# custom make parameters\n./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build-ml custom &lt;param&gt;\n# or for legacy\n./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build custom &lt;param&gt;\n</code></pre></p> <p>After successful build, you can flash target device.</p>"},{"location":"release_process/#flash-release","title":"Flash release","text":"<p>Note that below script assume that you have ssh enabled connection with target device and destination OS or other distro that have working <code>flashrom</code> available in <code>PATH</code>. Without keys added you will see question about password couple times during flashing.</p> <pre><code>./apu2/apu2-documentation/scripts/apu2_fw_rel.sh flash &lt;user&gt;@&lt;ip_address&gt;\n</code></pre> <p>For forcing the flash (board identification mismatch):</p> <pre><code>./apu2/apu2-documentation/scripts/apu2_fw_rel.sh flash-force &lt;user&gt;@&lt;ip_address&gt;\n</code></pre> <p>Best way is to use <code>root</code> as <code>&lt;user&gt;</code> because it can have no problem with low level access.</p> <p>Please do not hesitate with providing feedback or contributing fixes.</p>"},{"location":"release_process/#known-issues","title":"Known issues","text":""},{"location":"release_process/#using-repo-with-coreboot-show-errors-like","title":"using repo with coreboot show errors like:","text":"<pre><code>fatal: Not a git repository (or any parent up to mount point /coreboot)\nStopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set).\n</code></pre> <p>Since it use <code>git</code> commands to create build timestamp.</p>"},{"location":"release_process/#flashing-doesnt-work","title":"flashing doesn't work","text":"<pre><code>[21:51:53] pietrushnic:apu2_fw_rel $ ../apu2-documentation/scripts/apu2_fw_rel.sh flash pcengines@192.168.0.103\nflash pcengines@192.168.0.103\nThe authenticity of host '192.168.0.103 (192.168.0.103)' can't be established.\n(...)\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '192.168.0.103' (ECDSA) to the list of known hosts.\nbash: remountrw: command not found\ncoreboot.rom                                                                                                                                                                                                100% 8192KB   8.0MB/s   00:00\nsudo: no tty present and no askpass program specified\nsudo: no tty present and no askpass program specified\n</code></pre>"},{"location":"release_process/#scripts-finish-with-error","title":"scripts finish with error","text":"<p>If you see something like this: <pre><code>dirname: missing operand\nTry 'dirname --help' for more information.\ndirname: missing operand\nTry 'dirname --help' for more information.\ndocker: Error response from daemon: Invalid volume spec \":\": Invalid volume specification: ':'.\nSee 'docker run --help'.\n</code></pre></p> <p>Try to run: <pre><code>eval $(ssh-agent)\nssh-add\n</code></pre></p>"},{"location":"runtime-configuration/","title":"Runtime configuration","text":"<p>The apu platforms firmware contain an application called sortbootorder which serves as a BIOS setup application. It allows to modify behavior of the coreboot firmware and enable or disable features/peripherals.</p> <p>For more information about the usage of sortbootorder application refer to sortbootorder README.</p>"},{"location":"runtime-configuration/#offline-runtime-configuration","title":"Offline runtime configuration","text":"<p>An application to modify the runtime configuration of apu platforms has been developed. The source code is available at PC Engines GitHub repository.</p> <p>This application allows modifications of runtime configuration options on a coreboot binary without the need of rebooting the platform and entering setup menu via BIOS (which requires serial console). The application offers either a user-friendly GUI or command line interface for scripting and automation. Please refer to the application's README for the building process and dependencies.</p> <p>For the usage you may execute <code>cb-order -h</code>.</p> <p>Example command line usage: <code>cb-order coreboot.rom -b iPXE,SATA -o usben=off -o watchdog=300</code></p> <p>This command moves iPXE and SATA boot options to the 1st and 2nd positions respectively displacing other options from those positions. Additionally it disables booting from USB and sets the watchdog to 300 seconds.</p> <p>To achieve the same result using GUI simply run <code>cb-order coreboot.rom</code> to open the GUI.</p> <pre><code>\u250c\u2500 coreboot configuration :: apu4_v4.15.0.1.rom \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                                                              \u2502\n\u2502 (B)  Edit boot order                                                         \u2502\n\u2502 (O)  Edit options                                                            \u2502\n\u2502 (S)  Save &amp; Exit                                                             \u2502\n\u2502 (X)  Exit                                                                    \u2502\n\u2502                                                                              \u2502\n\u2502 Down/j, Up/k         move cursor                                             \u2502\n\u2502 Home/g, End          move cursor                                             \u2502\n\u2502 Enter/Right/l/(key)  run current item                                        \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>The first submenu (<code>Shift+B</code>) allows to change the boot order of the devices in SeaBIOS:</p> <pre><code>\u250c\u2500 coreboot configuration :: boot order \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                                                              \u2502\n\u2502 (A)  USB                                                                     \u2502\n\u2502 (B)  SDCARD                                                                  \u2502\n\u2502 (C)  mSATA                                                                   \u2502\n\u2502 (D)  SATA                                                                    \u2502\n\u2502 (E)  mPCIe1 SATA1 and SATA2                                                  \u2502\n\u2502 (F)  iPXE                                                                    \u2502\n\u2502                                                                              \u2502\n\u2502 Down/j, Up/k        move cursor                                              \u2502\n\u2502 Home/g, End         move cursor                                              \u2502\n\u2502 PgDown/Ctrl+N       move record down                                         \u2502\n\u2502 PgUp/Ctrl+P         move record up                                           \u2502\n\u2502 (key)               move record to current position                          \u2502\n\u2502 Backspace/Left/q/h  leave                                                    \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>To change the boot order to iPXE then SATA, first navigate to the <code>(A) USB</code> then press the <code>Shift + F</code> key to move the iPXE to the first priority:</p> <pre><code>\u250c\u2500 coreboot configuration :: boot order \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                                                              \u2502\n\u2502 (A)  iPXE                                                                    \u2502\n\u2502 (B)  USB                                                                     \u2502\n\u2502 (C)  SDCARD                                                                  \u2502\n\u2502 (D)  mSATA                                                                   \u2502\n\u2502 (E)  SATA                                                                    \u2502\n\u2502 (F)  mPCIe1 SATA1 and SATA2                                                  \u2502\n\u2502                                                                              \u2502\n\u2502 Down/j, Up/k        move cursor                                              \u2502\n\u2502 Home/g, End         move cursor                                              \u2502\n\u2502 PgDown/Ctrl+N       move record down                                         \u2502\n\u2502 PgUp/Ctrl+P         move record up                                           \u2502\n\u2502 (key)               move record to current position                          \u2502\n\u2502 Backspace/Left/q/h  leave                                                    \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Then move to the second position, i.e. <code>(B) USB</code> and press <code>Shift + E</code> to move SATA to the second priority:</p> <pre><code>\u250c\u2500 coreboot configuration :: boot order \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                                                              \u2502\n\u2502 (A)  iPXE                                                                    \u2502\n\u2502 (B)  SATA                                                                    \u2502\n\u2502 (C)  USB                                                                     \u2502\n\u2502 (D)  SDCARD                                                                  \u2502\n\u2502 (E)  mSATA                                                                   \u2502\n\u2502 (F)  mPCIe1 SATA1 and SATA2                                                  \u2502\n\u2502                                                                              \u2502\n\u2502 Down/j, Up/k        move cursor                                              \u2502\n\u2502 Home/g, End         move cursor                                              \u2502\n\u2502 PgDown/Ctrl+N       move record down                                         \u2502\n\u2502 PgUp/Ctrl+P         move record up                                           \u2502\n\u2502 (key)               move record to current position                          \u2502\n\u2502 Backspace/Left/q/h  leave                                                    \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Now that the boot order is set press one of the Backspace/Left/q/h to go back to main menu. Then press <code>Shift + O</code> to open the runtime configuration options submenu:</p> <pre><code>\u250c\u2500 coreboot configuration :: options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                                                              \u2502\n\u2502 (L)  [boosten     =     on]  Core Performance Boost                          \u2502\n\u2502 (K)  [com2en      =    off]  Redirect console output to COM2                 \u2502\n\u2502 (H)  [ehcien      =     on]  EHCI0 controller                                \u2502\n\u2502 (V)  [iommu       =    off]  IOMMU                                           \u2502\n\u2502 (M)  [mpcie2_clk  =    off]  Force mPCIe2 slot CLK (GPP3 PCIe)               \u2502\n\u2502 (Y)  [pciepm      =    off]  PCIe power management features                  \u2502\n\u2502 (G)  [pciereverse =    off]  Reverse order of PCI addresses                  \u2502\n\u2502 (N)  [pxen        =    off]  Network (PXE boot)                              \u2502\n\u2502 (T)  [scon        =     on]  Serial console                                  \u2502\n\u2502 (J)  [sd3mode     =    off]  SD 3.0 mode                                     \u2502\n\u2502 (O)  [uartc       =   UART]  UART C / GPIO[0..7]                             \u2502\n\u2502 (P)  [uartd       =   UART]  UART D / GPIO[10..17]                           \u2502\n\u2502 (U)  [usben       =     on]  USB boot                                        \u2502\n\u2502 (I)  [watchdog    =      0]  Watchdog                                        \u2502\n\u2502                                                                              \u2502\n\u2502 Down/j, Up/k               move cursor                                       \u2502\n\u2502 Home/g, End                move cursor                                       \u2502\n\u2502 Space/Enter/Right/l/(key)  toggle/set option                                 \u2502\n\u2502 Backspace/Left/q/h         leave                                             \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Now let's use an alternative method of navigation with arrows and Space/Enter keys. Use arrows to move to <code>usben</code> option and press Enter or Space to disable it:</p> <pre><code>\u250c\u2500 coreboot configuration :: options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                                                              \u2502\n\u2502 (L)  [boosten     =     on]  Core Performance Boost                          \u2502\n\u2502 (K)  [com2en      =    off]  Redirect console output to COM2                 \u2502\n\u2502 (H)  [ehcien      =     on]  EHCI0 controller                                \u2502\n\u2502 (V)  [iommu       =    off]  IOMMU                                           \u2502\n\u2502 (M)  [mpcie2_clk  =    off]  Force mPCIe2 slot CLK (GPP3 PCIe)               \u2502\n\u2502 (Y)  [pciepm      =    off]  PCIe power management features                  \u2502\n\u2502 (G)  [pciereverse =    off]  Reverse order of PCI addresses                  \u2502\n\u2502 (N)  [pxen        =    off]  Network (PXE boot)                              \u2502\n\u2502 (T)  [scon        =     on]  Serial console                                  \u2502\n\u2502 (J)  [sd3mode     =    off]  SD 3.0 mode                                     \u2502\n\u2502 (O)  [uartc       =   UART]  UART C / GPIO[0..7]                             \u2502\n\u2502 (P)  [uartd       =   UART]  UART D / GPIO[10..17]                           \u2502\n\u2502 (U)  [usben       =    off]  USB boot                                        \u2502\n\u2502 (I)  [watchdog    =      0]  Watchdog                                        \u2502\n\u2502                                                                              \u2502\n\u2502 Down/j, Up/k               move cursor                                       \u2502\n\u2502 Home/g, End                move cursor                                       \u2502\n\u2502 Space/Enter/Right/l/(key)  toggle/set option                                 \u2502\n\u2502 Backspace/Left/q/h         leave                                             \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Now to set the watchdog navigate down to watchdog option and press Space or Enter. A new window will appear with a prompt to enter the number of seconds:</p> <pre><code>\u250c\u2500 coreboot configuration :: options :: Watchdog \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                                                              \u2502\n\u2502 New value:                                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 Range: [0; 65535]                                                            \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Type 300 and press enter to submit the value. The application should go back to options submenu with the updated watchdog timeout:</p> <pre><code>\u250c\u2500 coreboot configuration :: options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                                                              \u2502\n\u2502 (L)  [boosten     =     on]  Core Performance Boost                          \u2502\n\u2502 (K)  [com2en      =    off]  Redirect console output to COM2                 \u2502\n\u2502 (H)  [ehcien      =     on]  EHCI0 controller                                \u2502\n\u2502 (V)  [iommu       =    off]  IOMMU                                           \u2502\n\u2502 (M)  [mpcie2_clk  =    off]  Force mPCIe2 slot CLK (GPP3 PCIe)               \u2502\n\u2502 (Y)  [pciepm      =    off]  PCIe power management features                  \u2502\n\u2502 (G)  [pciereverse =    off]  Reverse order of PCI addresses                  \u2502\n\u2502 (N)  [pxen        =    off]  Network (PXE boot)                              \u2502\n\u2502 (T)  [scon        =     on]  Serial console                                  \u2502\n\u2502 (J)  [sd3mode     =    off]  SD 3.0 mode                                     \u2502\n\u2502 (O)  [uartc       =   UART]  UART C / GPIO[0..7]                             \u2502\n\u2502 (P)  [uartd       =   UART]  UART D / GPIO[10..17]                           \u2502\n\u2502 (U)  [usben       =    off]  USB boot                                        \u2502\n\u2502 (I)  [watchdog    =    300]  Watchdog                                        \u2502\n\u2502                                                                              \u2502\n\u2502 Down/j, Up/k               move cursor                                       \u2502\n\u2502 Home/g, End                move cursor                                       \u2502\n\u2502 Space/Enter/Right/l/(key)  toggle/set option                                 \u2502\n\u2502 Backspace/Left/q/h         leave                                             \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2502                                                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>We are done now with all our modifications. Press one of the Backspace/Left/q/h to go back to main menu. Then press <code>Shift + S</code> to save changes to the binary and the application will exit. Now you can flash the firmware update on your platform like described here.</p>"},{"location":"runtime-configuration/#persistent-runtime-configuration","title":"Persistent runtime configuration","text":"<p>Since the v4.14.0.1 release the runtime configuration options have been separated from coreboot code in different flashmap region. Flashmap is a description of firmware layout supported by coreboot. In order to avoid the loss of the customized options one has to use the following firmware update procedure which writes the coreboot code only to the flash:</p> <pre><code>flashrom -p internal -w apuX_v4.YY.0.Z.rom --fmap -i COREBOOT\n</code></pre> <p>Note you need at least flashrom v1.1 for it to work. Also you will preserve the coreboot configuration only when updating from v4.14.0.1 version or later on apu2/3/4/5/6 series. Apu1 does not support the persistent runtime configuration yet.</p> <p>If you have a version of apu firmware older than v4.14.0.1 you have to use the cb-order application to set the runtime configuration options to desired values before applying the firmware update, otherwise you will lose your current settings. Then proceed with flashing the firmware as below:</p> <pre><code>flashrom -p internal -w apuX_v4.YY.0.Z.rom \n</code></pre>"},{"location":"sd_card_performance_test/","title":"Sd card performance test","text":""},{"location":"sd_card_performance_test/#sd-card-performance-test","title":"SD card performance test","text":"<p>Tests can be executed using iozone:</p> <pre><code>apt-get install iozone3\n</code></pre> <p>An example use of iozone:</p> <pre><code>iozone -e -a -s 4g -r 16M -i 0 -i 1\n</code></pre> <pre><code>-s 4g - file size = 4GB\n-r 16m - record size = 16MB (maximum)\n-i 0 - write/rewrite test\n-i 1 - read/reread test\n</code></pre> <p>In order to receive valid results (especially in read tests) file size needs to be big enough. For APU2 it was 4GB. This value can vary, depending on platform. It is related to system buffer.</p>"},{"location":"serial_console/","title":"Serial console output in coreboot","text":"<p>Along with v4.8.0.6 and v4.0.21 we introduced possibility to enable COM2 as the main serial port for serial console output in coreboot and SeaBIOS. Because this is not enabled in runtime configuration, separate binary must be built in order to get the output on COM2.</p> <p>Since releae v4.8.0.7 and v4.0.22 output redirection to COM2 became possible via runtime configuration. Supported sortbootorder and SeaBIOS versions are v4.6.12 and rel-1.11.0.7 respectively. For details see COM2 runtime configuration</p>"},{"location":"serial_console/#building-coreboot-firmware-with-console-on-com2","title":"Building coreboot firmware with console on COM2","text":"<p>Building image capable of printing output on COM2 is relatively easy.</p>"},{"location":"serial_console/#users-guide","title":"Users guide","text":"<p>To build the firmware from scratch and change the output to COM2 follow the steps:</p> <ol> <li>Clone the pce-fw-builder</li> <li> <p>Pull or build     docker container:</p> <pre><code>docker pull pcengines/pce-fw-builder\n</code></pre> <p>or for legacy:</p> <pre><code>docker pull pcengines/pce-fw-builder-legacy\n</code></pre> </li> <li> <p>Build v4.8.0.6 image (v4.0.21 for legacy):</p> <pre><code>./build.sh release v4.8.0.6 {apu2|apu3|apu4}\n</code></pre> </li> <li> <p>Make changes to menuconfig:</p> <pre><code>./build.sh dev-build $PWD/release/coreboot {apu2|apu3|apu4} menuconfig\n</code></pre> <p>In order to change serial port, go to Console menu and change <code>Index for UART port to use for console</code> to <code>1</code>. You will see that comment below <code>*** Serial port base address = 0x3f8 ***</code> will change to <code>*** Serial port base address = 0x2f8 ***</code> (this comment is not displayed in legacy). Then go to Payload menu and type the changed serial port base address (<code>0x2f8</code>) to <code>SeaBIOS sercon-port base address</code>  field. Now save new config.</p> <p>For legacy it may not build the firmware with expected changes. One has to do a distclean first, copy the config and make the changes again:</p> <pre><code>./build.sh dev-build $PWD/release/coreboot {apu2|apu3|apu4} distclean\ncp $PWD/release/coreboot/configs/pcengines_{apu2|apu3|apu4}.config  $PWD/release/coreboot/.config\n./build.sh dev-build $PWD/release/coreboot {apu2|apu3|apu4} menuconfig\n</code></pre> </li> <li> <p>Build the image again:</p> <pre><code>./build.sh dev-build $PWD/release/coreboot {apu2|apu3|apu4} CPUS=$(nproc)\n</code></pre> </li> <li> <p>Flash the new image with serial output on COM2. The firmware image can be     found in <code>release/coreboot</code> which is relative to cloned <code>pce-fw-builder</code>     directory.</p> </li> </ol>"},{"location":"serial_console/#developers-guide","title":"Developers guide","text":"<p>Make default config for platform and then run menuconfig:</p> <pre><code>cp configs/config.pcengines_apux .config\nmake olddefconfig\nmake menuconfig\n</code></pre> <p><code>make olddefconfig</code> step is valid only on mainline. For legacy releases, omit this step</p> <p>In order to change serial port, go to Console menu and change <code>Index for UART port to use for console</code> to <code>1</code>. You will see that comment below <code>*** Serial port base address = 0x3f8 ***</code> will change to <code>*** Serial port base address = 0x2f8 ***</code> (this comment is not displayed in legacy). Then go to Payload menu and type the changed serial port base address (<code>0x2f8</code>) to <code>SeaBIOS sercon-port base address</code>  field. Now save new config.</p>"},{"location":"serial_console/#com2-runtime-configuration","title":"COM2 runtime configuration","text":"<p>Since v4.8.0.7 and v4.0.22, sortbootorder has a new option to enable output redirection to COM2. After entering sortbootorder menu, one could notice additional COM2 redirection among other options:</p> <pre><code>  u USB boot - Currently Enabled\n  t Serial console - Currently Enabled\n  k Redirect console output to COM2 - Currently Disabled\n  o UART C - Currently Enabled\n  p UART D - Currently Enabled\n</code></pre> <p>Pressing <code>k</code> and savign changes will cause switching output to COM2. The change affects coreboot, SeaBIOS, sortbootorder and iPXE. Unfortunately redirection doesn't work for memtest86+. Memtest86+ has no possibility to redirect console to other port than specified during build process. If one wishes to have full support for COM2, follow Users guide to build firmware from scratch.</p> <p>NOTE: when building firmware from scratch for COM2 as described in Users guide, there will be no going back to COM1, even when COM2 redirection is disabled in sortbootorder. One will have to flash firmware with COM1 as main serial port (release bianry for example).</p>"},{"location":"serial_console/#summary","title":"Summary","text":"<p>By default main console is COM1 with base address of <code>0x3f8</code>. This is the base address of ttyS0 typically. After changing the output to COM2, do not forget to adjust kernel cmdline in Your OSes to set console to ttyS1 (base address <code>0x2f8</code>). The baud rate remains the same (115200).</p> <p>The serial console disable feature in sortbootorder works also for COM2. So if one does not desire to have output in firmware, it can be simply turned off (and turned back again with S1 button).</p> <p>COM2 redirection runtime configuration works properly with all payloads except memtest86+. Serial port configuration for memtest86+ is determined during build and it cannot be changed by any means in firmware.</p>"},{"location":"supported_coreboot_build/","title":"Building firmware supported by coreboot","text":""},{"location":"supported_coreboot_build/#intro","title":"Intro","text":"<ul> <li>Tested on Ubuntu 16.04 LTS</li> <li>CPU with 4 threads is used in instruction as an example</li> <li>Example <code>PLATFORM_IP</code> of PC Engines platform is <code>192.168.0.102</code></li> <li>Git is required (type <code>sudo apt-get install git -y</code> to install git)</li> </ul>"},{"location":"supported_coreboot_build/#coreboot-rom-building-process","title":"Coreboot ROM building process","text":"<ol> <li> <p>Build environment container.</p> </li> <li> <p>Clone coreboot repository:     <pre><code>git clone https://review.coreboot.org/coreboot.git\n</code></pre></p> <p>And download submodules: <pre><code>cd coreboot\ngit submodule update --init --checkout\n</code></pre></p> <p>Changing files in downloaded directory is not required and it may cause that built coreboot ROM will be labeled as <code>dirty</code>. This is an undesirable situation.</p> </li> <li> <p>Run docker container:     <pre><code>docker run --rm     -v ${PWD}:/workdir     -t -i pc-engines/apu2 bash\n</code></pre></p> </li> <li> <p>Build crossgcc:     &gt; It's required only on first run.</p> <pre><code>cd /workdir/coreboot\nmake crossgcc-i386 CPUS=4\n</code></pre> <p>In place of <code>4</code> in <code>CPUS=4</code> type number of threads you want to use.</p> </li> <li> <p>Configure your build:     If previously you've built a ROM for another platform you should clean     configuration. You make it so by typing:</p> <pre><code>make distclean\n</code></pre> <p>Configure your build parameters: <pre><code>make menuconfig\n</code></pre> Menu with build options should be shown.</p> <p>Select correct options: * For ALIX.1 series: <pre><code>Mainboard ---&gt; Mainboard vendor ---&gt; PC Engines\nMainboard ---&gt; Mainboard model  ---&gt; ALIX.1C\nMainboard ---&gt; ROM chip size    ---&gt; 1024 KB (1 MB)\n</code></pre> * For ALIX.2, ALIX.3 series: <pre><code>Mainboard ---&gt; Mainboard vendor ---&gt; PC Engines\nMainboard ---&gt; Mainboard model  ---&gt; ALIX.2D2 or 2D3\nMainboard ---&gt; ROM chip size    ---&gt; 1024 KB (1 MB)\n</code></pre> * For ALIX.6 series <pre><code>Mainboard ---&gt; Mainboard vendor ---&gt; PC Engines\nMainboard ---&gt; Mainboard model  ---&gt; ALIX.6\nMainboard ---&gt; ROM chip size    ---&gt; 1024 KB (1 MB)\n</code></pre> * For APU1 series: <pre><code>Mainboard ---&gt; Mainboard vendor ---&gt; PC Engines\nMainboard ---&gt; Mainboard model  ---&gt; APU1\n</code></pre> * For APU2 series <pre><code>Mainboard ---&gt; Mainboard vendor ---&gt; PC Engines\nMainboard ---&gt; Mainboard model  ---&gt; APU2\n</code></pre></p> <p>To enable creating coreboot boot timestamps table select: <pre><code>General setup ---&gt; [ ]Create a table of timestamps collected during boot\n</code></pre> Then press <code>Y</code> key to enable that function. If enabled, <code>*</code> should appear: <pre><code>[*]Create a table of timestamps collected during boot\n</code></pre></p> </li> <li> <p>Build coreboot ROM file:     <pre><code>make CPUS=4\n</code></pre>     &gt; In place of <code>4</code> in <code>CPUS=4</code> type number of threads you want to use.</p> <p>Built ROM should be in <code>build</code> directory and it may be named <code>coreboot.rom</code>.</p> </li> <li> <p>You can now send it to the target device. E.g. with <code>scp</code> usage:     <pre><code>scp build/coreboot.rom root@192.168.0.102:/tmp\n</code></pre></p> </li> </ol>"},{"location":"theory-of-operation/","title":"apu features - theory of operation","text":""},{"location":"theory-of-operation/#boot-menu","title":"Boot menu","text":"<p>It lets selecting boot device (first options) and enter another menus to extended coreboot/seaBIOS features. To enter boot menu press <code>F10</code> key during boot process.</p>"},{"location":"theory-of-operation/#example-view-of-boot-menu","title":"Example view of boot menu","text":"<pre><code>SeaBIOS (version rel-1.12.1.1-0-g55d345f)\n\nPress F10 key now for boot menu, N for PXE boot\nSelect boot device:\n\n1. USB MSC Drive Kingston DataTraveler 3.0 PMAP\n2. USB MSC Drive Kingston DataTraveler 3.0 PMAP\n3. SD card SB16G 15193MiB\n4. AHCI/0: SanDisk SSD i110 16GB ATA-9 Hard-Disk (14566 MiBytes)\n5. iPXE\n6. Payload [setup]\n7. Payload [memtest]\n\nt. TPM Configuration\n</code></pre>"},{"location":"theory-of-operation/#payload-menu","title":"Payload menu","text":"<p>It lets using some coreboot/seaBIOS features. To enter payload menu choose <code>Payload [setup]</code> option in boot menu.</p>"},{"location":"theory-of-operation/#example-view-of-payload-menu","title":"Example view of payload menu","text":"<pre><code>### PC Engines apu2 setup v4.6.13 ###\nBoot order - type letter to move device to top.\n\n  a USB 1 / USB 2 SS and HS\n  b SDCARD\n  c mSATA\n  d SATA\n  e mPCIe1 SATA1 and SATA2\n  f iPXE\n\n\n  r Restore boot order defaults\n  n Network/PXE boot - Currently Enabled\n  u USB boot - Currently Enabled\n  t Serial console - Currently Enabled\n  k Redirect console output to COM2 - Currently Disabled\n  o UART C - Currently Enabled\n  p UART D - Currently Enabled\n  m Force mPCIe2 slot CLK (GPP3 PCIe) - Currently Disabled\n  h EHCI0 controller - Currently Enabled\n  l Core Performance Boost - Currently Enabled\n  w Enable BIOS write protect - Currently Disabled\n  x Exit setup without save\n  s Save configuration and exit\n</code></pre>"},{"location":"theory-of-operation/#hidden-security-registers-menu","title":"Hidden security registers menu","text":"<p>It lets writing and reading serial number to security registers of the SPI flash chip. To enter hidden menu type <code>shift + z</code> in payload menu.</p>"},{"location":"theory-of-operation/#pc-engines-apu-firmware-features","title":"PC Engines apu firmware features","text":"<ul> <li> <p>Reading/Writing Serial number to SPI flash</p> <p>This feature lets user write and/or read serial number which is contained in hidden security register. To use it first, go to security registers menu.</p> </li> </ul> <p>NOTE: When writing new serial number, only 9 first characters are taken, even   if user gives more.</p> <p>Watch Video showing how Reading/Writing   Serial number to SPI flash feature works.</p> <ul> <li>Setting bootorder priority</li> </ul> <p>In boot menu user can freely change bootorder.</p> <p>Watch Video showing how to change bootorder   in Boot menu.</p> <ul> <li>Enable/Disable Network/PXE boot and press <code>n</code> for iPXE boot string</li> </ul> <p>This feature lets user <code>Enable/Disable</code> booting from PXE. If it is <code>Enabled</code>   then during boot process user can access PXE boot string with <code>n</code> button. Also   appropriate boot device should be available in boot menu (e.g. <code>iPXE</code>).</p> <p>Watch Video showing how to enable/disable   PXE boot and how to open PXE boot string.</p> <ul> <li> <p>Enable/Disable USB boot</p> <p>This feature let user <code>Enable/Disable</code> booting from USB device.</p> </li> </ul> <p>Watch Video showing how to enable/disable   USB boot.</p> <ul> <li>Disable serial console and enable with S1 button</li> </ul> <p>To <code>Disable</code> serial console type <code>t</code> in payload menu. If it is disabled no   data will be displayed in serial output. After changing state to <code>Disabled</code>   restoring console can be done only via S1 button.</p> <p>Watch video showing how to disable serial   console with payload menu option and then enable it with S1 button.</p> <ul> <li>Redirect console output to COM2</li> </ul> <p>Console output is available via COM1 in default. This feature let user   redirect console output to COM2.</p> <p>NOTE: Changing this option from <code>Disabled</code> to <code>Enabled</code> (or the opposite way)   will cause losing current output in terminal. The advice is to open new   connection in another terminal window on another COM.</p> <p>Watch video showing how to redirect console   output to COM2.</p> <p>NOTE: In above example serial connection is redirect to telnet. First, it is   opened on 13541 port (COM1). After enabling redirect console to COM2, output   is no longer available. New telnet connection is opened on 13542 port (COM2)   and console output is available there.</p> <ul> <li>Enable/Disable CPU boost</li> </ul> <p>This feature lets user <code>Enable/Disable</code> CPU performance boost. To verify if   it works, memory test can be done (in boot menu choose <code>payload[memtest]</code>).</p> <p>NOTE: Notice how memory transfer speed changes depending on CPU boost   enable/disable.</p> <p>Watch video showing how to enable/disable   CPU performance boost and verify it.</p> <ul> <li> <p>Enable/Disable UARTC/UARTD</p> <p>This feature lets user enable/disable superIO UARTx on GPIO header.</p> <p>Watch Video showing how to enable/disable UARTC/UARTD.</p> </li> <li> <p>Enable/Disable mPCIe2 clk</p> </li> </ul> <p>If mPCIe2 clk is enabled then GPP3 PCIe clock (which is attached to apu2   mPCIe2 slot) is always on. It is used when extension card is attached to   mPCIe2 slot. If no extension card is attached it is advised to set to   <code>Disable</code>.</p> <p>Watch Video showing how to enable/disable   mPCIe2 clk.</p> <ul> <li> <p>Enable/Disable EHCI0 controller</p> <p>This feature lets user enable/disable EHCI0 controller.</p> <p>Watch Video showing how to enable/disable EHCI0 controller.</p> </li> <li> <p>Restore default sortbootorder settings</p> </li> </ul> <p>If user wants to bring back default settings in sortbootorder, it can be   restored by typing <code>r</code> in payload menu. It will reset enable/disable features   and boot order to defaults.</p> <p>Watch video showing how to restore settings   to its default values.</p> <ul> <li> <p>Press <code>F10</code> button to enter boot menu and boot menu 6s timeout</p> <p>During boot performance, press <code>F10</code> button to enter boot menu.</p> </li> </ul> <p>NOTE: After power on user has 6 seconds to enter boot menu. If no button is   pressed then automatically boot is performed.</p> <p>Watch Video showing how to enter boot menu   via <code>F10</code> button and boot menu 6s timeout feature.</p> <ul> <li>Screen refresh during memory test performance</li> </ul> <p>To perform memory test choose <code>Payload [memtest]</code> option in boot menu.</p> <p>During memory test user can refresh screen if the output in terminal is not   available. It happens when serial connection is opened during test   performance. Screen refresh can be done by typing <code>l</code> or <code>L</code>.</p> <p>Watch Video showing how screen refresh   during memory test works.</p> <ul> <li>TPM SHA1 and SHA256 banks enable/disable</li> </ul> <p>PC Engines apu2 supports TPM module. This feature lets user choose which PCR   banks are active.</p> <p>Watch video showing how to enable/disable   SHAx banks in TPM menu.</p> <ul> <li>Setting watchdog timeout</li> </ul> <p>To <code>Enable</code> watchdog, type <code>i</code> in payload menu. You will be prompted to   specify the timeout after which the platform should reset.</p> <p>By default the timeout is set to 0 seconds (disabled state). To enable   watchdog, enter setup menu and toggle watchdog option.</p> <p>Since v4.14.0.4 version, sortbootorder payload won't allow to set the watchdog   timeout below 60s.</p> <p>WARNING: do not set short timeouts! It may lead to a reset loop and brick   Your platform. Please take into consideration that platform boot time and OS   boot time also counts to the overall timeout time, so set at least few minutes   timeout to still be able to enter setup menu to disable the watchdog!</p> <p>The operating system has to support the watchdog, otherwise the platform   will constantly reboot. For Linux OSes the driver is sp5100_tco, however it   conflicts with i2c_piix4 leaving the watchdog driver unloaded completely.   One has to properly blacklist the i2c_piix4 driver in order to get the   watchdog working.</p> <p>Watch video showing how to enable/disable   watchdog.</p>"},{"location":"tianocore_build/","title":"Coreboot with tianocore payload on apu2","text":"<p>This document describes how to build coreboot image with tianocore payload for PC Engines apu2 platform. Payload is supported since v4.9.0.7 release.</p>"},{"location":"tianocore_build/#building-coreboot-image","title":"Building coreboot image","text":"<ol> <li>Clone the pce-fw-builder</li> <li> <p>Pull or build     docker container:</p> <pre><code>docker pull pcengines/pce-fw-builder\n</code></pre> </li> <li> <p>Build v4.9.0.7 image:</p> <pre><code>./build.sh release v4.9.0.7 apu2\n</code></pre> </li> <li> <p>Invoke distclean:</p> <pre><code>./build.sh dev-build $PWD/release/coreboot apu2 distclean\n</code></pre> </li> <li> <p>Copy config file for target platform</p> <pre><code>cp $PWD/release/coreboot/configs/config.pcengines_apu2 $PWD/release/coreboot/.config\n</code></pre> </li> <li> <p>Create full config:</p> <pre><code>./build.sh dev-build $PWD/release/coreboot apu2 olddefconfig\n</code></pre> </li> <li> <p>Invoke menuconfig:</p> <pre><code>./build.sh dev-build $PWD/release/coreboot apu2 menuconfig\n</code></pre> </li> <li> <p>In menuconfig go to <code>Payload</code> menu and next:</p> <ul> <li>In <code>Add a payload</code> choose Tianocore coreboot payload package</li> <li>Deselect PXE ROM</li> <li>Select Tianocore build type release</li> <li>In <code>Secondary Payloads</code> disable all options</li> <li>Make sure that Tianocore revision is set to <code>origin/coreboot-4.7.x-uefi</code> in the <code>Insert a commit\u2019s SHA-1 or a branch name</code> line.</li> <li>Rest options in <code>Payload</code> menu leave default</li> <li>Save settings and leave menuconfig</li> </ul> </li> <li> <p>Build coreboot image</p> <pre><code>./build.sh dev-build $PWD/release/coreboot apu2 CPUS=$(nproc)\n</code></pre> </li> <li> <p>After successful build coreboot image file is in <code>release/coreboot/build</code>   directory.</p> </li> </ol>"},{"location":"tianocore_build/#screenshot-from-correctly-filled-payloads-menu","title":"Screenshot from correctly filled Payloads menu:","text":""},{"location":"tianocore_build/#coreboot-tianocore-working-example","title":"Coreboot + tianocore working example","text":"<p>To enter Boot Manager Menu press <code>F2</code> or <code>down arrow</code> after the message shows up. There is 3s timeout which will proceed directly to booting if no key (or <code>Enter</code>) was pressed.</p> <p>In <code>Boot Manager</code> user can see what bootable device are visible and what is boot order. UEFI Shell is shown also and in default settings it is always last boot option. Selecting the highlighted option will lead to boot process from selected device.</p> <p>NOTE: It may happen that even if device is seen in boot menu, tianocore could not boot from it. It is because OS on the selected device uses legacy mode and therefore it is not UEFI-aware system.</p> <p>In <code>Boot Maintenance Manager</code> user has access to change some basic options, such as boot order or console options. However, it is not recommended to change serial console options, due to possibility of connection lost.</p> <p>Following example is showing how expected output should looks like and how to move in UEFI shell menu. It was tested on apu4 platform, to which bootable USB stick was attached. As you can see, USB is a primary device in boot order menu. Hence, it always boot from it. To enter UEFI Shell, you need to choose it manually from Boot Manager.</p>"},{"location":"tpm_menu/","title":"SeaBIOS TPM configuration menu","text":"<p>Since SeaBIOS rel-1.12.0.1 TPM 2.0 module from PC Engines is supported on apu2 and apu1 platforms (and apu5 where the chip may be soldered down depending on BOM option) in the payload as a configuration menu.</p> <p>When entering the boot menu on serial console via F10 key, one may notice an additional option when TPM module is connected to LPC header:</p> <pre><code>SeaBIOS (version rel-1.12.0.1-15-g8993894)\n\nPress F10 key now for boot menu\n\nSelect boot device:\n\n1. USB MSC Drive Kingston DataTraveler 3.0 PMAP\n2. SD card SB16G 15193MiB\n3. AHCI/0: SanDisk SSD i110 16GB ATA-9 Hard-Disk (14566 MiBytes)\n4. Payload [setup]\n5. Payload [memtest]\n\nt. TPM Configuration\n</code></pre> <p><code>TPM Configuration</code> option appears when TPM is connected and initialized and can be entered via <code>t</code> key.</p>"},{"location":"tpm_menu/#tpm-configuration-menu","title":"TPM Configuration menu","text":"<p>TPM Configuration menu consists of two options beginning from rel-1.12.1.1 SeaBIOS release:</p> <pre><code>1. Clear TPM\n2. Change active PCR banks\n\nIf no change is desired or if this menu was reached by mistake, press ESC to\nreboot the machine.\n</code></pre>"},{"location":"tpm_menu/#clear-tpm-option","title":"Clear TPM option","text":"<p>Clearing TPM is a reset operation for TPM which does the following:</p> <ul> <li>resets TPM to the default state</li> <li>clears TPM ownership</li> <li>clears the TPM stored keys, passwords and certificates</li> </ul> <p>Taking ownership of TPM will be possible in OS after clearing. This option may be useful when the state of firmware changes and TPM cannot release its secrets due to different Platform Configuration Registers (PCR) or the OS is unbootable if the disk is encrypted and configured to auto-decrypt with TPM.</p> <p>Choosing the clear option with <code>1</code> key will cause to print the TPM configuration menu again without any confirmation of success. The option is available since SeaBIOS rel-1.12.0.1.</p>"},{"location":"tpm_menu/#change-active-pcr-banks","title":"Change active PCR banks","text":"<p>This option is available since SeaBIOS rel-1.12.1.1. What this option does is to enable certain PCR banks according to user choice. TPM2.0 chips, comparing to TPM1.2, have two different PCR banks able to store digests of different algorithms: SHA1 and SHA256. TPM1.2 modules have only SHA1 banks for PCRs.</p> <p>To enable or disable the banks choose option 2 in the TPM configuration menu by typing <code>2</code> key:</p> <pre><code>Toggle active PCR banks by pressing number key\n\n  1: SHA1 (enabled)\n  2: SHA256 (enabled)\n\nESC: return to previous menu without changes\nA  : activate selection\n</code></pre> <p>Both banks should be enabled by default. To change the state of one type of bank types the number referring to the desired bank to toggle the state. For example to disable SHA1 banks, type <code>1</code>:</p> <pre><code>Toggle active PCR banks by pressing number key\n\n  1: SHA1\n  2: SHA256 (enabled)\n\nESC: return to previous menu without changes\nA  : activate selection\n</code></pre> <p>The <code>(enabled)</code> string should disappear, but the state has not yet been applied to the TPM. Now, one has two choices:</p> <ul> <li>abort the changes by pressing <code>ESC</code> key, the SeaBIOS will return to the first TPM   menu</li> <li>or apply the changes by pressing <code>A</code> key, the SeaBIOS will have to reboot the   platform to make changes to TPM.</li> </ul> <p>uppercase or lowercase does not matter</p> <p>When pressed <code>ESC</code> key and then entered the PCR bank configuration again, one should see that nothing has changed:</p> <pre><code>Toggle active PCR banks by pressing number key\n\n  1: SHA1 (enabled)\n  2: SHA256 (enabled)\n\nESC: return to previous menu without changes\nA  : activate selection\n</code></pre> <p>But when <code>A</code> key was pressed, the platform reboots. After reboot one may verify if the changes were applied correctly by entering the TPM configuration and then PCR banks configuration:</p> <pre><code>t. TPM Configuration\n\n1. Clear TPM\n2. Change active PCR banks\n\nIf no change is desired or if this menu was reached by mistake, press ESC to\nreboot the machine.\n\nToggle active PCR banks by pressing number key\n\n  1: SHA1\n  2: SHA256 (enabled)\n\nESC: return to previous menu without changes\nA  : activate selection\n</code></pre> <p>Note that at least one type of banks has to be enabled when toggling both bank types to be disabled, the <code>A  : activate selection</code> option disappears and does not allow to apply invalid changes:</p> <pre><code>Toggle active PCR banks by pressing number key\n\n  1: SHA1\n  2: SHA256\n\nESC: return to previous menu without changes\n</code></pre> <p>In such case, one can only return to the previous menu by pressing <code>ESC</code> key.</p> <p>To reenable the PCR banks follow the same procedure as with disabling, but apply changes when <code>(enabled)</code> string is printed alongside desired type of banks to be enabled.</p>"},{"location":"tpm_menu/#verification","title":"Verification","text":"<p>In order to verify whether the PCR banks were actually disabled, one may run <code>tpm2_pcrlist</code> command from tpm2-tools. The dependencies involved in building tpm2-tools are rather complex so it is advised to use a dockerized environment for tpm2-tools which 3mdeb has developed for convenient use of the tool. The source is available on 3mdeb GitHub.</p> <p>Example execution of tpm2-tools <code>tpm_pcrlist</code> command with disabled SHA1 banks:</p> <pre><code>sha1:\nsha256:\n  0 : 0xD27CC12614B5F4FF85ED109495E320FB1E5495EB28D507E952D51091E7AE2A72\n  1 : 0x9CEF4FA7928AD1428CE025EA36BE8C26B4350C6CB50F5D8AAE97AE89E4156EE9\n  2 : 0xB38B591AF21E993E34333858293D2AC82FDF6E2D169B1415BF981A4BE0FFD283\n  3 : 0xD27CC12614B5F4FF85ED109495E320FB1E5495EB28D507E952D51091E7AE2A72\n  4 : 0xEEA509AA8A7554B7B4040C44A580660923246633B3593D0547D4FD52841971E0\n  5 : 0xD27CC12614B5F4FF85ED109495E320FB1E5495EB28D507E952D51091E7AE2A72\n  6 : 0xD27CC12614B5F4FF85ED109495E320FB1E5495EB28D507E952D51091E7AE2A72\n  7 : 0xD27CC12614B5F4FF85ED109495E320FB1E5495EB28D507E952D51091E7AE2A72\n  8 : 0x0000000000000000000000000000000000000000000000000000000000000000\n  9 : 0x0000000000000000000000000000000000000000000000000000000000000000\n  10: 0x0000000000000000000000000000000000000000000000000000000000000000\n  11: 0x0000000000000000000000000000000000000000000000000000000000000000\n  12: 0x0000000000000000000000000000000000000000000000000000000000000000\n  13: 0x0000000000000000000000000000000000000000000000000000000000000000\n  14: 0x0000000000000000000000000000000000000000000000000000000000000000\n  15: 0x0000000000000000000000000000000000000000000000000000000000000000\n  16: 0x0000000000000000000000000000000000000000000000000000000000000000\n  17: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n  18: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n  19: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n  20: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n  21: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n  22: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n  23: 0x0000000000000000000000000000000000000000000000000000000000000000\n</code></pre> <p>Notice that SHA1 PCRs were not printed due to their unavailability.</p> <p>Currently SeaBIOS fills following PCRs: 1, 2 and 4. The rest of the banks is filled with default values. The same applies to SHA1 PCRs. This will change in the future with the introduction of the measured boot.</p> <p>The TPM configuration menu is planned to be extended in the future. For other TPM features and utilisation, one may use tpm2-tools.</p>"},{"location":"tpm_pin_mapping/","title":"Pin mapping","text":"APU3/4 TPM1a 1 (LFRAME) 11 2 (LAD3) 9 3 (LAD2) 7 4 (LAD1) 5 5 (LAD0) 3 6 (GND) 2, 4, 6, 8, 10, 12, 17 7 (LPCRST) 13 8 (LPCCLK1) 1 9 (V3) 18"},{"location":"tpm_pin_mapping/#tpm1a","title":"TPM1a","text":"<ul> <li>At least one pin of no. 2, 4, 6, 8, 10, 12 and 17 should be connected  to GND and pin no. 18 should be connected to V3.</li> <li>Pins no. 14, 15, 16, 19 and 20 stay unconnected.</li> </ul>"},{"location":"tpm_pin_mapping/#apu34","title":"APU3/4","text":"<ul> <li>Pin no. 6 should be connected to GND and pin no. 9 should be  connected to V3.</li> </ul>"},{"location":"tpm_pin_mapping/#important","title":"Important!","text":"<p>It should be noticed, that the LPC debug holes on apu board are much smaller, so regular pin header will not fit there.</p>"},{"location":"voyage_image_building_alix/","title":"Building Voyage Linux image for PC Engines ALIX platforms","text":""},{"location":"voyage_image_building_alix/#intro","title":"Intro","text":"<ul> <li>Example DIRECTORY_TO_CF_CARD_DEVICE used in following instructions: <code>/dev/sdc</code></li> <li>Voyage Linux image  downloaded from <code>http://pcengines.ch</code> website has no <code>flashrom</code> and <code>cbmem</code>  installed</li> <li>Voyage Linux kernel of image  downloaded from <code>http://pcengines.ch</code> website has <code>CONFIG_CPU_FREQ</code> option not  set, which could be required for <code>coreboot 4.7.x</code></li> <li>Linux Voyage default login/password: <code>root/voyage</code></li> <li>Linux Voyage default serial console baudrate: <code>38400</code></li> </ul>"},{"location":"voyage_image_building_alix/#requirements","title":"Requirements","text":"<ul> <li>Compact Flash with a minimum of 1 GB of memory</li> <li>Compact Flash card reader</li> </ul>"},{"location":"voyage_image_building_alix/#flashing-cf-card-with-voyage-linux-image-from-httppcenginesch","title":"Flashing CF card with Voyage Linux image from <code>http://pcengines.ch</code>","text":"<ol> <li> <p>Download Voyage Linux image for Alix platforms.</p> </li> <li> <p>Unmount all mounted in OS partitions of used CF card:</p> </li> </ol> <p><pre><code>sudo umount &lt;DIRECTORY_TO_CF_CARD_DEVICE&gt;*\n</code></pre> Eg.: <pre><code>sudo umount /dev/sdc*\n</code></pre></p> <ol> <li>Unzip downloaded file and Flash your CF flash with unzipped image:</li> </ol> <pre><code>unzip -p voyage-0.9.2.img | pv | sudo dd of=&lt;DIRECTORY_TO_CF_CARD_DEVICE&gt; bs=16M\n</code></pre> <p>Eg.: <pre><code>unzip -p voyage-0.9.2.img | pv | sudo dd of=/dev/sdc bs=16M\n</code></pre></p> <p>After succesful CF card flashing information similar to shown below may appear: <pre><code>60+1 records in\n60+1 records out\n1014644736 bytes (1.0 GB, 968 MiB) copied, 32.4125 s, 31.3 MB/s\n</code></pre></p> <p>But you still may check that data copying process has been finished. To check  that type in a new terminal or terminal tab:</p> <pre><code>watch grep -e Dirty: -e Writeback: /proc/meminfo\n</code></pre> <p>Then type in the first terminal command which cause cache dropping to device: <pre><code>sync\n</code></pre> and wait until <code>sync</code> process end. After that <code>Dirty</code> and <code>Writeback</code> values should be near the <code>0</code> value. Now you can safety remove your CF card.</p> <p>It's important to not interrupt the flashing process.</p> <p>After successful performing steps shown above, Voyage Linux image may be  installed on your CF card.</p>"},{"location":"voyage_image_building_alix/#cbmem-and-flashrom-installation","title":"<code>cbmem</code> and <code>flashrom</code> installation","text":"<p>Boot to your OS and follow steps contained in the following instructions:</p> <p><code>cbmem</code> installation</p> <p><code>flashrom</code> installation</p>"},{"location":"voyage_image_building_alix/#changing-serial-console-baudrate","title":"Changing serial console baudrate","text":"<p>To change serial console baudrate to custom value follow steps  contained in this instruction.</p>"},{"location":"voyage_image_building_alix/#voyage-linux-kernel-modification","title":"Voyage Linux kernel modification","text":"<p>There is possibility to change kernel configuration without building new Voyage  Linux image. To do that you can use debian packages. </p> <ol> <li>Check your kernel version on the target device after booting to OS:</li> </ol> <p><pre><code>uname -r\n</code></pre> Example output <pre><code>3.14.12-voyage\n</code></pre> That means that kernel version is <code>3.14.12</code>.</p> <ol> <li> <p>Find and download the same version of kernel from (https://www.kernel.org/). Eg. for <code>3.14.12</code> is could be <code>3.14.X</code> version when <code>X &gt;= 12</code>. Then extract the downloaded archive with kernel files.</p> </li> <li> <p>Transfer config file from target device <code>/boot</code> directory to your PC. It  should be named similar to <code>config-3.14.12-voyage</code>.</p> </li> <li> <p>Rename config file to <code>.config</code> and place in the directory where  extracted kernel files are placed.</p> </li> <li> <p>Run docker container:</p> </li> </ol> <pre><code>docker run --rm -v ${PWD}:/workdir -t -i pc-engines/apu2 bash\n</code></pre> <p>If you don't have <code>pc-engines/apu2</code> environment built follow this instruction.</p> <ol> <li>Read old config file:</li> </ol> <pre><code>make oldconfig\n</code></pre> <p>You can be asked there for some kernel setting. Set them as you need. </p> <ol> <li>Run configuration menu and enable desired kernel elements:</li> </ol> <pre><code>make menuconfig\n</code></pre> <ol> <li>Build kernel:</li> </ol> <pre><code>make CPUS=$(nproc)\n</code></pre> <ol> <li>Build debian packages:</li> </ol> <pre><code>make deb-pkg CPUS=$(nproc)\n</code></pre> <p>Created packages should be in the directory one level above.</p> <ol> <li> <p>Find package with <code>image</code> in name  (eg. <code>linux-image-3.10.107_3.10.107-2_i386.deb</code>) and send it to the target  device.</p> </li> <li> <p>Install packages on the target device:</p> </li> </ol> <pre><code>dpkg -i &lt;name of image package&gt;\n</code></pre> <p>Eg. <pre><code>dpkg -i linux-image-3.10.107_3.10.107-2_i386.deb\n</code></pre></p> <p>That process changes grub configuration. It adds new positions on grub menu  list. Often serial console redirection is disabled. To change this follow this instruction.</p> <ol> <li>After <code>reboot</code> system with updated kernel will be on the Grub menu list. It will have kernel version contained within the name.</li> </ol>"},{"location":"voyage_linux_netinst/","title":"Configuring Voyage Linux netinst","text":""},{"location":"voyage_linux_netinst/#prepare-image","title":"Prepare image","text":"<p>Get the live CD from here</p> <p>Then mount it wherever You like: <pre><code>mount -o loop  voyage-0.11.0_amd64.iso /mnt/dir\n</code></pre></p> <p>Extract to nfs exported directory: <pre><code>cp -rp /mnt/dir /path/to/nfs/dir\n</code></pre></p>"},{"location":"voyage_linux_netinst/#prepare-pxe","title":"Prepare PXE","text":"<p>Modify PXE menu.cfg:</p> <p>voyage/ directory is a directory in tftp path on tftp server. Also remember to change IP of the nfsroot server</p> <pre><code>label voyage\n    menu label ^Voyage-netinst\n    kernel voyage/vmlinuz\n    append initrd=voyage/initrd.img boot=live netboot=nfs root=/dev/nfs rw ip=dhcp nfsroot=192.168.0.109:/home/miczyg/nfs --- console=ttyS0,115200 earlyprint=seria\nl,ttyS0,115200\n</code></pre> <p>Copy the <code>vmlinuz</code> and <code>initrd.img</code> to <code>/path/to/tftpboot/voyage</code></p>"},{"location":"voyage_linux_netinst/#installation-on-target-apu2","title":"Installation on target APU2","text":"<p>Boot APU with iPXE and choose the correct option in menu. Log in as <code>root</code> with password <code>voyage</code> and run: <pre><code>/usr/local/sbin/voyage.update\n</code></pre></p> <p>Follow steps in Voyage Linux install section 4.</p> <p>I assume that any SD card, USB drive etc. is plugged in APU</p> <p>Now Voyage Linux is installed to the drive chosen in installation process. Reboot APU and choose to boot from this drive. </p>"},{"location":"voyage_linux_sd_card_install/","title":"Voyage linux sd card install","text":""},{"location":"voyage_linux_sd_card_install/#flashing-current-voyage-linux-on-sd-card","title":"Flashing current voyage linux on SD card.","text":"<p>The problem with installing voyage on SD card is that the script <code>voyage.update</code> accepts only integers as partition numbers, while partition numbers for SD card are <code>p1</code>, <code>p2</code> etc. (i.e <code>/dev/mmcblk0p1</code>). The workaround is to use SD card USB adapter. Thanks to this, card is seen as <code>/dev/sdb</code>, partitions: <code>/dev/sdb1</code> etc.</p> <ol> <li>Prepare current voyage linux live USB.</li> <li> <p>Boot from live USB. If connected through serial port: highlight <code>voyage    linux</code> in boot menu, press <code>TAB</code>, remove <code>quiet</code> and add instead:</p> <pre><code>console=ttyS0,115200n8\n</code></pre> </li> <li> <p>After successful boot, connect to device using <code>ssh</code>.</p> <pre><code>ssh root@&lt;dev_ip_addr&gt;\n</code></pre> </li> <li> <p>Navigate to root directory and run installing script:</p> <pre><code>./usr/local/sbin/voyage.update\n</code></pre> <p>Follow those steps:</p> <ul> <li>Create new Voyage Linux disk</li> <li>Set Voyage Linux directory to <code>/</code></li> <li>Select target profile: 9 (APU2)</li> <li>Select target disk: <code>/dev/sdb</code></li> <li>Partition for the Voyage system: 1</li> <li>Leave mounting point as default (<code>/mnt/cf</code>). Create it if doesn't exist.</li> <li>Select <code>grub</code> as Bootstrap Loader</li> <li>Partition for Bootstrap Loader: 1</li> <li>Terminal type: 1 - <code>serial terminal</code></li> <li>Speed: default - 115200</li> <li>Select: <code>Partition flash media and create file system</code></li> <li>Proceed with <code>copy distrubution to target</code></li> <li>Check if <code>configuration details</code> are correct and continue (y)</li> <li>Exit (8) after successful installation</li> </ul> </li> <li> <p>Check if system is booting from SD card properly. It worked fine when using    SanDisk Ultra 8GB. However, on Samsung Evo 16 GB boot process failed and it    was required to install <code>grub</code> manually using <code>grub-install</code>:</p> </li> </ol> <pre><code>mkdir tmp\nmount /dev/mmcblk0p1 tmp\ngrub-install --root-directory=tmp /dev/mmcblk0\n</code></pre> <ol> <li> <p>It is advised to fill an empty space of SD  card with zeroes. It will cause    the compression process run faster. Before shutting down platform execute    following command. Note that this process may take up to one hour.</p> <pre><code>dd if=/dev/zero of=tmp &amp;&amp; rm tmp\n</code></pre> </li> <li> <p>Saving image for further reuse:</p> <pre><code>sudo dd if=/dev/mmcblk0 of=current_voyage_linux_28062016.img bs=16M\n</code></pre> </li> </ol>"},{"location":"debug/AGESA/","title":"AGESA","text":"Commit MullinsPI version BinaryPI version Internal graphics Comments Path Log 8ad2d6385652 1.0.0.3 - off boots OK - current mainline settings for APU2 blobs/mainboard/pcengines/apu2/AGESA.bin 8ad2d6385652 1.0.0.A 1.1 off boot loop blobs/pi/amd/00730F01/FT3b http://81.95.197.197:7777/inixixexof.sql 8ad2d6385652 1.0.0.A 1.1 on boot loop blobs/pi/amd/00730F01/FT3b http://81.95.197.197:7777/oluxosaqin.sql 95b80508d9ba 1.0.0.4 1.0 off boot loop blobs/pi/amd/00730F01/FT3b http://81.95.197.197:7777/fabemomuxu.sql 95b80508d9ba 1.0.0.4 1.0 on boot loop blobs/pi/amd/00730F01/FT3b http://81.95.197.197:7777/kopopenacu.sql 571952f6d41f4 1.0.0.3 - off boots OK blobs/pi/amd/00730F01/FT3b 571952f6d41f4 1.0.0.3 - on boots OK blobs/pi/amd/00730F01/FT3b <p>internal graphics on = device pci 1.0 on  end # Internal Graphics P2P bridge 0x9804</p>"},{"location":"debug/alix3d2_issue/","title":"Issue description of PC Engines ALIX2D3 board","text":""},{"location":"debug/alix3d2_issue/#problem-description","title":"Problem description","text":"<p>There is no possibility to get feedback from PC Engines ALIX.2D3. Boot logs are not send by serial connection and OS installed on CF card doesn't boot.</p>"},{"location":"debug/alix3d2_issue/#checked-configurations","title":"Checked configurations","text":"<ul> <li>Comparison with another ALIX.2D3 platform (correctly working board):</li> </ul> <p>There was no visible differences in appearance beetwen compared boards. They seems to have got the same peripherals.</p> <p>Tried to boot both platforms with the same CF card with Voyage Linux installed. Working platform booted to OS, booting logs were sent by serial console and  device was visible on DHCP clients list of network to which device was  connected. Not working platform didn't send any feedback by serial console. Device didn't  appear on DHCP clients list of network to which device was connected.</p> <p>Both platforms don't boot OS from USB.</p> <ul> <li>LPC ROM image with tinyBIOS v.099m usage:</li> </ul> <p>Working ALIX.2D3 platform booted correctly to the OS with LPC ROM image  connected to the LPC socket. Sent booting logs by serial connection and appeared on DHCP client list.</p> <p>Not working ALIX.2D3 board didn't send any feedback by serial console. Device didn't appear on DHCP clients list of network to which device was connected.</p> <ul> <li>Shorting of <code>S1</code> switch pads:</li> </ul> <p>There is no switch on tested ALIX board. In case of a situation when the serial port is disabled pads of <code>S1</code> where shorted to enter to the boot configuration  menu as is written in manual on page 11. This operation did not produce results. Output didn't show in serial console.</p> <ul> <li>Different power supply voltages:</li> </ul> <p>Tested power supply voltages: 12 V, 18 V. There was no difference in operation of boards (working ALIX3D2 worked  correctly, not good board didn't start to work).</p>"},{"location":"debug/alix3d2_issue/#conclusion","title":"Conclusion","text":"<p>Taking into account the information given above it seems to be hardware issue.</p>"},{"location":"debug/cpu_frequency/","title":"Debug notes for CPU frequency issues","text":"<p>GitHub issue</p> <p>Most of information is taken from BKDG, unless noted otherwise.</p>"},{"location":"debug/cpu_frequency/#reproducing-the-issue","title":"Reproducing the issue","text":"<p>Steps described in linked GitHub issue were used.</p> <p>For some reason, our installation of pfSense doesn't include <code>cpuctl</code> module, so <code>turbostat</code> didn't work at all. According to its source code, the <code>Bzy_MHz</code> field shows real CPU frequency. It is counted as ratio of clock ticks of CPU divided by clock ticks of P0 as a reference over some period of time, and scaled appropriately. It is thus a good measurement of real CPU frequency.</p> <p>Another approach was to indirectly compare CPU frequencies by comparing bogo ops from <code>stress-ng</code>. This method can give different results depending on system load or interrupts, but can be used as an approximation. In our tests, bogo ops after the issue occurred were slightly lower than those reported on GitHub (1250-1350 vs. 1407), however they were definitely lower than when the issue did not happen (~1950). This was mostly consistent with what was described on GitHub when it comes to triggering this issue.</p> <p>However, after a couple of days we couldn't reproduce this anymore, no matter which platform or firmware version was used. Every test showed high bogo ops value (1900-2050), with no difference after a couple of days of runtime and different ways of starting the system (cold boot, warm boot, reset, reboot from pfSense and another operating system).</p>"},{"location":"debug/cpu_frequency/#p-states","title":"P-states","text":"<p>AMD processors have 2 sets of P-state numeration: software and hardware. They both start with P0 being highest-performance accessible, but hardware P0 isn't the same as software P0. On the software side additional boost states (Pb0, Pb1) are used. All boosted P-states are always higher performance than non-boosted P-states. Hardware P0 is software Pb0. Rest of states is mapped 1-to-1, with the same names corresponding to different states, which can be confusing. Number of boost states is written in <code>D18F4x15C[NumBoostStates]</code>, in case of apu it is 2. BIOS should not provide ACPI <code>_PSS</code> entries for boosted P-states.</p> <p>Boost states cannot be requested directly, some conditions that must be met:</p> <ul> <li>P0 (software) requested</li> <li>boost enabled (i.e. boost states exist and not disabled in <code>MSRC001_0015[CpbDis]</code>,   this bit is clear in our case so boost isn't disabled here)</li> <li>actual demand on CPU</li> <li>no upper limit set (<code>D18F4x13C[SmuPstateLimit]</code>, set as 0 so no limit)</li> <li>additional hardware limits (these values vary, most of them is set by AGESA):</li> <li>temperature (temperature limit is set in <code>D18F3x64</code> as 105 \u00b0C)</li> <li>TDP - whole CPU (set as a dynamic in <code>D18F3x1FC</code>, there is a dead link to     section 2.5.11.8 in BKDG)</li> <li>power consumption - individual cores (power required by core is also     calculated or hard-coded in AGESA, but a P-state would be disabled if it     were to require more power than a board can supply)</li> </ul> <p>CPU can temporarily go above the TDP for one core, given that enough of other cores are halted or waiting on IO operation. This is configured in <code>D18F4x16C</code>.</p> <p>Lower limits can be set in <code>D18F3x64[HtcPstateLimit]</code>, <code>D18F3x68[SwPstateLimit]</code> and <code>D18F3xDC[HwPstateLimit]</code> - all of these use hardware numeration. Also in BKDG among other limitations \"APML\" (Advanced Platform Management Link?) was mentioned with a dead link to <code>D18F3xC4[PstateLimit]</code>.</p> <p>There is a maximum of 8 states, but only 5 are used in apu:</p> Software Hardware Frequency Register Pb0 P0 1.4 GHz MSRC001_0064 Pb1 P1 1.2 GHz MSRC001_0065 P0 P2 1.0 GHz MSRC001_0066 P1 P3 800 MHz MSRC001_0067 P2 P4 600 MHz MSRC001_0068 n/a n/a MSRC001_0069 n/a n/a MSRC001_006A n/a n/a MSRC001_006B <p>Problem is that platform doesn't go back to 1.0 GHz, so it isn't probably connected to boost. However boost states were not observed despite no visible limits (except for dynamic TDP, not sufficiently described in BKDG). This could be due to the nature of checking for P-states - perhaps a function that reads registers uses IO operations which don't require computing power as much.</p> <p>Other MSRs directly connected to P-states:</p> <ul> <li>MSRC001_0061 - current P-state limit, P-state max value - read only.</li> <li>MSRC001_0062 - P-state control, write to this register requests a change. Actual change might not happen if it exceeds any of set limits or if another core on the same voltage/frequency domain uses different state.</li> <li>MSRC001_0063 - current P-state. Uses software numbering. May not be accurate after warm reset, if it happened during state change (might be connected to reboot issues).</li> <li>MSRC001_0071 - COFVID status. This register has fields describing real value of P-state, current P-state limit (2 in this case, so no boost is allowed), startup P-state, maximum frequency of CPU and NB, current frequency and voltage. All P-states here use hardware numbering.</li> </ul>"},{"location":"debug/cpu_frequency/#values-obtained-from-registers","title":"Values obtained from registers","text":"<p>Values of the mentioned registers were read using BITS, <code>lspci -xxxx</code> (Debian) and <code>pciconf</code> (pfSense). <code>pciconf</code> doesn't allow to read registers above 0x100 (extended PCI configuration space) so <code>D18F4</code> was not checked there. Also MSRs were only read and written with BITS - accessing them from OS would require a kernel module and could mess/get messed by power management of OS.</p> <p>Results seems to be consistent across different platforms (except for small voltage differences), OSes and warm/cold boots.</p> Register Value Decoded D18F3x64 0x426a0025 HtcPstateLimit = 4 (low, HW)HtcHystLimit = 2HtcTmpLimit = 0x6a = 105 \u00b0CHtcActSts = 1 processor entered HTC since resetHtcAct = 0 processor is not in HTC state currentlyHtcEn = 1 D18F3x68 0x40000000 SwPstateLimit = 4 (low, HW)SwPstateLimitEn = 0 D18F3xC4 0x00000000 mentioned but not described in BKDG D18F3xDC 0x68786400 NbsynPtrAdjPstate = 2NbsynPtrAdjLo = 5CacheFlushOnHaltTmr = 0xfNbsynPtrAdj = 6HwPstateMaxVal = 4 (low, HW) D18F4x110 0x000c4014 MinResTmr = 0x62 = 98CSampleTimer = 0x14 = 20 (~10 ms) D18F4x13C 0x00000001 SmuPstateLimitEn = 1SmuPstateLimit = 0 (high, HW) D18F4x15C 0x00000189 BoostLock = 0CstatePowerEn = 1ApmMasterEn = 1NumBoostStates = 2BoostSrc = 1 use of Pb0 and Pb1 enabled D18F4x16C 0x000024bc CstateCores = 1 whether CstateCnt describes cores or compute units, 1 = coresCstateCnt = 2 how many cores/CUs need to be in CC6 for boosting othersCstateBoost = 2 (HW) core needs to be in this P-state before being boostedApmTdpLimitSts = 1ApmTdpLimitIntEn = 1TdpLimitDis = 1 D18F5x84 0x0e0ef003 DdrMaxRateEnf = 0xeDdrMaxRate = 0xeDctEn = 0xfCmpCap = 3 (4 cores) D18F5xE0 0x0000xxx1 RunAvgRange = 1 (interval = 40ms)bits marked with x are reserved, they change between reads MSRC001_0061 0x0000000000000020 CurPstateLimit = 0 (high, SW)PstateMaxVal = 2 (low, SW) MSRC001_0062 0x0000000000000000 PstateCmd = 0 see notes below MSRC001_0063 0x0000000000000000 CurPstate = 0 see notes below MSRC001_0064 0x8000025f0000b84c PstateEn = 1IddDiv = 2IddValue = 0x5fNbPstate = 0CpuVid = 0x5cCpuDid = 1 (divide by 2)CpuFid = 0xc (COF = 1400 MHz) MSRC001_0065 0x8000024d0000c848 PstateEn = 1IddDiv = 2IddValue = 0x4dNbPstate = 0CpuVid = 0x64CpuDid = 1 (divide by 2)CpuFid = 8 (COF = 1200 MHz) MSRC001_0066 0x800002700000d844 PstateEn = 1IddDiv = 2IddValue = 0x70NbPstate = 0CpuVid = 0x6cCpuDid = 1 (divide by 2)CpuFid = 4 (COF = 1000 MHz) MSRC001_0067 0x8000025f0040e040 PstateEn = 1IddDiv = 2IddValue = 0x5fNbPstate = 1CpuVid = 0x70CpuDid = 1 (divide by 2)CpuFid = 0 (COF = 800 MHz) MSRC001_0068 0x8000024b0040ece0 PstateEn = 1IddDiv = 2IddValue = 0x4bNbPstate = 1CpuVid = 0x76CpuDid = 3 (divide by 8)CpuFid = 0x20 (COF = 600 MHz) MSRC001_0069MSRC001_006AMSRC001_006B 0x000000000041fe00 PstateEn = 0 MSRC001_0071 0x3a1c00027442d844 MaxNbCof = 7 (700 MHz)CurPstateLimit = 2 (high, HW)MaxCpuCof = 0xe = 14 (1400 MHz)StartupPstate = 2 (HW) cold reset, may be different after reboot/resetCurNbVid = 0x74NbPstateDis = 0CurPstate = 2 (HW) see notes belowCurCpuVid = 0x6cCurCpuDid = 1CurCpuFid = 4 <p>In the table SW means software numbering, HW - hardware. High limit means an upper limit on frequency (performance), lowest P-state number. COF (current operating frequency) is calculated as <code>100 * ((CpuFid + 0x10) / (2^CpuDid))</code>. Transitions between P-states were working as expected. To change P-state to the lower frequency following steps were taken:</p> <ol> <li>Write to MSRC001_0062 with requested, higher P-state number (SW).</li> <li>Read from MSRC001_0062 should return written state, as long as it is within limits.</li> <li>Read from MSRC001_0063 returns 0, MSRC001_0071 returns previous value - no P-state transition occurred because of frequency and voltage domains.</li> <li>Write to MSRC001_0062 of other cores.</li> <li>After all cores have requested change the actual P-state transition takes place. Reads from MSRC001_0063 and MSRC001_0071 return expected values.</li> </ol> <p>Changing P-state to higher performance results in immediate change, as frequency and voltage domains are tailored to the most demanding core.</p> <p>Actual frequency and/or voltage can be different than in the state pointed by CurPstate in MSRC001_0063 after a warm reset that occurred during plane transition. In this case current value can be that before or after transition. Firmware is required to transition the processor to valid COF and VID settings. This can be the source of some reboot problems, but it is hard to test in a reliable way - reset is asynchronous event that have to take place in very short amount of time during transition.</p>"},{"location":"debug/cpu_frequency/#voltage-regulator","title":"Voltage regulator","text":"<p>CPU communicates with voltage regulator using SVI2 (Serial VID Interface 2.0). Typically, after all frequency and voltage dependencies described above are resolved, transition to higher performance follows a sequence:</p> <ol> <li>SVI2 command is send to the voltage regulator, <code>D18F5x12C[Svi2CmdBusy]</code>    is set.</li> <li>Voltage regulator sets the requested voltage, waits for it to stabilize and    clears <code>Svi2CmdBusy</code>.</li> <li>After <code>Svi2CmdBusy</code> is clear frequency change is performed.</li> </ol> <p>Transition towards lower performance starts with frequency change and doesn't have to wait for it to finish before changing voltage. Because of these restrictions it is impossible for CPU to work with high frequency and too low voltage for that frequency.</p> <p>Multiple requests can be grouped:</p> <ul> <li>If multiple commands are issued that affect the P-state of a domain prior   to when the processor initiates the change of the P-state of that domain,   then the processor operates on the last one issued.</li> <li>Once a P-state change starts, the P-state state machine (PSSM) continues   through completion unless interrupted by a PWROK deassertion. If multiple   P-state changes are requested concurrently, the PSSM may group the   associated VID changes separately from the associated COF changes.</li> </ul> <p>Setting <code>D18F5x12C[WaitVidCompDis]</code> changes behaviour of transition towards higher performance - instead of waiting for voltage regulator to report end of transition next request can be made after a defined time period (<code>D18F3xD8[VSRampSlamTime]</code>). BKDG recommends 2.00 \u03bcs per 15 mV, it is set as such by AGESA, but can be modified by OEM callouts.</p>"},{"location":"debug/cpu_frequency/#findings-from-logs-obtained-from-community","title":"Findings from logs obtained from community","text":"<p>Registers values from community revealed that CPU had voltage of (software) P0, but its frequency was stuck at a value of P2. Voltage change to P0 was requested but not reported as done by voltage regulator for some reason.</p> <p>It is possible that under certain circumstances an infinite loop occurs during boot - CPU is not requested to transition to P0 as its voltage already is equal to that of P0, so AGESA waits for frequency change to catch up, which doesn't happen. An explicit request to transition to P0 during boot could help with the other issue.</p> <p>It is unclear why some platforms are influenced and others are not. Maybe different batch of voltage regulator (chip U7 on the bottom side of board) was used?</p>"},{"location":"debug/cpu_frequency/#acpi-tables","title":"ACPI tables","text":"<p>All required objects for P-states are present, even the optional <code>_PPC</code>. Only difference between actual tables and recommendations from BKDG is entry <code>DUTY_WIDTH</code> in Fixed ACPI Description Table (FADT) - AMD recommends value of 0, while real entry has 3. Description of this entry from ACPI specification:</p> <p>The bit width of the processor\u2019s duty cycle setting value in the P_CNT register. Each processor\u2019s duty cycle setting allows the software to select a nominal processor frequency below its absolute frequency as defined by:</p> <p>THTL_EN = 1</p> <p>BF*DC/(2^DUTY_WIDTH)</p> <p>Where:</p> <p>BF \u2013 Base frequency</p> <p>DC \u2013 Duty cycle setting</p> <p>When THTL_EN is 0, the processor runs at its absolute BF. A DUTY_WIDTH value of 0 indicates that processor duty cycle is not supported and the processor continuously runs at its base frequency.</p>"},{"location":"debug/cpu_frequency/#c-states","title":"C-states","text":"<p>Only theoretical research on registers was done from C0, and everything seems to be correct. Practical research (i.e. transitions between states) is impossible, because when CPU is in lower C-state it doesn't process instructions and thus cannot report any of its register values.</p> <p>As for ACPI tables, we couldn't find <code>_CRS</code> object. <code>P_LVL2_LAT</code> showed a value 0f 0x65 = 101, which disables C2 state according to specification. First recorded value of this field actually showed 0x64 = 100, that is as specified in BKDG, but all subsequent logs show 0x65. This could either be an error with serial connection or this value did change, which could possibly explain sudden problems with reproducing. A look at the source code however shows that it is set as 0x65, against instructions from BKDG. If this value was indeed different it had to be set by some other agent (payload, OS, AGESA).</p>"},{"location":"debug/cpu_frequency/#fix","title":"Fix","text":"<p>Setting <code>D18F5x12C[WaitVidCompDis]</code> resolved both this issue as well as problems with reboot. This bit is protected by <code>D18F2x1B4[SmuCfgLock]</code> after system or a payload starts, but is cleared during init.</p>"},{"location":"debug/debian_kernel_rebuild/","title":"Debian kernel rebuild","text":""},{"location":"debug/debian_kernel_rebuild/#recompile-debian-kernel-to-support-apu2-gpio","title":"Recompile debian kernel to support APU2 GPIO","text":"<p><code>http://www.pcengines.ch/howto.htm#gpio</code></p> <p>Get appropriate debian kernel source, e.g. from <code>linux-source-*</code> package.</p> <p>Copy source to host PC and compile with <code>gpio</code> module included:</p> <pre><code>CONFIG_GPIO_NCT5104D=m\nCONFIG_GPIO_SYSFS=y\n</code></pre> <pre><code>make menuconfig\nsudo apt-get install debhelper\nsudo apt-get install modutils\nsudo apt-get install kernel-package\nmake-kpkg clean\nfakeroot make-kpkg  -j8 --initrd --revision=1.2.custom kernel_image\n</code></pre> <p>Copy .deb into sd card, boot and install:</p> <pre><code>dpkg-i linux-image-3.16.36_1.3.custom_amd64.deb\n</code></pre> <pre><code>vi /etc/modules\n</code></pre> <p>add:</p> <pre><code>gpio-nct5104d\n</code></pre> <pre><code>cd /sys/class/gpio\necho 0 &gt; export\ncd gpio0\necho out &gt; direction\necho 1 &gt; value\n</code></pre>"},{"location":"debug/debian_kernel_rebuild/#first-test","title":"First test","text":"<ol> <li> <p>Export <code>gpio17</code>:</p> <pre><code>cd /sys/class/gpio\necho 17 &gt; export\n</code></pre> </li> <li> <p>Check it's value and direction:</p> <pre><code>root@debian:/sys/class/gpio/gpio17# cat direction\nin\nroot@debian:/sys/class/gpio/gpio17# cat value\n0\n</code></pre> </li> <li> <p>Change to <code>out</code> and <code>1</code>:</p> <pre><code>root@debian:/sys/class/gpio/gpio17# echo out &gt; direction\nroot@debian:/sys/class/gpio/gpio17# cat direction\nout\nroot@debian:/sys/class/gpio/gpio17# echo 1 &gt; value\nroot@debian:/sys/class/gpio/gpio17# cat value\n1\n</code></pre> <p>At this point voltage on pin rises from 0V to 0.8V.</p> </li> <li> <p>Reboot:</p> <pre><code>reboot\n</code></pre> <p>During coreboot-bios phase voltage rises to 1.2V.</p> <p>When OS boots into login propmt voltage drops back to 0.8V.</p> </li> <li> <p>Check <code>gpio17</code> <code>direction</code> and <code>value</code>:</p> <pre><code>cd /sys/class/gpio\necho 17 &gt; export\ncd gpio17\n\nroot@debian:/sys/class/gpio/gpio17# cat direction\nin\nroot@debian:/sys/class/gpio/gpio17# cat value\n1\n</code></pre> <p>It claims to be an input in high state. But the voltage is still 0.8V so it is actually an output (?)</p> <p>That's because gpios are configured by default as OD</p> </li> <li> <p>Reboot again with those settings and check:</p> <pre><code>root@debian:/sys/class/gpio/gpio17# cat direction\nin\nroot@debian:/sys/class/gpio/gpio17# cat value\n1\n</code></pre> </li> <li> <p>Set output to low (0V and reboot)</p> <pre><code>root@debian:/sys/class/gpio/gpio17# cat direction\nin\nroot@debian:/sys/class/gpio/gpio17# cat value\n0\n</code></pre> <p>After reboot voltage on this pin is 0V, even if boot into other OS. Voltage on the rest of the pins is ~0.9V.</p> <p>After coldboot voltage is back at ~0.9V.</p> </li> </ol>"},{"location":"debug/debian_kernel_rebuild/#apu1-test","title":"APU1 test","text":"<p>Voyage on USB stick, without gpio kernel module Debian on SDcard, with gpio kernel module</p>"},{"location":"debug/debian_kernel_rebuild/#pins-as-gpio","title":"Pins as GPIO","text":"<ol> <li>Log into Debian, set pin17 as output with value = 0. Voltage = 0V.</li> <li>Reboot into Debian. Voltage = 0V for the entire time of reboot as well as in    the OS.</li> <li>Reboot into Voyage. Voltage = 0V for the entire time of reboot as well as in    the OS.</li> </ol>"},{"location":"debug/debian_kernel_rebuild/#pins-disabled","title":"Pins disabled","text":"<ol> <li>Log into Debian, set pin17 as output with value = 0. Voltage = 0V.</li> <li>Reboot into Debian. Voltage rises to 1.2V for the entire time of reboot but    drops to 0 when login prompt appears (when gpio module is loaded ? it    initialises pins as GPIOs).</li> <li>Reboot into Voyage. Voltage = 1.2V for the entire time of reboot as well as    in the OS.</li> </ol>"},{"location":"debug/external_sd_slot/","title":"External sd slot","text":"<p>We have used an external SD slot connected to SD pins on APU2. Unfortunately <code>CD</code> and <code>WP</code> pins are not exposed so it is not <code>exactly</code> the same situation. However, we have managed to connect to <code>CD</code> pin as well. Leaving <code>WP</code> unconnected should not make the difference - controller will treat card as write-protected, but that is not an issue in this case. So to make it clear: we have all SD signals (except for <code>WP</code> which is left unconnected) coming from the external SD slot on prototype board.</p> <p>To make below tests even more similar, we have moved <code>WP</code> switch down so even in internal slot card will be seen as write-protected.</p> <p>When <code>GOOD</code> card is inserted into the external slot it behaves the same (in terms of command response) as if it would be inserted into APU2 internal slot. No matter if it is a cold- or warmboot.</p> <p>When <code>BAD</code> card is inserted into the external slot it behaves the same (in terms of command response) as <code>GOOD</code> card. When it is inserted into APU2 internal slot it does not respond to any command.</p> <p>We have not managed to boot from the external slot, however. It is possible that length and quality of joints is not sufficient enough when frequency rises from initialization 400 kHz to operational frequency.</p>"},{"location":"debug/freeDOS_problems/","title":"Problems with FreeDOS on APU2 platform","text":"<ol> <li> <p>FreeDOS doesn't have drivers for internal SD card reader. Boot ends like     this:</p> <pre><code>JemmEx v5.78 [07/15/12]\nSystem memory found at c100-edff, region might be in use\nJemmEx loaded\nKernel: allocated 45 Diskbuffers = 23940 Bytes in HMA\nBad or missing Command Interpreter: C:\\FDOS\\BIN\\COMMAND.COM C:\\FDOS\\BIN /E:1024 /P=C:\\AUTOEXEC.BAT\nEnter the full shell command line:\n</code></pre> </li> <li> <p>FreeDOS doesn't use the serial console. Instead its driving its output to     standard PC VGA text console. <code>sgabios</code> needs to be used to provide the     wrapping around text output. <code>ctty aux</code> command could be added to     <code>autoexec.bat</code> though, to drive some output to the serial console directly,     but more advanced programs (using curses-like graphical interfaces, e.g.     <code>edit</code>) are not redirecting their output.</p> </li> </ol>"},{"location":"debug/hdd_mPCIe_log_analyze/","title":"hdd mPCIe log analyze","text":""},{"location":"debug/hdd_mPCIe_log_analyze/#coldboot","title":"coldboot","text":"<ul> <li>mpcie1 from coldboot:</li> </ul> <pre><code>[2016-10-22 16:04:16] /dff57000\\ Start thread\n[2016-10-22 16:04:16] |dff57000| AHCI/1: probing\n[2016-10-22 16:04:16] |dff57000| AHCI/1: link up\n[2016-10-22 16:04:16] |dff57000| AHCI/1: send cmd ...\n[2016-10-22 16:04:48] |dff57000| WARNING - Timeout at ahci_command:154!\n[2016-10-22 16:04:48] |dff57000| AHCI/1: send cmd ...\n[2016-10-22 16:05:20] |dff57000| WARNING - Timeout at ahci_command:154!\n[2016-10-22 16:05:20] |dff57000| phys_free dff5a400 (detail=0xdff5a3d0)\n[2016-10-22 16:05:20] |dff57000| phys_free dff5a200 (detail=0xdff5a3a0)\n[2016-10-22 16:05:20] |dff57000| phys_free dff5a100 (detail=0xdff5a370)\n[2016-10-22 16:05:20] |dff57000| phys_free dff5ac50 (detail=0xdff5ac20)\n[2016-10-22 16:05:20] \\dff57000/ End thread\n[2016-10-22 16:05:20] phys_free dff57000 (detail=0xdff5a340)\n</code></pre> <p>mpcie2 from coldboot:</p> <pre><code>phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710)\n/dff57000\\ start thread\n|dff57000| ahci_port_detect\n|dff57000| ahci/1: probing\n|dff57000| ahci/1: link up\n|dff57000| ahci/1: send cmd ...\n|dff57000| WARNING - Timeout at ahci_command:154!\n|dff57000| AHCI/1: send cmd ...\n|dff57000| WARNING - Timeout at ahci_command:154!\n|dff57000| phys_free dff5a000 (detail=0xdff5a7a0)\n|dff57000| phys_free dff5a600 (detail=0xdff5a770)\n|dff57000| phys_free dff5a500 (detail=0xdff5a740)\n|dff57000| phys_free dff5ac20 (detail=0xdff5a7d0)\n\\dff57000/ End thread\nphys_free dff57000 (detail=0xdff5a710)\n</code></pre> <p>After coldboot, mPCIe1 and mPCIe2 behaviour is the same (AHCI Timeout). But in mPCIe2 case you can not fully load into OS: it reboots after: <code>tsc unst</code></p>"},{"location":"debug/hdd_mPCIe_log_analyze/#reboot","title":"reboot","text":"<ul> <li>mPCIe1 after reboot:</li> </ul> <pre><code>[2016-10-22 16:07:10] phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a340)\n[2016-10-22 16:07:10] /dff57000\\ Start thread\n[2016-10-22 16:07:10] |dff57000| AHCI/1: probing\n[2016-10-22 16:07:10] |dff57000| AHCI/1: link up\n[2016-10-22 16:07:10] |dff57000| AHCI/1: send cmd ...\n[2016-10-22 16:07:10] |dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ...\n[2016-10-22 16:07:10] |dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4\n[2016-10-22 16:07:10] |dff57000| AHCI/1: send cmd ...\n[2016-10-22 16:07:11] |dff57000| AHCI/1: ... intbits 0x2, status 0x58 ...\n[2016-10-22 16:07:11] |dff57000| AHCI/1: ... finished, status 0x58, OK\n[2016-10-22 16:07:11] |dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae60 (detail=0xdff5ae30)\n[2016-10-22 16:07:11] |dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,5/*@0/drive@1/disk@0\n[2016-10-22 16:07:11] |dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4\n[2016-10-22 16:07:11] |dff57000| AHCI/1: Set transfer mode to UDMA-6\n[2016-10-22 16:07:11] |dff57000| AHCI/1: send cmd ...\n[2016-10-22 16:07:11] |dff57000| AHCI/1: ... intbits 0x1, status 0x50 ...\n[2016-10-22 16:07:11] |dff57000| AHCI/1: ... finished, status 0x50, OK\n[2016-10-22 16:07:11] |dff57000| phys_alloc zone=0xdff6df18 size=68 align=10 ret=f0500 (detail=0xdff5add0)\n[2016-10-22 16:07:11] |dff57000| phys_free dff5ac50 (detail=0xdff5ac20)\n[2016-10-22 16:07:11] |dff57000| phys_free dff5a400 (detail=0xdff5a3d0)\n[2016-10-22 16:07:11] |dff57000| phys_free dff5a200 (detail=0xdff5a3a0)\n[2016-10-22 16:07:11] |dff57000| phys_free dff5a100 (detail=0xdff5a370)\n[2016-10-22 16:07:11] |dff57000| phys_alloc zone=0xdff6df1c size=1024 align=400 ret=dffad000 (detail=0xdff61250)\n[2016-10-22 16:07:11] |dff57000| phys_alloc zone=0xdff6df1c size=256 align=100 ret=dffad800 (detail=0xdff61220)\n[2016-10-22 16:07:11] |dff57000| phys_alloc zone=0xdff6df1c size=256 align=100 ret=dffabf00 (detail=0xdff61140)\n[2016-10-22 16:07:11] |dff57000| AHCI/1: registering: \"AHCI/1: ST1000LM014-SSHD-8GB ATA-9 Hard-Disk (931 GiBytes)\"\n[2016-10-22 16:07:11] |dff57000| phys_alloc zone=0xdff6df10 size=24 align=10 ret=dff61200 (detail=0xdff61110)\n[2016-10-22 16:07:11] |dff57000| Registering bootable: AHCI/1: ST1000LM014-SSHD-8GB ATA-9 Hard-Disk (931 GiBytes) (type:2 prio:103 data:f0500)\n[2016-10-22 16:07:11] \\dff57000/ End thread\n[2016-10-22 16:07:11] phys_free dff57000 (detail=0xdff5a340)\n</code></pre> <ul> <li>mPCIe2 after reboot:</li> </ul> <pre><code>phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710)\n/dff57000\\ Start thread\n|dff57000| ahci_port_detect\n|dff57000| AHCI/1: probing\n|dff57000| AHCI/1: link up\n|dff57000| AHCI/1: send cmd ...\n|dff57000| rfis\n|dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ...\n|dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4\n|dff57000| AHCI/1: send cmd ...\n|dff57000| psfis\n|dff57000| AHCI/1: ... intbits 0xffffffff, status 0x58 ...\n|dff57000| AHCI/1: ... finished, status 0x58, OK\n|dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae10 (detail=0xdff5ade0)\n|dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@1/disk@0\n|dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4\n|dff57000| AHCI/1: Set transfer mode to UDMA-6\n|dff57000| AHCI/1: send cmd ...\n|dff57000| psfis\n|dff57000| AHCI/1: ... intbits 0xffffffff, status 0x58 ...\n|dff57000| AHCI/1: ... finished, status 0x58, OK\n|dff57000| ahci_command rc = 0\n\n// REBOOTS HERE\n\nphys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710)\n/dff57000\\ Start thread\n|dff57000| ahci_port_detect\n|dff57000| AHCI/1: probing\n|dff57000| AHCI/1: link up\n|dff57000| AHCI/1: send cmd ...\n|dff57000| rfis\n|dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ...\n|dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4\n|dff57000| AHCI/1: send cmd ...\n|dff57000| psfis\n|dff57000| AHCI/1: ... intbits 0x2, status 0x58 ...\n|dff57000| AHCI/1: ... finished, status 0x58, OK\n|dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae10 (detail=0xdff5ade0)\n|dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@1/disk@0\n|dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4\n|dff57000| AHCI/1: Set transfer mode to UDMA-6\n|dff57000| AHCI/1: send cmd ...\n|dff57000| rfis\n|dff57000| AHCI/1: ... intbits 0x1, status 0x50 ...\n|dff57000| AHCI/1: ... finished, status 0x50, OK\n|dff57000| ahci_command rc = 0\n\n// REBOOTS HERE\n\nphys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710)\n/dff57000\\ Start thread\n|dff57000| ahci_port_detect\n|dff57000| AHCI/1: probing\n|dff57000| AHCI/1: link up\n|dff57000| AHCI/1: send cmd ...\n|dff57000| rfis\n|dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ...\n|dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4\n|dff57000| AHCI/1: send cmd ...\n|dff57000| psfis\n|dff57000| AHCI/1: ... intbits 0x2, status 0x58 ...\n|dff57000| AHCI/1: ... finished, status 0x58, OK\n|dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae10 (detail=0xdff5ade0)\n|dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@1/disk@0\n|dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4\n|dff57000| AHCI/1: Set transfer mode to UDMA-6\n|dff57000| AHCI/1: send cmd ...\n|dff57000| rfis\n|dff57000| AHCI/1: ... intbits 0x1, status 0x50 ...\n|dff57000| AHCI/1: ... finished, status 0x50, OK\n|dff57000| ahci_command rc = 0\n\n // REBOOTS HERE\n\nphys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710)\n/dff57000\\ Start thread\n|dff57000| ahci_port_detect\n|dff57000| AHCI/1: probing\n|dff57000| AHCI/1: link up\n|dff57000| AHCI/1: send cmd ...\n|dff57000| rfis\n|dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ...\n|dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4\n|dff57000| AHCI/1: send cmd ...\n|dff57000| psfis\n|dff57000| AHCI/1: ... intbits 0x2, status 0x58 ...\n|dff57000| AHCI/1: ... finished, status 0x58, OK\n|dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae10 (detail=0xdff5ade0)\n|dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@1/disk@0\n|dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4\n|dff57000| AHCI/1: Set transfer mode to UDMA-6\n|dff57000| AHCI/1: send cmd ...\n|dff57000| rfis\n|dff57000| AHCI/1: ... intbits 0x1, status 0x50 ...\n|dff57000| AHCI/1: ... finished, status 0x50, OK\n|dff57000| ahci_command rc = 0\n\n// REBOOTS HERE\n\nphys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710)\n/dff57000\\ Start thread\n|dff57000| ahci_port_detect\n|dff57000| AHCI/1: probing\n|dff57000| AHCI/1: link up\n|dff57000| AHCI/1: send cmd ...\n|dff57000| rfis\n|dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ...\n|dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4\n|dff57000| AHCI/1: send cmd ...\n|dff57000| psfis\n|dff57000| AHCI/1: ... intbits 0x2, status 0x58 ...\n|dff57000| AHCI/1: ... finished, status 0x58, OK\n|dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae10 (detail=0xdff5ade0)\n|dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@1/disk@0\n|dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4\n|dff57000| AHCI/1: Set transfer mode to UDMA-6\n|dff57000| AHCI/1: send cmd ...\n|dff57000| rfis\n|dff57000| AHCI/1: ... intbits 0x1, status 0x50 ...\n|dff57000| AHCI/1: ... finished, status 0x50, OK\n|dff57000| ahci_command rc = 0\n\n// REBOOTS HERE\n\nphys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710)\n/dff57000\\ Start thread\n|dff57000| ahci_port_detect\n|dff57000| AHCI/1: probing\n|dff57000| AHCI/1: link up\n|dff57000| AHCI/1: send cmd ...\n|dff57000| rfis\n|dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ...\n|dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4\n|dff57000| AHCI/1: send cmd ...\n|dff57000| psfis\n|dff57000| AHCI/1: ... intbits 0xffffffff, status 0x58 ...\n|dff57000| AHCI/1: ... finished, status 0x58, OK\n|dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae10 (detail=0xdff5ade0)\n|dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@1/disk@0\n|dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4\n|dff57000| AHCI/1: Set transfer mode to UDMA-6\n|dff57000| AHCI/1: send cmd ...\n|dff57000| psfis\n|dff57000| AHCI/1: ... intbits 0xffffffff, status 0x58 ...\n|dff57000| AHCI/1: ... finished, status 0x58, OK\n|dff57000| ahci_command rc = 0\n\n// REBOOTS HERE\n\nphys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710)\n/dff57000\\ Start thread\n|dff57000| ahci_port_detect\n|dff57000| AHCI/1: probing\n|dff57000| AHCI/1: link up\n|dff57000| AHCI/1: send cmd ...\n|dff57000| rfis\n|dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ...\n|dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4\n|dff57000| AHCI/1: send cmd ...\n|dff57000| psfis\n|dff57000| AHCI/1: ... intbits 0x2, status 0x58 ...\n|dff57000| AHCI/1: ... finished, status 0x58, OK\n|dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae10 (detail=0xdff5ade0)\n|dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@1/disk@0\n|dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4\n|dff57000| AHCI/1: Set transfer mode to UDMA-6\n|dff57000| AHCI/1: send cmd ...\n|dff57000| rfis\n|dff57000| AHCI/1: ... intbits 0x1, status 0x50 ...\n|dff57000| AHCI/1: ... finished, status 0x50, OK\n|dff57000| ahci_command rc = 0\n\n// REBOOTS HERE\n\nphys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710)\n/dff57000\\ Start thread\n|dff57000| ahci_port_detect\n|dff57000| AHCI/1: probing\n|dff57000| AHCI/1: link up\n|dff57000| AHCI/1: send cmd ...\n|dff57000| rfis\n|dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ...\n|dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4\n|dff57000| AHCI/1: send cmd ...\n</code></pre> <p>After reboot, in mPCIe1 slot HDD gets registered, while in mPCIe2 slot it does   not - it reboots during AHCI thread.</p> <p>It is not fully consistent. <code>intbits</code> and <code>status</code> values varies beteen   following reboots. <code>rfis</code> and <code>psfis</code> prints added to indicate <code>FIS</code> type:   <code>Register- Device to Host</code> or <code>PIO Setup - Device to Host</code>. Reboot appears   even if thread flow is identical to this from mPCIe1, where reboot does   not occur.</p> <p>Source of reboot is not yet discovered. It prints <code>rc=0</code> but probably does   not reach to <code>return 0</code> (function above, which is calling this one, does   not print returned value). This <code>else</code> does not matter since it is not   executing in this case.</p> <p>This is done in file   seabios/src/hw/ahci.c,   function <code>ahci_port_setup</code> that starts with line 421.</p> <pre><code>        rc = ahci_command(port, 1, 0, 0, 0);\n\n        dprintf(1, \"ahci_command rc = %x \\n\", rc);\n\n        if (rc &lt; 0) {\n            dprintf(1, \"AHCI/%d: Set transfer mode failed.\\n\", port-&gt;pnr);\n        }\n    }\nelse\n{\n    // found cdrom (atapi)\n    port-&gt;drive.type = DTYPE_AHCI_ATAPI;\n    port-&gt;drive.blksize = CDROM_SECTOR_SIZE;\n    port-&gt;drive.sectors = (u64)-1;\n    u8 iscd = ((buffer[0] &gt;&gt; 8) &amp; 0x1f) == 0x05;\n    if (!iscd) {\n        dprintf(1, \"AHCI/%d: atapi device isn't a cdrom\\n\", port-&gt;pnr);\n        return -1;\n    }\n    port-&gt;desc = znprintf(MAXDESCSIZE\n                          , \"DVD/CD [AHCI/%d: %s ATAPI-%d DVD/CD]\"\n                          , port-&gt;pnr\n                          , ata_extract_model(model, MAXMODEL, buffer)\n                          , ata_extract_version(buffer));\n    port-&gt;prio = bootprio_find_ata_device(ctrl-&gt;pci_tmp, pnr, 0);\n}\nreturn 0;\n</code></pre> <p>Function <code>ahci_port_detect</code>, which is calling function <code>ahci_port_setup</code>   presented above. Below prints are not present in logs</p> <pre><code>static void\nahci_port_detect(void *data)\n{\n    struct ahci_port_s *port = data;\n    int rc;\n\n    dprintf(2, \"AHCI/%d: probing\\n\", port-&gt;pnr);\n    ahci_port_reset(port-&gt;ctrl, port-&gt;pnr);\n    rc = ahci_port_setup(port);\n\n    dprintf(1, \"ahci_port_setup rc = %d \\n\", rc);\n</code></pre>"},{"location":"debug/hdd_test/","title":"Hdd test","text":"<p>Test item: mPCIe -&gt; SATA converter <code>ASM1061</code> hdd: Seagate Laptop SSHD 1000GB 8GB NAND flash</p> <ol> <li> <p>mPCIe1 without resistor</p> <p>Note that CLKREQ has been already turned off for mPCIe1 when these test were proceeded.</p> <ul> <li>Cold boot: it takes 60-75 sec after power-on until boot menu appears. There   is no HDD entry in boot menu.</li> </ul> <pre><code>phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff58000 (detail=0xdff59b40)\n/dff58000\\ Start thread\n|dff58000| AHCI/0: probing\n|dff58000| AHCI/0: link up\n|dff58000| AHCI/0: send cmd ...\n|dff58000| WARNING - Timeout at ahci_command:154!\n|dff58000| AHCI/0: send cmd ...\n|dff58000| WARNING - Timeout at ahci_command:154!\n|dff58000| phys_free dff59c00 (detail=0xdff59bd0)\n|dff58000| phys_free dff59a00 (detail=0xdff59ba0)\n|dff58000| phys_free dff59900 (detail=0xdff59b70)\n|dff58000| phys_free dff61050 (detail=0xdff61020)\n\\dff58000/ End thread\nphys_free dff58000 (detail=0xdff59b40)\n</code></pre> <ul> <li> <p>After OS boot: HDD is visible and usable under Debian</p> </li> <li> <p>After reboot: boot menu appears as quickly as usual. HDD entry appears in   boot menu:</p> </li> </ul> <pre><code>1. ata0-0: SATA SSD ATA-10 Hard-Disk (15272 MiBytes)\n2. AHCI/0: ST1000LM014-SSHD-8GB ATA-9 Hard-Disk (931 GiBytes)\n3. Payload [memtest]\n4. Payload [setup]\n</code></pre> </li> <li> <p>mPCIe1 with resistor</p> <ul> <li>Cold boot: it takes 60-75 sec after power-on until boot menu appears. There   is no HDD entry in boot menu.</li> </ul> <pre><code>phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff58000 (detail=0xdff59b40)\n/dff58000\\ Start thread\n|dff58000| AHCI/0: probing\n|dff58000| AHCI/0: link up\n|dff58000| AHCI/0: send cmd ...\n|dff58000| WARNING - Timeout at ahci_command:154!\n|dff58000| AHCI/0: send cmd ...\n|dff58000| WARNING - Timeout at ahci_command:154!\n|dff58000| phys_free dff59c00 (detail=0xdff59bd0)\n|dff58000| phys_free dff59a00 (detail=0xdff59ba0)\n|dff58000| phys_free dff59900 (detail=0xdff59b70)\n|dff58000| phys_free dff61050 (detail=0xdff61020)\n\\dff58000/ End thread\nphys_free dff58000 (detail=0xdff59b40)\nAll threads complete.\n</code></pre> <ul> <li> <p>After OS boot: HDD is visible and usable under Debian</p> </li> <li> <p>After reboot: boot menu appears as quickly as usual. HDD entry appears in   boot menu:</p> </li> </ul> <pre><code>1. ata0-0: SATA SSD ATA-10 Hard-Disk (15272 MiBytes)\n2. AHCI/0: ST1000LM014-SSHD-8GB ATA-9 Hard-Disk (931 GiBytes)\n3. Payload [memtest]\n4. Payload [setup]\n</code></pre> <p>mPCIe1 behaves the same for both mPCIe -&gt; SATA converterts</p> </li> <li> <p>mPCIe2 without resistor</p> <ul> <li>HDD not detected neither in bootmenu nor in OS</li> </ul> </li> <li> <p>mPCIe2 with resistor</p> <ul> <li> <p>HDD not detected in bootmenu</p> </li> <li> <p>After cold boot there is boot menu entry, but cannot boot into OS from   mSATA or USB. When loading into OS it reboots after:</p> </li> </ul> <pre><code>[   12.306297] Clocksource tsc unst\n</code></pre> <ul> <li>then infinite coreboot loops:</li> </ul> <pre><code>phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff58000 (detail=0xdff59b40)\n/dff58000\\ Start thread\n|dff58000| AHCI/0: probing\n|dff58000| AHCI/0: link up\n|dff58000| AHCI/0: send cmd ...\n|dff5d000| send_cmd : read error (status=51 err=04)\n|dff5c000| set_address 0xdff61480\n|dff5e000| ehci_alloc_async_pipe 0xdff61590 0\n|dff5e000| phys_alloc zone=0xdff6df10 size=92 align=80 ret=dff59880 (detail=0xdff59b10)\n|dff5e000| ehci_send_pipe qh=0xdff59880 dir=0 data=0x00000000 size=0\nphys_alloc zone=0xdff6df10 size=68 align=10 ret=dff59830 (detail=0xdff59800)\nphys_alloc zone=0xdff6df10 size=1024 align=400 ret=dff59400 (detail=0xdff593d0)\nphys_alloc zone=0xdff6df10 size=256 align=100 ret=dff59200 (detail=0xdff593a0)\nphys_alloc zone=0xdff6df10 size=256 align=100 ret=dff59100 (detail=0xdff59370)\nphys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff59340)\n/dff57000\\ Start thread\n|dff57000| AHCI/1: probing\n|dff58000| AHCI/0: ... intbits 0x40000001, status 0x51 ...\n|dff58000| AHCI/0: ... finished, status 0x51, ERROR 0x4\n|dff58000| AHCI/0: send cmd ...\n|dff5d000| phys_alloc zone=0xdff6df18 size=44 align=10 ret=f0800 (detail=0xdff59310)\n|dff5d000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff590b0 (detail=0xdff59080)\n|dff5d000| ata0-0: SATA SSD ATA-10 Hard-Disk (15272 MiBytes)\n|dff5d000| Searching bootorder for: /pci@i0cf8/*@11/drive@0/disk@0\n|dff5d000| phys_alloc zone=0xdff6df10 size=24 align=10 ret=dff61000 (detail=0xdff59050)\n|dff5d000| Registering bootable: ata0-0: SATA SSD ATA-10 Hard-Disk (15272 MiBytes) (type:2 prio:6 data:f0800)\n|dff5d000| ata_detect resetresult=0000\n|dff5d000| powerup iobase=5010 st=50\n|dff5d000| powerup iobase=5010 st=0\n|dff5d000| ata_detect ata0-1: sc=55 sn=aa dh=b0\n|dff5d000| send_cmd : DRQ not set (status 00)\n\\dff5d000/ End thread\nphys_free dff5d000 (detail=0xdff612b0)\n|dff5c000| ehci_alloc_async_pipe 0xdff61480 0\n|dff5c000| phys_alloc zone=0xdff6df10 size=92 align=80 ret=dff5df80 (detail=0xdff612b0)\n|dff5c000| ehci_send_pipe qh=0xdff5df80 dir=0 data=0x00000000 size=0\nphys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff56000 (detail=0xdff5df50)\n/dff56000\\ Start thread\n|dff56000| Searching bootorder for: /pci@i0cf8/*@14,7\n\\dff56000/ End thread\nphys_free dff56000 (detail=0xdff5df50)\n|dff57000| AHCI/1: link down\n|dff58000| AHCI/0: ... intbits 0xffffffff, status 0x58 ...\n|dff58000| AHCI/0: ... finished, status 0x58, OK\n|dff58000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5df30 (detail=0xdff5df00)\n|dff58000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@0/disk@0\n|dff58000| AHCI/0: supported modes: udma 6, multi-dma 2, pio 4\n|dff58000| AHCI/0: Set transfer mode to UDMA-6\n|dff58000| AHCI/0: send cmd ...\n\n\ncoreboot-9cac328-dirty-4.0.1 Tue Oct  4 12:12:31 UTC 2016 starting...\n14-25-48Mhz Clock settings\nFCH_MISC_REG28 is 0x00400012\nFCH_MISC_REG40 is 0x000c4040\nBSP Family_Model: 00730f01\ncpu_init_detectedx = 00000000\nagesawrapper_amdinitreset() entry\n\nFch_Oem_config in INIT RESET\n</code></pre> </li> <li> <p>After setting CLK3 (GFXCLK) to be always on (just like it was done for    mPCIe1 and CLK3 before):</p> <ul> <li> <p>mPCIe2 without resistor behaves the same as mPCIe2 with resistor before this   change (coreboot loop)</p> </li> <li> <p>mPCIe2 with resistor behaves the same after change</p> </li> </ul> <p>so: turning CLK to be always on (to ignore CLK_IRQ) causes mPCIe to treat card without resistor as the one with resistor</p> </li> <li> <p>So there are two cases:</p> <ul> <li> <p>long coldboot (AHCI timeout in SeaBIOS) and no bootmenu entry for mPCIe1   (but after reboot it's OK)</p> </li> <li> <p>coreboot loop for mPCIe2</p> </li> </ul> </li> <li> <p>Connect HDD to SATA (J7)</p> <ul> <li>regular boot, bootmenu entry appears after cold or warmboot</li> <li>it is handled by IDE (ata.c) not AHCI (ahci.c) - when connected through   mPCIe converter it was handled by AHCI</li> </ul> </li> </ol> <p>Long boot log:</p> <pre><code>[2016-10-22 16:04:16] /dff57000\\ Start thread\n[2016-10-22 16:04:16] |dff57000| AHCI/1: probing\n[2016-10-22 16:04:16] |dff57000| AHCI/1: link up\n[2016-10-22 16:04:16] |dff57000| AHCI/1: send cmd ...\n[2016-10-22 16:04:48] |dff57000| WARNING - Timeout at ahci_command:154!\n[2016-10-22 16:04:48] |dff57000| AHCI/1: send cmd ...\n[2016-10-22 16:05:20] |dff57000| WARNING - Timeout at ahci_command:154!\n[2016-10-22 16:05:20] |dff57000| phys_free dff5a400 (detail=0xdff5a3d0)\n[2016-10-22 16:05:20] |dff57000| phys_free dff5a200 (detail=0xdff5a3a0)\n[2016-10-22 16:05:20] |dff57000| phys_free dff5a100 (detail=0xdff5a370)\n[2016-10-22 16:05:20] |dff57000| phys_free dff5ac50 (detail=0xdff5ac20)\n[2016-10-22 16:05:20] \\dff57000/ End thread\n[2016-10-22 16:05:20] phys_free dff57000 (detail=0xdff5a340)\n</code></pre> <p>boot loop, reboots there:</p> <pre><code>[2016-10-22 15:57:55] /dff57000\\ Start thread\n[2016-10-22 15:57:55] |dff57000| AHCI/1: probing\n[2016-10-22 15:57:55] |dff57000| AHCI/1: link up\n[2016-10-22 15:57:55] |dff57000| AHCI/1: send cmd ...\n[2016-10-22 15:57:56] |dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ...\n[2016-10-22 15:57:56] |dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4\n[2016-10-22 15:57:56] |dff57000| AHCI/1: send cmd ...\n[2016-10-22 15:57:56] |dff57000| AHCI/1: ... intbits 0xffffffff, status 0x58 ...\n[2016-10-22 15:57:56] |dff57000| AHCI/1: ... finished, status 0x58, OK\n[2016-10-22 15:57:56] |dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae60 (detail=0xdff5ae30)\n[2016-10-22 15:57:56] |dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@1/disk@0\n[2016-10-22 15:57:56] |dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4\n[2016-10-22 15:57:56] |dff57000| AHCI/1: Set transfer mode to UDMA-6\n[2016-10-22 15:57:56] |dff57000| AHCI/1: send cmd ...\n[2016-10-22 15:57:56] |dff57000| AHCI/1: ... intbits 0xffffffff, status 0x58 ...\n[2016-10-22 15:57:56] |dff57000| AHCI/1: ... finished, status 0x58, OK\n\n// REBOOTS HERE\n\n[2016-10-22 15:58:03] coreboot-44ac0ed-dirty-4.0.1 sat oct 22 13:52:29 utc 2016 starting...\n[2016-10-22 15:58:03] 14-25-48mhz clock settings\n[2016-10-22 15:58:03] fch_misc_reg28 is 0x00400012\n[2016-10-22 15:58:03] fch_misc_reg40 is 0x000c4040\n[2016-10-22 15:58:03] bsp family_model: 00730f01\n[2016-10-22 15:58:03] cpu_init_detectedx = 00000000\n[2016-10-22 15:58:03] agesawrapper_amdinitreset() entry\n</code></pre>"},{"location":"debug/iommu/","title":"AMD I/O Virtualization Technology (IOMMU)","text":"<p>This document is related to changes submitted to mainline coreboot.</p>"},{"location":"debug/iommu/#status","title":"Status","text":""},{"location":"debug/iommu/#24072018","title":"24/07/2018","text":"<ul> <li>patches under redesign in upstream</li> <li>planned firmware release to include patches v4.8.0.3</li> <li>tested on Xen 4.8.3 and Debian stretch with Linux 4.14.50</li> <li><code>xl dmesg</code> dump with apic and iommu verbose here</li> <li><code>CPUX: No irq handler for vector e7</code> log is still visible, but doesn't affect boot process. We look for solution for that log here</li> <li>platform survived 100x reboots to Xen without issue</li> <li>IOMMU groups are probably not assigned correctly to devices e.g. all NICs are in   one group - tl;dr: IOMMU groups</li> <li>after booting Debian (Linux 4.14.50) as dom0 I'm getting: <pre><code>[    0.827436] AMD IOMMUv2 functionality not available on this system\n</code></pre></li> <li><code>xl pci-assignable-list</code> hangs? - machine is responsive e.g Ctrl-C works</li> <li>Assigning device also hangs? - machine is responsive e.g Ctrl-C works</li> </ul> <pre><code>root@apu2:~# xl pci-assignable-add 00:10.0\n[  447.867457] xhci_hcd 0000:00:10.0: remove, state 1\n[  447.867520] usb usb3: USB disconnect, device number 1\n[  447.867538] usb 3-1: USB disconnect, device number 2\n[  447.868530] usb 3-2: USB disconnect, device number 3\n[  447.870692] xhci_hcd 0000:00:10.0: USB bus 3 deregistered\n[  447.870752] xhci_hcd 0000:00:10.0: remove, state 4\n[  447.870805] usb usb2: USB disconnect, device number 1\n[  447.989825] xhci_hcd 0000:00:10.0: USB bus 2 deregistered\n</code></pre>"},{"location":"debug/iommu/#questions","title":"Questions","text":"<ul> <li>why in dom0 I can't see IOMMU groups? Is this related to xen vs kvm? - comparison of <code>lsmod</code> indicate that when no Xen KVM modules take over and groups assignment is probably related with KVM drivers since there is no information about groups in AMD IOMMU spec.</li> <li>are we sure that IVRS contain correct entries for bridges?</li> </ul>"},{"location":"debug/iommu/#06052018","title":"06/05/2018","text":"<ul> <li>patches submitted upstream</li> <li>patches included in v4.6.9 of PC Engines firmware release</li> <li>tested on Xen 4.8 with Linux 4.14.33: <pre><code>(XEN) AMD-Vi: Disabled HAP memory map sharing with IOMMU\n(XEN) AMD-Vi: IOMMU Extended Features:\n(XEN)  - Peripheral Page Service Request\n(XEN)  - Guest Translation\n(XEN)  - Invalidate All Command\n(XEN)  - Guest APIC supported\n(XEN)  - Performance Counters\n(XEN) AMD-Vi: IOMMU 0 Enabled.\n</code></pre></li> </ul> <p>NOTE: feature currently is not stable and hangs on Xen kernel 29/100 boots.:</p> <pre><code>(XEN) CPU1: No irq handler for vector e7 (IRQ -2147483648)\n(XEN) CPU2: No irq handler for vector e7 (IRQ -2147483648)\n&lt;hang&gt;\n</code></pre>"},{"location":"debug/iommu/#how-to-check-features-with-xen","title":"How to check features with Xen","text":"<p>Please read this blog post</p>"},{"location":"debug/iommu/#how-to-test-iommu-features","title":"How to test IOMMU features","text":""},{"location":"debug/iommu/#pce-pass-through","title":"PCE pass-through","text":"<p>TBD</p>"},{"location":"debug/iommu/#debugging","title":"Debugging","text":"<p>Unfortunately previous work was not stable and according to comments from Kyosti correct implementation should rely not on AGESA returned values, but on custom IVRS generated in coreboot - this is approach that Timothy took developing initial support.</p> <p>Dump of IVRS from AGESA and custom made in above mentioned implemntation:</p> <pre><code>Dump AGESA IVRS:\nivrs_agesa-&gt;header.signature: IVRSx\nivrs_agesa-&gt;header.length: 0x78\nivrs_agesa-&gt;header.revision: 0x2\nivrs_agesa-&gt;header.checksum: 0x9a\nivrs_agesa-&gt;header.oem_id: AMD   AGESA\nivrs_agesa-&gt;header.oem_table_id: AGESA\nivrs_agesa-&gt;header.oem_revision: 0x1\nivrs_agesa-&gt;header.asl_compiler_id: AMD\nivrs_agesa-&gt;header.asl_compiler_revision: 0x0\nivrs_agesa-&gt;iv_info: 0x203040\nivrs_agesa-&gt;ivhd.type: 0x10\n/* In flags only HtTuneEn is disabled other enabled */\nivrs_agesa-&gt;ivhd.flags: 0xfe\nivrs_agesa-&gt;ivhd.length: 0x48\nivrs_agesa-&gt;ivhd.device_id: 0x2\nivrs_agesa-&gt;ivhd.capability_offset: 0x40\nivrs_agesa-&gt;ivhd.iommu_base_low: 0xf7f00000\nivrs_agesa-&gt;ivhd.iommu_base_high: 0x0\nivrs_agesa-&gt;ivhd.pci_segment_group: 0x0\nivrs_agesa-&gt;ivhd.iommu_info: 0x1300\n/* According to datasheet, if IVinfo[EFRSup] = 0, then IOMMU Feature Info is\n * reserved. So despite AGESA set IOMMU Feature Info it should be ignored.\n * GTSup - Guest Translation supported: enabled\n * IASup - INALIDATE_IOMMU_ALL supported: enabled\n * PASmax - maxiumum PASID vaule supported: 0b01000 -&gt; 8\n * PNCounters - number of performance counters: 0b010 -&gt; 2\n * PNBanks - number of performance counter banks: 0b0000010 -&gt; 2\n */\nivrs_agesa-&gt;ivhd.iommu_feature_info: 0x48824\n\nDump custom IVRS:\nivrs-&gt;header.signature: IVRS\nivrs-&gt;header.length: 0x100\nivrs-&gt;header.revision: 0x1\nivrs-&gt;header.checksum: 0xbb\nivrs-&gt;header.oem_id: CORE  COREBOOT\nivrs-&gt;header.oem_table_id: COREBOOT\nivrs-&gt;header.oem_revision: 0x0\nivrs-&gt;header.asl_compiler_id: CORE\nivrs-&gt;header.asl_compiler_revision: 0x0\nivrs-&gt;iv_info: 0x203040\nivrs-&gt;ivhd.type: 0x10\n/* In flags HtTuneEn, Coherent, PreFSup and PPRSup are disabled other enabled */\nivrs-&gt;ivhd.flags: 0x1e\nivrs-&gt;ivhd.length: 0xd0\nivrs-&gt;ivhd.device_id: 0x2\nivrs-&gt;ivhd.capability_offset: 0x40\n/ * why we have so different base address? */\nivrs-&gt;ivhd.iommu_base_low: 0xfeb00000\nivrs-&gt;ivhd.iommu_base_high: 0x0\nivrs-&gt;ivhd.pci_segment_group: 0x0\nivrs-&gt;ivhd.iommu_info: 0x1300\n/* Everything disabled */\nivrs-&gt;ivhd.iommu_feature_info: 0x0\n</code></pre>"},{"location":"debug/iommu/#booting-without-iommu-patches","title":"Booting without IOMMU patches","text":"<p><code>/proc/iomem</code> doesn't show any region assigned to <code>amd_iommu</code> as it is with patches applied. This means we don't have other information about IOMMU base address instead of this returned by AGESA. We can assign manual address as it was done in initial patch, but this makes Linux kernel not bootable.</p>"},{"location":"debug/iommu/#try-minimal-changes-only-iommu-bese-address","title":"Try minimal changes - only IOMMU bese address","text":"<p>Minimal change which, just use IOMMU base low and high returned by AGESA also not work correctly. Kernel crashing with following log:</p> <pre><code>[    1.064229] AMD-Vi: IOMMU performance counters supported\n[    1.069579] BUG: unable to handle kernel paging request at ffffaffc4065c000\n[    1.073554] IP: iommu_go_to_state+0xf8a/0x1260\n[    1.073554] PGD 12a11f067 P4D 12a11f067 PUD 12a120067 PMD 129b69067 PTE 0\n[    1.073554] Oops: 0000 [#1] SMP NOPTI\n[    1.073554] Modules linked in:\n[    1.073554] CPU: 1 PID: 1 Comm: swapper/0 Not tainted 4.14.50 #13\n[    1.073554] Hardware name: PC Engines apu2/apu2, BIOS 4.8-1174-gf12b3046f0-d2\n[    1.073554] task: ffff8d5d69b9f040 task.stack: ffffaffc40648000\n[    1.073554] RIP: 0010:iommu_go_to_state+0xf8a/0x1260\n[    1.073554] RSP: 0018:ffffaffc4064be28 EFLAGS: 00010282\n[    1.073554] RAX: ffffaffc40658000 RBX: ffff8d5d69bae000 RCX: ffffffff99e57b88\n[    1.073554] RDX: 0000000000000000 RSI: 0000000000000092 RDI: 0000000000000246\n[    1.073554] RBP: 0000000000000040 R08: 0000000000000001 R09: 0000000000000170\n[    1.073554] R10: 0000000000000000 R11: ffffffff9a435e2d R12: 0000000000000000\n[    1.073554] R13: ffffffff9a29a830 R14: 0000000000000000 R15: 0000000000000000\n[    1.073554] FS:  0000000000000000(0000) GS:ffff8d5d6ec80000(0000) knlGS:00000\n[    1.073554] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[    1.073554] CR2: ffffaffc4065c000 CR3: 000000010fa0a000 CR4: 00000000000406e0\n[    1.073554] Call Trace:\n[    1.073554]  ? set_debug_rodata+0x11/0x11\n[    1.073554]  amd_iommu_init+0x11/0x89\n[    1.073554]  pci_iommu_init+0x16/0x3f\n[    1.073554]  ? e820__memblock_setup+0x60/0x60\n[    1.073554]  do_one_initcall+0x51/0x190\n[    1.073554]  ? set_debug_rodata+0x11/0x11\n[    1.073554]  kernel_init_freeable+0x16b/0x1ec\n[    1.073554]  ? rest_init+0xb0/0xb0\n[    1.073554]  kernel_init+0xa/0xf7\n[    1.073554]  ret_from_fork+0x22/0x40\n[    1.073554] Code: d2 31 f6 48 89 df e8 d8 15 02 ff 85 c0 75 d1 48 8b 44 24 2\n[    1.073554] RIP: iommu_go_to_state+0xf8a/0x1260 RSP: ffffaffc4064be28\n[    1.073554] CR2: ffffaffc4065c000\n[    1.073554] ---[ end trace 44588f98aa7c7c0b ]---\n[    1.255973] Kernel panic - not syncing: Attempted to kill init! exitcode=0x09\n[    1.255973]\n[    1.259934] ---[ end Kernel panic - not syncing: Attempted to kill init! exi9\n</code></pre> <p>If this is related to performance countres good idea could be to copy its configuration from AGESA.</p>"},{"location":"debug/iommu/#try-whole-ivhd-from-agesa-and-device-entries-from-initial-commit","title":"Try whole IVHD from AGESA and device entries from initial commit","text":"<p>This version leads to hang after couple reboots. It was not tested but we suspect similar effect to mentioned above in Status for 06/05/2018.</p>"},{"location":"debug/iommu/#performance-counters-from-agesa","title":"Performance counters from AGESA","text":"<p>This seems to work, platform survived 100x reboots to Xen without even one issue.</p>"},{"location":"debug/iommu/#iommu-groups","title":"IOMMU groups","text":"<p>It happened that in firmware based on v8 IOMMU groups in Linux 4.14.50 seem to be assigned incorrectly. According to Arch Wiki groups is smallest unit in which devices can be assigned to guests.</p> <p>I'm not sure if this expected, but in Xen 4.8 with the same kernel driver is not loaded and there are no IOMMU groups present. <code>dmesg</code> complain:</p> <pre><code>[    0.827423] AMD IOMMUv2 driver by Joerg Roedel &lt;jroedel@suse.de&gt;\n[    0.827436] AMD IOMMUv2 functionality not available on this system\n</code></pre> <p>Difference between kernels is parameter provided on boot <code>amd_iommu_dump=1</code> which is present in plain 4.14.50 without Xen.</p> <p>Ideally we would like to have each device in other group. What we see right now is:</p> <pre><code>IOMMU Group 0 00:00.0 Host bridge [0600]: Advanced Micro Devices, Inc. [AMD] Device [1022:1566]\nIOMMU Group 1 00:02.0 Host bridge [0600]: Advanced Micro Devices, Inc. [AMD] Device [1022:156b]\nIOMMU Group 1 00:02.2 PCI bridge [0604]: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 [1022:1439]\nIOMMU Group 1 00:02.3 PCI bridge [0604]: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 [1022:1439]\nIOMMU Group 1 00:02.4 PCI bridge [0604]: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 [1022:1439]\nIOMMU Group 1 01:00.0 Ethernet controller [0200]: Intel Corporation I210 Gigabit Network Connection [8086:157b] (rev 03)\nIOMMU Group 1 02:00.0 Ethernet controller [0200]: Intel Corporation I210 Gigabit Network Connection [8086:157b] (rev 03)\nIOMMU Group 1 03:00.0 Ethernet controller [0200]: Intel Corporation I210 Gigabit Network Connection [8086:157b] (rev 03)\nIOMMU Group 2 00:08.0 Encryption controller [1080]: Advanced Micro Devices, Inc. [AMD] Device [1022:1537]\nIOMMU Group 3 00:10.0 USB controller [0c03]: Advanced Micro Devices, Inc. [AMD] FCH USB XHCI Controller [1022:7814] (rev 11)\nIOMMU Group 4 00:11.0 SATA controller [0106]: Advanced Micro Devices, Inc. [AMD] FCH SATA Controller [IDE mode] [1022:7800] (rev 39)\nIOMMU Group 5 00:13.0 USB controller [0c03]: Advanced Micro Devices, Inc. [AMD] FCH USB EHCI Controller [1022:7808] (rev 39)\nIOMMU Group 6 00:14.0 SMBus [0c05]: Advanced Micro Devices, Inc. [AMD] FCH SMBus Controller [1022:780b] (rev 42)\nIOMMU Group 6 00:14.3 ISA bridge [0601]: Advanced Micro Devices, Inc. [AMD] FCH LPC Bridge [1022:780e] (rev 11)\nIOMMU Group 6 00:14.7 SD Host controller [0805]: Advanced Micro Devices, Inc. [AMD] FCH SD Flash Controller [1022:7813] (rev 01)\nIOMMU Group 7 00:18.0 Host bridge [0600]: Advanced Micro Devices, Inc. [AMD] Device [1022:1580]\nIOMMU Group 7 00:18.1 Host bridge [0600]: Advanced Micro Devices, Inc. [AMD] Device [1022:1581]\nIOMMU Group 7 00:18.2 Host bridge [0600]: Advanced Micro Devices, Inc. [AMD] Device [1022:1582]\nIOMMU Group 7 00:18.3 Host bridge [0600]: Advanced Micro Devices, Inc. [AMD] Device [1022:1583]\nIOMMU Group 7 00:18.4 Host bridge [0600]: Advanced Micro Devices, Inc. [AMD] Device [1022:1584]\nIOMMU Group 7 00:18.5 Host bridge [0600]: Advanced Micro Devices, Inc. [AMD] Device [1022:1585]\n</code></pre> <p>What bad here is that NICs are all in group 1. When we compared logs from community it happen that some users with older patches had correct assignement, for example here:</p> <pre><code>[    2.047787] iommu: Adding device 0000:00:00.0 to group 0\n[    2.053502] iommu: Adding device 0000:00:02.0 to group 1\n[    2.059190] iommu: Adding device 0000:00:02.2 to group 2\n[    2.064797] iommu: Adding device 0000:00:02.3 to group 3\n[    2.070442] iommu: Adding device 0000:00:02.4 to group 4\n[    2.076098] iommu: Adding device 0000:00:02.5 to group 5\n[    2.081747] iommu: Adding device 0000:00:08.0 to group 6\n[    2.087380] iommu: Adding device 0000:00:10.0 to group 7\n[    2.093009] iommu: Adding device 0000:00:11.0 to group 8\n[    2.098683] iommu: Adding device 0000:00:13.0 to group 9\n[    2.104399] iommu: Adding device 0000:00:14.0 to group 10\n[    2.109893] iommu: Adding device 0000:00:14.3 to group 10\n[    2.115385] iommu: Adding device 0000:00:14.7 to group 10\n[    2.121174] iommu: Adding device 0000:00:18.0 to group 11\n[    2.126668] iommu: Adding device 0000:00:18.1 to group 11\n[    2.132163] iommu: Adding device 0000:00:18.2 to group 11\n[    2.137652] iommu: Adding device 0000:00:18.3 to group 11\n[    2.143126] iommu: Adding device 0000:00:18.4 to group 11\n[    2.148629] iommu: Adding device 0000:00:18.5 to group 11\n[    2.154441] iommu: Adding device 0000:01:00.0 to group 12\n[    2.160283] iommu: Adding device 0000:02:00.0 to group 13\n[    2.166062] iommu: Adding device 0000:03:00.0 to group 14\n[    2.171770] iommu: Adding device 0000:04:00.0 to group 15\n</code></pre> <p>There are many great resources to learn about IOMMU groups:</p> <ul> <li>A Deep-dive into IOMMU Groups</li> <li>IOMMU Groups  What You Need to Consider</li> </ul>"},{"location":"debug/iommu/#playing-with-xl-pci-assignable-","title":"Playing with xl pci-assignable-*","text":"<p>All commands from this family hangs, trying to enable pass-through using sysfs seem to finish without problems. Didn't tested that yet.</p>"},{"location":"debug/iommu/#todo","title":"TODO:","text":"<ul> <li>compare device entries</li> <li>enable EFRSup</li> <li>try various sets of features and capabilities</li> </ul>"},{"location":"debug/mpcie1_mpcie2_ethernet_card/","title":"Problems with APU2 when using Mini PCI-Express Dual Gigabit Ethernet Controller Card","text":""},{"location":"debug/mpcie1_mpcie2_ethernet_card/#problems","title":"Problems","text":"<ol> <li> <p>When Ethernet Controller Card is placed in mPCIe1 slot (J14) placed extension cards is recognized by OS but standard Ethernet output placed on APU2 board can't receive correct IP adress. So it doesn't work correct.</p> </li> <li> <p>When Ethernet Controller Card is placed in mPCIe2 slot (J13) 2 additional Ethernet controller are not visible in OS. Standard Ethernet output placed on APU2 board works well.</p> </li> </ol> <p>Device detection has been checked using <code>ip a</code>, <code>lspci</code> and <code>dmesg</code>. The results are shown in the table below.</p> <pre><code>    +-----+-----------------------------+\n    | dev |          visibility         |\n    +-----+--------------+--------------+\n    | eth | mPCIe1 (J14) | mPCIe2 (J13) |\n    +-----+--------------+--------------+\n    |  0  |     yes      |     yes      |\n    |  1  |     yes      |     yes      |\n    |  2  |     yes      |     yes      |\n    |  3  |     yes      |     no       |\n    |  4  |     yes      |     no       |\n    +--------------------+--------------+\n</code></pre>"},{"location":"debug/mpcie1_mpcie2_ethernet_card/#solution-of-the-problems","title":"Solution of the problems","text":"<p>Changing the value from <code>0xA</code> to <code>0xF</code> of the part of variable named <code>data</code> (showed under the following line) fixed the problems described in this file. This modification enables the clock regardless of the <code>CLKREQ</code> line state.</p>"},{"location":"debug/mpcie1_mpcie2_ethernet_card/#mini-pci-express-dual-gigabit-ethernet-controller-card-elements","title":"Mini PCI-Express Dual Gigabit Ethernet Controller Card elements","text":"<p>On a board are located PCI bridge ASMedia Technology Inc. Device 1182 and 2 Ethernet controllers Realtek Semiconductor Co., Ltd. RTL8111/8168/8411.</p>"},{"location":"debug/mpcie1_mpcie2_ethernet_card/#booting-lags","title":"Booting lags","text":"<p>When Ethernet Controller is placed in the mPCIe1 slot (J14) and booting is at network devices setup time occurs long lag. In this case <code>eth0</code> device can not get correct IP. After this next booting processes take same normal time. The reason may be multiple failed attempts to obtain an IP address. That problem doesn't exist for the mPCIe2 slot (J13).</p> <p>Reason of that was time out value for DHCP client set to few minutes. After disabling DHCP client for <code>eth0</code> interface booting lag doesn't occurs. Mentioned booting lag is not a bug.</p>"},{"location":"debug/mpcie1_mpcie2_ethernet_card/#boot-logs-comparison","title":"Boot logs comparison","text":"<p>Level of the detail of booting logs was set at <code>6:DEBUG</code>.</p> <p>The full list varies between logs is placed at the end file.</p> <p>The most suspicious difference in logs is placed below.</p> <p>For <code>mPCIe2</code>:</p> <p><pre><code>    PCI: Static device PCI: 00:02.5 not found, disabling it.\n</code></pre> For <code>mPCIe1</code>:</p> <pre><code>    PCI: 00:02.5 subordinate bus PCI Express\n    PCI: 00:02.5 [1022/1439] enabled\n</code></pre> <p>This suggests a problem with device recognition when Ethernet Controller is placed in the mPCIe1 slot (J14). The reason for this can be concurent access of devices or incorrectly configured interrupt system.</p> <p>Surrounding the log of the case when Ethernet Controller is placed in the mPCIe1 slot (J14).</p> <pre><code>    scan_bus: scanning of bus CPU_CLUSTER: 0 took 15987 usecs\n    PCI: pci_scan_bus for bus 00\n    PCI: 00:00.0 [1022/1566] enabled\n    PCI: 00:02.0 [1022/156b] enabled\n    PCI: Static device PCI: 00:02.1 not found, disabling it.\n    PCI: 00:02.2 subordinate bus PCI Express\n    PCI: 00:02.2 [1022/1439] enabled\n    PCI: 00:02.3 subordinate bus PCI Express\n    PCI: 00:02.3 [1022/1439] enabled\n    PCI: 00:02.4 subordinate bus PCI Express\n    PCI: 00:02.4 [1022/1439] enabled\n    PCI: Static device PCI: 00:02.5 not found, disabling it.\n    PCI: 00:08.0 [1022/1537] enabled\n    hudson_enable()\n    PCI: 00:10.0 [1022/7814] enabled\n    hudson_enable()\n</code></pre> <p>Situation occurs at the moment when PCI bus is being scanned.</p>"},{"location":"debug/mpcie1_mpcie2_ethernet_card/#checked-potencial-reasons","title":"Checked potencial reasons","text":"<p>Several possible reasons for problems have been checked, but the problems continued.</p> <ol> <li> <p>Tried to modify <code>apu2/PlatformGnbPcie.c</code> file like below.</p> <pre><code>    -PCIE_ENGINE_DATA_INITIALIZER (PciePortEngine, 4, 7),\n    +PCIE_ENGINE_DATA_INITIALIZER (PciePortEngine, 4, 4),\n</code></pre> <p>After modification system worked as before. The problems still occur.</p> </li> <li> <p>Measured voltages at <code>CLKREQ4#</code>and <code>PE4RST#</code> pins. All the time there was occurring     high states for listed pins.</p> <p>Voltage at <code>CLKREQ4#</code> was about 0.02 V lower than expansion Ethernet controller card power supply voltage and voltage at <code>PE4RST#</code> was about 0.02 V higher than Ethernet controller card power supply voltage. The difference can be considered a measurement error.</p> </li> </ol>"},{"location":"debug/mpcie1_mpcie2_ethernet_card/#diff-files-from-boot-logs","title":"Diff files from boot logs","text":"<p>Full diff files from APU2 boot logs between Ethernet Controller placed in the mPCIe1 slot (J14) and it placed in mPCIe2 slot (J13):</p> <ul> <li> <p>diff of boot logs</p> </li> <li> <p>diff of ip a command logs</p> </li> <li> <p>diff of lspcie command logs</p> </li> <li> <p>diff of lsusb command logs</p> </li> </ul>"},{"location":"debug/mpcie2/","title":"ASM1061 in the J13 slot problems","text":""},{"location":"debug/mpcie2/#rationale","title":"Rationale","text":"<p>mPCIe 2 slot (J13) on APU2 devices has problems, when ASM1061 controllers are used. With disk connected, device enters bootloop and never boots. When no disks are connected, system boots normally and controller is detectable using <code>lspci</code>.</p> <p>Another problem is, that normally ASM1061 contoller on the mPCIe board like, e.g. this Delock adapter, is not detectable in mPCIe 2 slot at all. One need to modify the <code>apu2/romstage.c</code> file and enable always on Clock for GFX PCIE slot, like this (in <code>cache_as_ram_main</code> function, after clock are set, see here for reference):</p> <pre><code>        data = *((u32 *)(ACPI_MMIO_BASE + MISC_BASE + FCH_MISC_REG04));\n\n        data &amp;= 0xFFFFFF0F;\n        data |= 0xF &lt;&lt; (1 * 4); // CLKREQ GFX always on.\n\n        *((u32 *)(ACPI_MMIO_BASE + MISC_BASE + FCH_MISC_REG04)) = data;\n</code></pre> <p>See in BKDG paragraph 3.26.11: <code>MISCx04 ClkOutputCntrl</code> register</p>"},{"location":"debug/mpcie2/#symptoms","title":"Symptoms","text":"<p>Currently after connecting disk - enters boot loop.</p> <p>Problem occurs in SeaBIOS's AHCI driver. <code>ahci_port_detect</code> routine/thread.</p> <p>AHCI reports <code>PORT_IRQ_IF_ERR</code> or <code>PORT_IRQ_IF_NONFATAL</code> errors:</p> <p>According to AHCI spec, paragraph 3.3.5</p> <pre><code>|cff47000| AHCI/1: ... intbits 0x8000002, status 0x58 ..\n\n... or ...\n\n|cff47000| AHCI/1: ... intbits 0x40000001, status 0x51 ..\n</code></pre> <p>Reset happens just after setting transfer mode command is sent. I've tried setting UDMA, MultiDMA or PIO modes and it's still the same (reset).</p> <pre><code>|cff47000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4\n|cff47000| AHCI/1: Set transfer mode to default PIO\n|cff47000| AHCI/1: send cmd ...\n|cff47000| AHCI/1: ... intbits 0x1, status 0x50, err 0x0 ...\n|cff47000| AHCI/1: ... finished, status 0x50, OK\n\n# reset happens always here\n</code></pre>"},{"location":"debug/mpcie2/#carried-out-tests","title":"Carried out tests","text":"<p>Testing ASM1061 was performed for 2 types of Delock 95233 modules: - module with soldered R58\u00b9 resistor - modified module without R58\u00b9 resistor</p> <p>(1) R58 resistor is placed next to CON1 connector</p> <p>Test results are the same for both types of modules and as follows:</p> <ol> <li> <p>Delock module is attached to mPCIe2 slot and SATA disk is connected before     platform boot process.</p> <p>In that case boot process went into 'infinite boot loop'. It went to payload menu, hanged and after few seconds performed reboot automatically. During booting, user can't do any action. There are no response from apu platform to any button pressing. Only option to went through boot process without troubles is to disconnect SATA disk and reboot platform again.</p> </li> <li> <p>Delock module is attached to mPCIe2 slot, but no SATA disk is connected     before and during platform boot process.</p> <p>Boot process goes smoothly to seaBIOS menu and OS booting was performed correctly also. Under Debian OS, ASM controller is detected (check it with e.g. <code>dmesg | grep \"ahci\"</code>.</p> <p><pre><code>root@debian:~# dmesg | grep \"ahci\"\n[    9.370761] ahci 0000:00:11.0: version 3.0\n[    9.371737] ahci 0000:00:11.0: AHCI 0001.0300 32 slots 2 ports 6 Gbps 0x3 impl SATA mode\n[    9.380220] ahci 0000:00:11.0: flags: 64bit ncq sntf ilck pm led clo pmp fbs pio slum part ccc\n[    9.389294] ahci 0000:00:11.0: both AHCI_HFLAG_MULTI_MSI flag set and custom irq handler implemented\n[    9.401327] scsi host0: ahci\n[    9.407101] scsi host1: ahci\n[    9.432821] ahci 0000:01:00.0: SSS flag set, parallel bus scan disabled\n[    9.564657] ahci 0000:01:00.0: AHCI 0001.0200 32 slots 2 ports 6 Gbps 0x3 impl SATA mode\n[    9.572796] ahci 0000:01:00.0: flags: 64bit ncq sntf stag led clo pmp pio slum part ccc sxs\n[    9.583302] scsi host2: ahci\n[    9.586835] scsi host3: ahci\n</code></pre> Ahci 0000:01:00.0 is Dealock 95233 SATA controller.</p> <p>After plugged-in SATA disk (no matter to what SATA port), configuration problems appeared. Although, OS was trying to communicate with SATA, some warnings and errors occurred. Example log is shown below.</p> <pre><code>[   68.190693] ata3: exception Emask 0x10 SAct 0x0 SErr 0x4040000 action 0xe frozen\n[   68.198142] ata3: irq_stat 0x00000040, connection status changed\n[   68.204199] ata3: SError: { CommWake DevExch }\n[   68.208743] ata3: hard resetting link\n[   73.826743] ata3: SATA link up 3.0 Gbps (SStatus 123 SControl 300)\n[   73.839192] ata3.00: ATA-8: ST500LM012 HN-M500MBB, 2AR10002, max UDMA/133\n[   73.846011] ata3.00: 976773168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA\n[   73.859579] ata3.00: configured for UDMA/133\n[   73.863903] ata3: EH complete\n[   73.867515] scsi 2:0:0:0: Direct-Access     ATA      ST500LM012 HN-M5 0002 PQ: 0 ANSI: 5\n[   73.876569] sd 2:0:0:0: Attached scsi generic sg1 type 0\n[   73.876592] sd 2:0:0:0: [sdb] 976773168 512-byte logical blocks: (500 GB/466 GiB)\n[   73.876597] sd 2:0:0:0: [sdb] 4096-byte physical blocks\n[   73.876665] sd 2:0:0:0: [sdb] Write Protect is off\n[   73.876827] sd 2:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA\n[   73.941291]  sdb: sdb1 sdb2 &lt; sdb5 &gt;\n[   73.946498] sd 2:0:0:0: [sdb] Attached SCSI disk\n</code></pre> </li> </ol> <p>Pay attention that some data is sent correctly between controller and OS (e.g. HDD disk information or configuration). However, platform hanged in that stage and didn't respond to any command. Therefore, faultless connection can't be established and HDD disk plugged via Delock module can't be treated as working.</p>"},{"location":"debug/mpcie2/#possible-reasons","title":"Possible reasons","text":"<p>It looks like problem can be considered rather as hardware. Also it is Delock 95233 module/ASM1061 controller problem. Tested SATA disk works fine when attached to SATA connector on apu2 board. After searching solutions, 2 main appears as most useful:</p> <ul> <li> <p>Power supply is not sufficient and drops out to too low level. However, tested disk was powered with around 5V. Problems with power supply drop out occurred in some  SATA disk, but mostly are related to 12V disks</p> </li> <li> <p>Low quality cables and connectors on Delock module</p> </li> </ul> <p>Both solutions haven't been tested yet. But it looks like they should be considered and carried out.</p>"},{"location":"debug/mpcie_ethernet/","title":"Mpcie ethernet","text":""},{"location":"debug/mpcie_ethernet/#intro","title":"Intro","text":"<p>Device under test is mPCIe extension card with double Ethernet interfaces exposed. Their MAC addresses are:</p> <pre><code>00:e0:4c:68:05:c8\n00:e0:4c:68:05:c9\n</code></pre> <ul> <li> <p>Platform is APU2C4</p> </li> <li> <p>Firmware is   coreboot v4.5.8   from PC engines fork.</p> </li> <li> <p>Operating system is Voyage Linux. <code>uname -a</code> output:</p> </li> </ul> <pre><code>Linux voyage 3.16.7-ckt9-voyage #1 SMP Wed Apr 22 23:04:57 HKT 2015 x86_64 GNU/Linux\n</code></pre>"},{"location":"debug/mpcie_ethernet/#mpcie-slot-1-slot","title":"mPCIe slot 1 slot","text":""},{"location":"debug/mpcie_ethernet/#device-identification","title":"Device identification","text":"<p>Ethernet interfaces from extension card are correctly detected:</p> <pre><code>ip a\n</code></pre> <p>output:</p> <pre><code>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: eth0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc pfifo_fast state DOWN group default qlen 1000\n    link/ether 00:e0:4c:68:05:c8 brd ff:ff:ff:ff:ff:ff\n    inet 10.0.0.10/24 brd 10.0.0.255 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::2e0:4cff:fe68:5c8/64 scope link\n       valid_lft forever preferred_lft forever\n3: eth1: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc pfifo_fast state DOWN group default qlen 1000\n    link/ether 00:e0:4c:68:05:c9 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.0.120/24 brd 192.168.0.255 scope global eth1\n       valid_lft forever preferred_lft forever\n    inet6 fe80::2e0:4cff:fe68:5c9/64 scope link\n       valid_lft forever preferred_lft forever\n4: eth2: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq state DOWN group default qlen 1000\n    link/ether 00:0d:b9:43:3f:bc brd ff:ff:ff:ff:ff:ff\n    inet6 fe80::20d:b9ff:fe43:3fbc/64 scope link\n       valid_lft forever preferred_lft forever\n5: eth3: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq state DOWN group default qlen 1000\n    link/ether 00:0d:b9:43:3f:bd brd ff:ff:ff:ff:ff:ff\n    inet 192.168.0.108/24 brd 192.168.0.255 scope global eth3\n       valid_lft forever preferred_lft forever\n    inet6 fe80::20d:b9ff:fe43:3fbd/64 scope link\n       valid_lft forever preferred_lft forever\n6: eth4: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:0d:b9:43:3f:be brd ff:ff:ff:ff:ff:ff\n    inet 192.168.0.112/24 brd 192.168.0.255 scope global eth4\n       valid_lft forever preferred_lft forever\n    inet6 fe80::20d:b9ff:fe43:3fbe/64 scope link\n       valid_lft forever preferred_lft forever\n</code></pre> <p>output:</p> <pre><code>lspci\n</code></pre> <pre><code>00:00.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1566\n00:02.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 156b\n00:02.2 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1\n00:02.3 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1\n00:02.4 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1\n00:02.5 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1\n00:08.0 Encryption controller: Advanced Micro Devices, Inc. [AMD] Device 1537\n00:10.0 USB controller: Advanced Micro Devices, Inc. [AMD] FCH USB XHCI Controller (rev 11)\n00:11.0 SATA controller: Advanced Micro Devices, Inc. [AMD] FCH SATA Controller [IDE mode] (rev 39)\n00:13.0 USB controller: Advanced Micro Devices, Inc. [AMD] FCH USB EHCI Controller (rev 39)\n00:14.0 SMBus: Advanced Micro Devices, Inc. [AMD] FCH SMBus Controller (rev 42)\n00:14.3 ISA bridge: Advanced Micro Devices, Inc. [AMD] FCH LPC Bridge (rev 11)\n00:14.7 SD Host controller: Advanced Micro Devices, Inc. [AMD] FCH SD Flash Controller (rev 01)\n00:18.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1580\n00:18.1 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1581\n00:18.2 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1582\n00:18.3 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1583\n00:18.4 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1584\n00:18.5 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1585\n01:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03)\n02:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03)\n03:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03)\n04:00.0 PCI bridge: ASMedia Technology Inc. Device 1182\n05:03.0 PCI bridge: ASMedia Technology Inc. Device 1182\n05:07.0 PCI bridge: ASMedia Technology Inc. Device 1182\n06:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ether)\n07:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411\n</code></pre> <p>Our extension card controllers are detected as follows:</p> <pre><code>lspci -v -s 06:00.00\n</code></pre> <p>output:</p> <pre><code>06:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller (rev 06)\n        Subsystem: Realtek Semiconductor Co., Ltd. Device 0123\n        Flags: bus master, fast devsel, latency 0, IRQ 75\n        I/O ports at 1000 [size=256]\n        Memory at f7800000 (64-bit, non-prefetchable) [size=4K]\n        Memory at f7600000 (64-bit, prefetchable) [size=16K]\n        Capabilities: [40] Power Management version 3\n        Capabilities: [50] MSI: Enable+ Count=1/1 Maskable- 64bit+\n        Capabilities: [70] Express Endpoint, MSI 01\n        Capabilities: [b0] MSI-X: Enable- Count=4 Masked-\n        Capabilities: [d0] Vital Product Data\n        Capabilities: [100] Advanced Error Reporting\n        Capabilities: [140] Virtual Channel\n        Capabilities: [160] Device Serial Number 01-00-00-00-68-4c-e0-00\n        Kernel driver in use: r8169\n</code></pre> <pre><code>lspci -v -s 07:00.00\n</code></pre> <p>output:</p> <pre><code>07:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller (rev 06)\n        Subsystem: Realtek Semiconductor Co., Ltd. Device 0123\n        Flags: bus master, fast devsel, latency 0, IRQ 76\n        I/O ports at 2000 [size=256]\n        Memory at f7900000 (64-bit, non-prefetchable) [size=4K]\n        Memory at f7700000 (64-bit, prefetchable) [size=16K]\n        Capabilities: [40] Power Management version 3\n        Capabilities: [50] MSI: Enable+ Count=1/1 Maskable- 64bit+\n        Capabilities: [70] Express Endpoint, MSI 01\n        Capabilities: [b0] MSI-X: Enable- Count=4 Masked-\n        Capabilities: [d0] Vital Product Data\n        Capabilities: [100] Advanced Error Reporting\n        Capabilities: [140] Virtual Channel\n        Capabilities: [160] Device Serial Number 01-00-00-00-68-4c-e0-00\n        Kernel driver in use: r8169\n</code></pre>"},{"location":"debug/mpcie_ethernet/#establishing-connection","title":"Establishing connection","text":"<p>For the purpose of following test, automatic connection initialization was disabled by erasing <code>/etc/network/interfaces</code> file content. No network manager was present as well.</p> <p>Available Ethernet interfaces list:</p> <pre><code>2: eth0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 00:e0:4c:68:05:c8 brd ff:ff:ff:ff:ff:ff\n3: eth1: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 00:e0:4c:68:05:c9 brd ff:ff:ff:ff:ff:ff\n4: eth2: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 00:0d:b9:43:3f:bc brd ff:ff:ff:ff:ff:ff\n5: eth3: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 00:0d:b9:43:3f:bd brd ff:ff:ff:ff:ff:ff\n6: eth4: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 00:0d:b9:43:3f:be brd ff:ff:ff:ff:ff:ff\n</code></pre> <ul> <li>First interface (00:e0:4c:68:05:c9 MAC address) from extension card:</li> </ul> <pre><code>ifconfig eth1 up\n</code></pre> <p>output:</p> <pre><code>[  105.204628] r8169 0000:07:00.0: firmware: direct-loading firmware rtl_nic/rtl8168e-3.fw\n[  105.313609] r8169 0000:07:00.0 eth1: link down\n[  105.318155] r8169 0000:07:00.0 eth1: link down\n[  105.318482] IPv6: ADDRCONF(NETDEV_UP): eth1: link is not ready\n[  107.209683] r8169 0000:07:00.0 eth1: link up\n[  107.214014] IPv6: ADDRCONF(NETDEV_CHANGE): eth1: link becomes ready\n</code></pre> <pre><code>dhclient eth1\nifconfig eth1\n</code></pre> <p>output:</p> <pre><code>eth1      Link encap:Ethernet  HWaddr 00:e0:4c:68:05:c9\n          inet addr:192.168.0.120  Bcast:192.168.0.255  Mask:255.255.255.0\n          inet6 addr: fe80::2e0:4cff:fe68:5c9/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:22 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:19 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:2945 (2.8 KiB)  TX bytes:2060 (2.0 KiB)\n</code></pre> <p>Pinging some internal or external addresses from APU2 works:</p> <pre><code>ping 192.168.0.1\n</code></pre> <p>output:</p> <pre><code>PING 192.168.0.1 (192.168.0.1) 56(84) bytes of data.\n64 bytes from 192.168.0.1: icmp_seq=1 ttl=64 time=0.374 ms\n64 bytes from 192.168.0.1: icmp_seq=2 ttl=64 time=0.266\n</code></pre> <pre><code>ping google.pl\n</code></pre> <p>output:</p> <pre><code>PING google.pl (172.217.20.195) 56(84) bytes of data.\n64 bytes from waw02s08-in-f195.1e100.net (172.217.20.195): icmp_seq=1 ttl=57 time=6.52 ms\n64 bytes from waw02s08-in-f195.1e100.net (172.217.20.195): icmp_seq=2 ttl=57 time=6.48 ms\n</code></pre> <p>Pinging <code>eth1</code> interface address from different PC works as well:</p> <pre><code>ping 192.168.0.120\n</code></pre> <p>output:</p> <pre><code>PING 192.168.0.120 (192.168.0.120) 56(84) bytes of data.\n64 bytes from 192.168.0.120: icmp_seq=1 ttl=64 time=0.592 ms\n64 bytes from 192.168.0.120: icmp_seq=2 ttl=64 time=0.482 ms\n</code></pre> <ul> <li>Second interface (00:e0:4c:68:05:c8 MAC address) from extension card:</li> </ul> <p>Reboot was executed first.</p> <pre><code>ifconfig eth0 up\n</code></pre> <p>output:</p> <pre><code>[  218.000514] r8169 0000:06:00.0: firmware: direct-loading firmware rtl_nic/rtl8168e-3.fw\n[  218.118256] r8169 0000:06:00.0 eth0: link down\n[  218.122760] r8169 0000:06:00.0 eth0: link down\n[  218.127347] IPv6: ADDRCONF(NETDEV_UP): eth0: link is not ready\n[  220.014881] r8169 0000:06:00.0 eth0: link up\n[  220.019250] IPv6: ADDRCONF(NETDEV_CHANGE): eth0: link becomes ready\n</code></pre> <pre><code>dhclient  eth0\nifconfig eth0\n</code></pre> <p>output:</p> <pre><code>eth0      Link encap:Ethernet  HWaddr 00:e0:4c:68:05:c8\n          inet addr:192.168.0.123  Bcast:192.168.0.255  Mask:255.255.255.0\n          inet6 addr: fe80::2e0:4cff:fe68:5c8/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:3 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:1240 (1.2 KiB)  TX bytes:1262 (1.2 KiB)\n</code></pre> <p>Pinging some internal or external addresses from APU2 works:</p> <pre><code>ping 192.168.0.1\n</code></pre> <p>output:</p> <pre><code>PING 192.168.0.1 (192.168.0.1) 56(84) bytes of data.\n64 bytes from 192.168.0.1: icmp_seq=1 ttl=64 time=0.391 ms\n64 bytes from 192.168.0.1: icmp_seq=2 ttl=64 time=0.233 ms\n</code></pre> <pre><code>ping google.pl\n</code></pre> <p>output:</p> <pre><code>PING google.pl (172.217.20.195) 56(84) bytes of data.\n64 bytes from waw02s08-in-f3.1e100.net (172.217.20.195): icmp_seq=1 ttl=57 time=6.59 ms\n64 bytes from waw02s08-in-f3.1e100.net (172.217.20.195): icmp_seq=2 ttl=57 time=6.44 ms\n</code></pre> <p>Pinging <code>eth0</code> interface address from different PC works as well:</p> <pre><code>PING 192.168.0.123 (192.168.0.123) 56(84) bytes of data.\n64 bytes from 192.168.0.120: icmp_seq=1 ttl=64 time=0.592 ms\n64 bytes from 192.168.0.120: icmp_seq=2 ttl=64 time=0.482 ms\n</code></pre>"},{"location":"debug/mpcie_ethernet/#operating-multiple-interfaces-at-once","title":"Operating multiple interfaces at once","text":"<p>Following interfaces have been connected using separate Ethernet cables:</p> <ul> <li> <p>both interfaces from mPCIe extension card</p> </li> <li> <p>two out of three interfaces from APU2 board</p> </li> <li> <p>Interfaces configuration</p> </li> </ul> <pre><code>ifconfig eth0 up\n</code></pre> <p>output:</p> <pre><code>[  400.659117] r8169 0000:06:00.0: firmware: direct-loading firmware rtl_nic/rtl8168e-3.fw\n[  400.762913] r8169 0000:06:00.0 eth0: link down\n[  400.767438] r8169 0000:06:00.0 eth0: link down\n[  400.772017] IPv6: ADDRCONF(NETDEV_UP): eth0: link is not ready\n[  402.677778] r8169 0000:06:00.0 eth0: link up\n[  402.682146] IPv6: ADDRCONF(NETDEV_CHANGE): eth0: link becomes ready\n</code></pre> <pre><code>dhclient eth0\nifconfig eth0\n</code></pre> <p>output:</p> <pre><code>eth0      Link encap:Ethernet  HWaddr 00:e0:4c:68:05:c8\n          inet addr:192.168.0.132  Bcast:192.168.0.255  Mask:255.255.255.0\n          inet6 addr: fe80::2e0:4cff:fe68:5c8/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:7 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:10 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:1480 (1.4 KiB)  TX bytes:1332 (1.3 KiB)\n</code></pre> <pre><code>ifconfig eth1 up\n</code></pre> <p>output:</p> <pre><code>[  449.690659] r8169 0000:07:00.0 eth1: link down\n[  449.690686] r8169 0000:07:00.0 eth1: link down\n[  449.699870] IPv6: ADDRCONF(NETDEV_UP): eth1: link is not ready\n[  451.626151] r8169 0000:07:00.0 eth1: link up\n[  451.630502] IPv6: ADDRCONF(NETDEV_CHANGE): eth1: link becomes ready\n</code></pre> <pre><code>dhclient eth1\nifconfig eth1\n</code></pre> <p>output:</p> <pre><code>eth1      Link encap:Ethernet  HWaddr 00:e0:4c:68:05:c9\n          inet addr:192.168.0.133  Bcast:192.168.0.255  Mask:255.255.255.0\n          inet6 addr: fe80::2e0:4cff:fe68:5c9/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:4 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:1300 (1.2 KiB)  TX bytes:1262 (1.2 KiB)\n</code></pre> <pre><code>ifconfig eth2 up\n</code></pre> <p>output:</p> <pre><code>[  484.573775] IPv6: ADDRCONF(NETDEV_UP): eth2: link is not ready\n[  487.225321] igb 0000:01:00.0 eth2: igb: eth2 NIC Link is Up 100 Mbps Full Duplex, FlowX\n[  487.234971] IPv6: ADDRCONF(NETDEV_CHANGE): eth2: link becomes ready\n</code></pre> <pre><code>dhclient eth2\nifconfig eth2\n</code></pre> <p>output:</p> <pre><code>eth2      Link encap:Ethernet  HWaddr 00:0d:b9:43:3f:bc\n          inet addr:192.168.0.134  Bcast:192.168.0.255  Mask:255.255.255.0\n          inet6 addr: fe80::20d:b9ff:fe43:3fbc/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:11 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:10 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:1720 (1.6 KiB)  TX bytes:1332 (1.3 KiB)\n          Memory:f7a00000-f7a1ffff\n</code></pre> <pre><code>ifconfig eth4 up\n</code></pre> <p>output:</p> <pre><code>[  528.424071] IPv6: ADDRCONF(NETDEV_UP): eth4: link is not ready\n[  531.111624] igb 0000:03:00.0 eth4: igb: eth4 NIC Link is Up 100 Mbps Full Duplex, FlowX\n[  531.121238] IPv6: ADDRCONF(NETDEV_CHANGE): eth4: link becomes ready\n</code></pre> <pre><code>dhclient eth4\nifconfig eth4\n</code></pre> <p>output:</p> <pre><code>eth4      Link encap:Ethernet  HWaddr 00:0d:b9:43:3f:be\n          inet addr:192.168.0.135  Bcast:192.168.0.255  Mask:255.255.255.0\n          inet6 addr: fe80::20d:b9ff:fe43:3fbe/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:19 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:10 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:2200 (2.1 KiB)  TX bytes:1332 (1.3 KiB)\n          Memory:f7c00000-f7c1ffff\n</code></pre> <ol> <li>Each of them can be separately reached from network</li> </ol> <pre><code>ping 192.168.0.132\n</code></pre> <p>output:</p> <pre><code>PING 192.168.0.132 (192.168.0.132) 56(84) bytes of data.\n64 bytes from 192.168.0.132: icmp_seq=2 ttl=64 time=410 ms\n64 bytes from 192.168.0.132: icmp_seq=3 ttl=64 time=551 ms\n</code></pre> <pre><code>ping 192.168.0.133\n</code></pre> <p>output:</p> <pre><code>PING 192.168.0.133 (192.168.0.133) 56(84) bytes of data.\n64 bytes from 192.168.0.133: icmp_seq=1 ttl=64 time=4.31 ms\n64 bytes from 192.168.0.133: icmp_seq=2 ttl=64 time=1.49 ms\n</code></pre> <pre><code>ping 192.168.0.134\n</code></pre> <p>output:</p> <pre><code>PING 192.168.0.134 (192.168.0.134) 56(84) bytes of data.\n64 bytes from 192.168.0.134: icmp_seq=1 ttl=64 time=3.02 ms\n64 bytes from 192.168.0.134: icmp_seq=2 ttl=64 time=1.71 ms\n</code></pre> <pre><code>ping 192.168.0.135\n</code></pre> <p>output:</p> <pre><code>PING 192.168.0.135 (192.168.0.135) 56(84) bytes of data.\n64 bytes from 192.168.0.135: icmp_seq=1 ttl=64 time=2.80 ms\n64 bytes from 192.168.0.135: icmp_seq=2 ttl=64 time=1.71 ms\n</code></pre>"},{"location":"debug/mpcie_ethernet/#mpcie-slot-2","title":"mPCIe slot 2","text":""},{"location":"debug/mpcie_ethernet/#device-identification_1","title":"Device identification","text":"<p>Ethernet interfaces from extension card are not detected:</p> <pre><code>lspci\n</code></pre> <p>output:</p> <pre><code>00:00.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1566\n00:02.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 156b\n00:02.2 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1\n00:02.3 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1\n00:02.4 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1\n00:08.0 Encryption controller: Advanced Micro Devices, Inc. [AMD] Device 1537\n00:10.0 USB controller: Advanced Micro Devices, Inc. [AMD] FCH USB XHCI Controller (rev 11)\n00:11.0 SATA controller: Advanced Micro Devices, Inc. [AMD] FCH SATA Controller [IDE mode] (rev 39)\n00:13.0 USB controller: Advanced Micro Devices, Inc. [AMD] FCH USB EHCI Controller (rev 39)\n00:14.0 SMBus: Advanced Micro Devices, Inc. [AMD] FCH SMBus Controller (rev 42)\n00:14.3 ISA bridge: Advanced Micro Devices, Inc. [AMD] FCH LPC Bridge (rev 11)\n00:14.7 SD Host controller: Advanced Micro Devices, Inc. [AMD] FCH SD Flash Controller (rev 01)\n00:18.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1580\n00:18.1 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1581\n00:18.2 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1582\n00:18.3 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1583\n00:18.4 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1584\n00:18.5 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1585\n01:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03)\n02:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03)\n03:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03)\n</code></pre> <pre><code>ip a\n</code></pre> <p>output:</p> <pre><code>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: eth0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq state DOWN group default qlen 1000\n    link/ether 00:0d:b9:43:3f:bc brd ff:ff:ff:ff:ff:ff\n    inet 192.168.0.135/24 brd 192.168.0.255 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::20d:b9ff:fe43:3fbc/64 scope link\n       valid_lft forever preferred_lft forever\n3: eth1: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq state DOWN group default qlen 1000\n    link/ether 00:0d:b9:43:3f:bd brd ff:ff:ff:ff:ff:ff\n    inet 192.168.0.108/24 brd 192.168.0.255 scope global eth1\n       valid_lft forever preferred_lft forever\n    inet6 fe80::20d:b9ff:fe43:3fbd/64 scope link\n       valid_lft forever preferred_lft forever\n4: eth2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:0d:b9:43:3f:be brd ff:ff:ff:ff:ff:ff\n    inet 192.168.0.112/24 brd 192.168.0.255 scope global eth2\n       valid_lft forever preferred_lft forever\n    inet6 fe80::20d:b9ff:fe43:3fbe/64 scope link\n       valid_lft forever preferred_lft forever\n</code></pre>"},{"location":"debug/mpcie_ethernet/#mpcie-slot-2-with-clock-always-enabled","title":"mPCIe slot 2 with clock always enabled","text":"<p>This is different from the previous one with the following change in source code:</p> <pre><code>diff --git a/src/mainboard/pcengines/apu2/romstage.c b/src/mainboard/pcengines/apu2/romstage.c\nindex a1c73d1e3424..f018ac5742ce 100644\n--- a/src/mainboard/pcengines/apu2/romstage.c\n+++ b/src/mainboard/pcengines/apu2/romstage.c\n@@ -99,7 +99,9 @@ void cache_as_ram_main(unsigned long bist, unsigned long cpu_init_detectedx)\n                data = *((u32 *)(ACPI_MMIO_BASE + MISC_BASE+FCH_MISC_REG04));\n\n                data &amp;= 0xFFFFFF0F;\n-               data |= 0xA &lt;&lt; (1 * 4); // CLKREQ GFX to GFXCLK\n+               // make GFXCLK to ignore CLKREQ# input\n+               // force it to be always on\n+               data |= 0xF &lt;&lt; (1 * 4); // CLKREQ GFX to GFXCLK\n</code></pre>"},{"location":"debug/mpcie_ethernet/#device-identification_2","title":"Device identification","text":"<pre><code>ip a\n</code></pre> <p>output:</p> <pre><code>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: eth0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq state DOWN group default qlen 1000\n    link/ether 00:0d:b9:43:3f:bc brd ff:ff:ff:ff:ff:ff\n    inet 10.0.0.10/24 brd 10.0.0.255 scope global eth0\n       valid_lft forever preferred_lft forever\n3: eth1: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 00:0d:b9:43:3f:bd brd ff:ff:ff:ff:ff:ff\n4: eth2: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 00:0d:b9:43:3f:be brd ff:ff:ff:ff:ff:ff\n5: eth3: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 00:e0:4c:68:05:c8 brd ff:ff:ff:ff:ff:ff\n6: eth4: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 00:e0:4c:68:05:c9 brd ff:ff:ff:ff:ff:ff\n</code></pre> <pre><code>lspci\n</code></pre> <p>output:</p> <pre><code>00:00.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1566\n00:02.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 156b\n00:02.1 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1\n00:02.2 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1\n00:02.3 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1\n00:02.4 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1\n00:08.0 Encryption controller: Advanced Micro Devices, Inc. [AMD] Device 1537\n00:10.0 USB controller: Advanced Micro Devices, Inc. [AMD] FCH USB XHCI Controller (rev 11)\n00:11.0 SATA controller: Advanced Micro Devices, Inc. [AMD] FCH SATA Controller [IDE mode] (rev 39)\n00:13.0 USB controller: Advanced Micro Devices, Inc. [AMD] FCH USB EHCI Controller (rev 39)\n00:14.0 SMBus: Advanced Micro Devices, Inc. [AMD] FCH SMBus Controller (rev 42)\n00:14.3 ISA bridge: Advanced Micro Devices, Inc. [AMD] FCH LPC Bridge (rev 11)\n00:14.7 SD Host controller: Advanced Micro Devices, Inc. [AMD] FCH SD Flash Controller (rev 01)\n00:18.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1580\n00:18.1 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1581\n00:18.2 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1582\n00:18.3 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1583\n00:18.4 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1584\n00:18.5 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1585\n01:00.0 PCI bridge: ASMedia Technology Inc. Device 1182\n02:03.0 PCI bridge: ASMedia Technology Inc. Device 1182\n02:07.0 PCI bridge: ASMedia Technology Inc. Device 1182\n03:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ether)\n04:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ether)\n05:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03)\n06:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03)\n07:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03)\n</code></pre> <p>Our extension card controllers are detected as follows:</p> <pre><code>lspci -v -s 03:00.00\n</code></pre> <p>output:</p> <pre><code>03:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411\nPCI Express Gigabit Ethernet Controller (rev 06)\n        Subsystem: Realtek Semiconductor Co., Ltd. Device 0123\n        Flags: bus master, fast devsel, latency 0, IRQ 76\n        I/O ports at 1000 [size=256]\n        Memory at f7800000 (64-bit, non-prefetchable) [size=4K]\n        Memory at f7600000 (64-bit, prefetchable) [size=16K]\n        Capabilities: [40] Power Management version 3\n        Capabilities: [50] MSI: Enable+ Count=1/1 Maskable- 64bit+\n        Capabilities: [70] Express Endpoint, MSI 01\n        Capabilities: [b0] MSI-X: Enable- Count=4 Masked-\n        Capabilities: [d0] Vital Product Data\n        Capabilities: [100] Advanced Error Reporting\n        Capabilities: [140] Virtual Channel\n        Capabilities: [160] Device Serial Number 01-00-00-00-68-4c-e0-00\n        Kernel driver in use: r8169\n</code></pre> <pre><code>lspci -v -s 04:00.00\n</code></pre> <p>output:</p> <pre><code>04:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411\nPCI Express Gigabit Ethernet Controller (rev 06)\n        Subsystem: Realtek Semiconductor Co., Ltd. Device 0123\n        Flags: bus master, fast devsel, latency 0, IRQ 77\n        I/O ports at 2000 [size=256]\n        Memory at f7900000 (64-bit, non-prefetchable) [size=4K]\n        Memory at f7700000 (64-bit, prefetchable) [size=16K]\n        Capabilities: [40] Power Management version 3\n        Capabilities: [50] MSI: Enable+ Count=1/1 Maskable- 64bit+\n        Capabilities: [70] Express Endpoint, MSI 01\n        Capabilities: [b0] MSI-X: Enable- Count=4 Masked-\n        Capabilities: [d0] Vital Product Data\n        Capabilities: [100] Advanced Error Reporting\n        Capabilities: [140] Virtual Channel\n        Capabilities: [160] Device Serial Number 01-00-00-00-68-4c-e0-00\n        Kernel driver in use: r8169\n</code></pre>"},{"location":"debug/mpcie_ethernet/#establishing-connection_1","title":"Establishing connection","text":"<p>For the purpose of following test, automatic connection initialization was disabled by erasing <code>/etc/network/interfaces</code> file content. No network manager was present as well.</p> <p>Available Ethernet interfaces list:</p> <pre><code>2: eth0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 00:e0:4c:68:05:c8 brd ff:ff:ff:ff:ff:ff\n3: eth1: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 00:e0:4c:68:05:c9 brd ff:ff:ff:ff:ff:ff\n4: eth2: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 00:0d:b9:43:3f:bc brd ff:ff:ff:ff:ff:ff\n5: eth3: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 00:0d:b9:43:3f:bd brd ff:ff:ff:ff:ff:ff\n6: eth4: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 00:0d:b9:43:3f:be brd ff:ff:ff:ff:ff:ff\n</code></pre> <ul> <li>First interface (00:e0:4c:68:05:c9 MAC address) from extension card:</li> </ul> <p>Reboot was executed first.</p> <pre><code>ifconfig eth1 up\n</code></pre> <p>output:</p> <pre><code>[  702.047648] r8169 0000:04:00.0: firmware: direct-loading firmware rtl_nic/rtl8168e-3.fw\n[  702.161935] r8169 0000:04:00.0 eth1: link down\n[  702.166586] r8169 0000:04:00.0 eth1: link down\n[  702.166817] IPv6: ADDRCONF(NETDEV_UP): eth1: link is not ready\n[  704.076523] r8169 0000:04:00.0 eth1: link up\n[  704.080905] IPv6: ADDRCONF(NETDEV_CHANGE): eth1: link becomes ready\n</code></pre> <pre><code>dhclient eth1\nifconfig eth1\n</code></pre> <p>output:</p> <pre><code>eth1      Link encap:Ethernet  HWaddr 00:e0:4c:68:05:c9\n          inet addr:192.168.0.120  Bcast:192.168.0.255  Mask:255.255.255.0\n          inet6 addr: fe80::2e0:4cff:fe68:5c9/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:4 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:10 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:1300 (1.2 KiB)  TX bytes:1332 (1.3 KiB)\n</code></pre> <p>Pinging some internal or external adresses from APU2 works:</p> <pre><code>ping 192.168.0.1\n</code></pre> <p>output:</p> <pre><code>PING 192.168.0.1 (192.168.0.1) 56(84) bytes of data.\n64 bytes from 192.168.0.1: icmp_seq=1 ttl=64 time=0.371 ms\n64 bytes from 192.168.0.1: icmp_seq=2 ttl=64 time=0.313 ms\n</code></pre> <pre><code>ping google.pl\n</code></pre> <p>output:</p> <pre><code>PING google.pl (172.217.20.195) 56(84) bytes of data.\n64 bytes from waw02s08-in-f195.1e100.net (172.217.20.195): icmp_seq=1 ttl=57 time=6.54 ms\n64 bytes from waw02s08-in-f195.1e100.net (172.217.20.195): icmp_seq=2 ttl=57 time=6.46 ms\n</code></pre> <p>Pinging <code>eth1</code> interface address from different PC works well:</p> <pre><code>ping 192.168.0.120\n</code></pre> <p>output:</p> <pre><code>PING 192.168.0.120 (192.168.0.120) 56(84) bytes of data.\n64 bytes from 192.168.0.120: icmp_seq=1 ttl=64 time=0.755 ms\n64 bytes from 192.168.0.120: icmp_seq=2 ttl=64 time=0.306 ms\n</code></pre> <ul> <li>Second interface (00:e0:4c:68:05:c8 MAC address) from extension card:</li> </ul> <p>Reboot was executed first.</p> <pre><code>ifconfig eth0 up\n</code></pre> <p>output:</p> <pre><code>[   63.775838] r8169 0000:03:00.0: firmware: direct-loading firmware rtl_nic/rtl8168e-3.fw\n[   63.880564] r8169 0000:03:00.0 eth0: link down\n[   63.885105] r8169 0000:03:00.0 eth0: link down\n[   63.885192] IPv6: ADDRCONF(NETDEV_UP): eth0: link is not ready\n[   65.798066] r8169 0000:03:00.0 eth0: link up\n[   65.802396] IPv6: ADDRCONF(NETDEV_CHANGE): eth0: link becomes ready\n</code></pre> <pre><code>dhclient  eth0\nifconfig eth0\n</code></pre> <p>output:</p> <pre><code>eth0      Link encap:Ethernet  HWaddr 00:e0:4c:68:05:c8\n          inet addr:192.168.0.123  Bcast:192.168.0.255  Mask:255.255.255.0\n          inet6 addr: fe80::2e0:4cff:fe68:5c8/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:4 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:10 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:1300 (1.2 KiB)  TX bytes:1332 (1.3 KiB)\n</code></pre> <p>Pinging some internal or external adresses from APU2 works:</p> <pre><code>ping 192.168.0.1\n</code></pre> <p>output:</p> <pre><code>PING 192.168.0.1 (192.168.0.1) 56(84) bytes of data.\n64 bytes from 192.168.0.1: icmp_seq=1 ttl=64 time=0.750 ms\n64 bytes from 192.168.0.1: icmp_seq=2 ttl=64 time=0.266 ms\n</code></pre> <pre><code>ping google.pl\n</code></pre> <p>output:</p> <pre><code>PING google.pl (172.217.20.195) 56(84) bytes of data.\n64 bytes from waw02s08-in-f195.1e100.net (172.217.20.195): icmp_seq=1 ttl=57 time=6.87 ms\n64 bytes from waw02s08-in-f195.1e100.net (172.217.20.195): icmp_seq=2 ttl=57 time=6.75 ms\n</code></pre> <p>Pinging <code>eth0</code> interface address from different PC works well:</p> <pre><code>ping 192.168.0.123\n</code></pre> <p>output:</p> <pre><code>PING 192.168.0.123 (192.168.0.123) 56(84) bytes of data.\n64 bytes from 192.168.0.123: icmp_seq=1 ttl=64 time=0.800 ms\n64 bytes from 192.168.0.123: icmp_seq=2 ttl=64 time=0.313 ms\n</code></pre>"},{"location":"debug/mpcie_ethernet/#operating-multiple-interfaces-at-once_1","title":"Operating multiple interfaces at once","text":"<p>Following interfaces have been connected using separate Ethernet cables:</p> <ul> <li> <p>both interfaces from mPCIe extension card</p> </li> <li> <p>two out of three interfaces from APU2 board</p> </li> <li> <p>Interfaces configuration</p> </li> </ul> <pre><code>ifconfig eth0 up\n</code></pre> <p>output:</p> <pre><code>[  158.770166] r8169 0000:03:00.0: firmware: direct-loading firmware rtl_nic/rtl8168e-3.fw\n[  158.877942] r8169 0000:03:00.0 eth0: link down\n[  158.882483] r8169 0000:03:00.0 eth0: link down\n[  158.882576] IPv6: ADDRCONF(NETDEV_UP): eth0: link is not ready\n[  160.847493] r8169 0000:03:00.0 eth0: link up\n[  160.851821] IPv6: ADDRCONF(NETDEV_CHANGE): eth0: link becomes ready\n</code></pre> <pre><code>dhclient eth0\nifconfig eth0\n</code></pre> <p>output:</p> <pre><code>eth0      Link encap:Ethernet  HWaddr 00:e0:4c:68:05:c8\n          inet addr:192.168.0.132  Bcast:192.168.0.255  Mask:255.255.255.0\n          inet6 addr: fe80::2e0:4cff:fe68:5c8/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:9 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:1600 (1.5 KiB)  TX bytes:1262 (1.2 KiB)\n</code></pre> <pre><code>ifconfig eth1 up\n</code></pre> <p>output:</p> <pre><code>[  185.188050] r8169 0000:04:00.0 eth1: link down\n[  185.188107] r8169 0000:04:00.0 eth1: link down\n[  185.197387] IPv6: ADDRCONF(NETDEV_UP): eth1: link is not ready\nroot@voyage:~# dh[  187.135453] r8169 0000:04:00.0 eth1: link up\n[  187.139809] IPv6: ADDRCONF(NETDEV_CHANGE): eth1: link becomes ready\n</code></pre> <pre><code>client eth1\nifconfig eth1\n</code></pre> <p>output:</p> <pre><code>eth1      Link encap:Ethernet  HWaddr 00:e0:4c:68:05:c9\n          inet addr:192.168.0.133  Bcast:192.168.0.255  Mask:255.255.255.0\n          inet6 addr: fe80::2e0:4cff:fe68:5c9/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:7 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:1480 (1.4 KiB)  TX bytes:1262 (1.2 KiB)\n</code></pre> <pre><code>ifconfig eth2 up\n</code></pre> <p>output:</p> <pre><code>[  602.484926] IPv6: ADDRCONF(NETDEV_UP): eth2: link is not ready\n[  605.172947] igb 0000:05:00.0 eth2: igb: eth2 NIC Link is Up 100 Mbps Full Duplex, FlowX\n[  605.182617] IPv6: ADDRCONF(NETDEV_CHANGE): eth2: link becomes ready\n</code></pre> <pre><code>ifconfig eth2\n</code></pre> <p>output:</p> <pre><code>eth2      Link encap:Ethernet  HWaddr 00:0d:b9:43:3f:bc\n          inet addr:192.168.0.134  Bcast:192.168.0.255  Mask:255.255.255.0\n          inet6 addr: fe80::20d:b9ff:fe43:3fbc/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:66 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:10 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:5675 (5.5 KiB)  TX bytes:1332 (1.3 KiB)\n          Memory:f7a00000-f7a1ffff\n</code></pre> <pre><code>ifconfig eth4 up\n</code></pre> <p>output:</p> <pre><code>[ 1038.772097] IPv6: ADDRCONF(NETDEV_UP): eth4: link is not ready\n[ 1041.441250] igb 0000:07:00.0 eth4: igb: eth4 NIC Link is Up 100 Mbps Full Duplex, FlowX\n[ 1041.450845] IPv6: ADDRCONF(NETDEV_CHANGE): eth4: link becomes ready\n</code></pre> <pre><code>dhclient eth4\n</code></pre> <p>output:</p> <pre><code>root@voyage:~# ifconfig eth4\neth4      Link encap:Ethernet  HWaddr 00:0d:b9:43:3f:be\n          inet addr:192.168.0.135  Bcast:192.168.0.255  Mask:255.255.255.0\n          inet6 addr: fe80::20d:b9ff:fe43:3fbe/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:13 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:10 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:1931 (1.8 KiB)  TX bytes:1332 (1.3 KiB)\n          Memory:f7c00000-f7c1ffff\n</code></pre> <ol> <li>Each of them can be individually reached from network</li> </ol> <pre><code>ping 192.168.0.132\n</code></pre> <p>output:</p> <pre><code>PING 192.168.0.132 (192.168.0.132) 56(84) bytes of data.\n64 bytes from 192.168.0.132: icmp_seq=1 ttl=64 time=26.2 ms\n64 bytes from 192.168.0.132: icmp_seq=2 ttl=64 time=1.96 ms\n</code></pre> <pre><code>ping 192.168.0.133\n</code></pre> <p>output:</p> <pre><code>PING 192.168.0.133 (192.168.0.133) 56(84) bytes of data.\n64 bytes from 192.168.0.133: icmp_seq=1 ttl=64 time=1.35 ms\n64 bytes from 192.168.0.133: icmp_seq=2 ttl=64 time=1.97 ms\n</code></pre> <pre><code>ping 192.168.0.134\n</code></pre> <pre><code>PING 192.168.0.134 (192.168.0.134) 56(84) bytes of data.\n64 bytes from 192.168.0.134: icmp_seq=1 ttl=64 time=1.42 ms\n64 bytes from 192.168.0.134: icmp_seq=2 ttl=64 time=1.49 ms\n</code></pre> <pre><code>ping 192.168.0.135\n</code></pre> <pre><code>PING 192.168.0.135 (192.168.0.135) 56(84) bytes of data.\n64 bytes from 192.168.0.135: icmp_seq=1 ttl=64 time=1.81 ms\n64 bytes from 192.168.0.135: icmp_seq=2 ttl=64 time=1.38 ms\n</code></pre>"},{"location":"debug/mpcie_ethernet/#conclusion","title":"Conclusion","text":"<ul> <li> <p>Ethernet interfaces from extension card inserted into mPCIe slot 1 operate   properly in terms of device enumeration and DHCP lease.</p> </li> <li> <p>Ethernet interfaces from extension card inserted into mPCIe slot 2 do not   operate properly. They are not enumerated by kernel.</p> </li> <li> <p>After forcing mPCIe clock to be always on, Ethernet interfaces from extension   card inserted into mPCIe 2 slot operate in the same fashion as when inserted   into mPCIe slot 1 (when it comes to device enumeration and DHCP lease, at   least). Note that   corresponding change   exists for mPCIe slot 1.</p> </li> </ul>"},{"location":"debug/openwrt/","title":"Openwrt booting from SD card issue","text":"<p>Customer reported that Openwrt is not booting from SD card. It boot from the USB drive though. After investigating this issue the conclusion is lack of SD controller driver in default kernel coming with this distribution.</p>"},{"location":"debug/openwrt/#the-problem","title":"The problem","text":"<p>Excerpt from the message from customer:</p> <p>Openwrt boots fine from USB on APU2 and from USB/SD on APU1. Boot from SD on APU2 hangs after <code>switched to clocksource tsc</code> message.</p> <pre><code>...\n[    2.419743] TCP: cubic registered\n[    2.423086] NET: Registered protocol family 17\n[    2.427641] bridge: automatic filtering via arp/ip/ip6tables has\nbeen deprecated. Update your scripts to load br_netfilter if you need\nthis.\n[    2.440287] 8021q: 802.1Q VLAN Support v1.8\n[    2.444626] NET: Registered protocol family 40\n[    2.451229] rtc_cmos 00:01: setting system clock to 2016-03-07\n01:30:05 UTC (1457314205)\n[    2.459720] Waiting for root device PARTUUID=87cf4590-02...\n[    2.672327] usb 3-1: new high-speed USB device number 2 using ehci-pci\n[    2.822997] hub 3-1:1.0: USB hub found\n[    2.827164] hub 3-1:1.0: 4 ports detected\n[    2.972522] Switched to clocksource tsc\n</code></pre>"},{"location":"debug/openwrt/#the-solution","title":"The solution","text":""},{"location":"debug/openwrt/#symptoms","title":"Symptoms","text":"<ul> <li>After inserting the USB drive with the same image as on SD card OS continues   to boot.</li> <li><code>/dev/mmcblk0*</code> devices are not present.</li> </ul>"},{"location":"debug/openwrt/#resolution","title":"Resolution","text":"<p>Openwrt boots normally after using the kernel with compiled in <code>sdhci-pci</code>   driver (in default kernels this module is disabled).   For Openwrt Buildroot's:</p> <ul> <li><code>make menuconfig</code></li> <li>setup openwrt for target x86, subtarget x86_64</li> <li>in Target Images check ext4 and Build GRUB images     (Linux x86 or x86_64 host only)</li> <li><code>make kernel_menuconfig</code> - could not work at first try.     Try running <code>make target/linux/prepare</code> or <code>make target/linux/compile</code> first.</li> <li>go into <code>Device Drivers \u2192 MMC/SD/SDIO</code></li> <li>enable <code>MMC block device driver</code>, <code>Secure Digital Host Controller Interface     support</code>, <code>SDHCI support on PCI bus</code></li> <li>commence normal build (<code>make</code>)</li> </ul> <p>Tested on <code>chaos_calmer</code> branch from https://github.com/openwrt/openwrt.</p>"},{"location":"debug/pfsense-ahci-issue/","title":"pfSense installation tests","text":""},{"location":"debug/pfsense-ahci-issue/#problem-description","title":"Problem description","text":"<p>Apu boards with coreboot 4.6.x have problems with pfSense installation on hard disks and platform sometimes hangs running this system.</p> <pre><code>ahcich1: Timeout on slot 4 port 0\nahcich1: is 00000008 cs 00000000 ss 00000000 rs ffffffff tfd 40 serr 00000000 cmd 00406417\n(ada0:ahcich1:0:0:0): WRITE_FPDMA_QUEUED. ACB: 61 10 10 c0 d6 40 26 00 00 00 00 00\n(ada0:ahcich1:0:0:0): CAM status: Command timeout\n(ada0:ahcich1:0:0:0): Retrying command\nahcich1: Timeout on slot 5 port 0\nahcich1: is 00000002 cs 00000000 ss 00000000 rs 00000020 tfd 50 serr 00000000 cmd 00406517\n(aprobe0:ahcich1:0:0:0): ATA_IDENTIFY. ACB: ec 00 00 00 00 40 00 00 00 00 00 00\n(aprobe0:ahcich1:0:0:0): CAM status: Command timeout\n(aprobe0:ahcich1:0:0:0): Retrying command\nahcich1: Timeout on slot 6 port 0\nahcich1: is 00000002 cs 00000000 ss 00000000 rs 00000040 tfd 50 serr 00000000 cmd 00406617\n(aprobe0:ahcich1:0:0:0): ATA_IDENTIFY. ACB: ec 00 00 00 00 40 00 00 00 00 00 00\n(aprobe0:ahcich1:0:0:0): CAM status: Command timeout\n(aprobe0:ahcich1:0:0:0): Error 5, Retries exhausted\nahcich1: Timeout on slot 7 port 0\nahcich1: is 00000002 cs 00000000 ss 00000000 rs 00000080 tfd 50 serr 00000000 cmd 00406717\n(aprobe0:ahcich1:0:0:0): ATA_IDENTIFY. ACB: ec 00 00 00 00 40 00 00 00 00 00 00\n(aprobe0:ahcich1:0:0:0): CAM status: Command timeout\n(aprobe0:ahcich1:0:0:0): Error 5, Retry was blocked\nada0 at ahcich1 bus 0 scbus1 target 0 lun 0\nada0: &lt;ST1000LM014-SSHD-8GB LVD3&gt; s/n W380YWQN detached\n</code></pre> <p>After command timeout, the disk is being detached and installation stops.</p>"},{"location":"debug/pfsense-ahci-issue/#possible-reasons","title":"Possible reasons","text":"<p>Community and tests tells that problem exist only in coreboot 4.6.x. Legacy version seems to be unaffected. After dumping the SATA controller registers at the end of ramstage for both coreboot 4.6.x and 4.0.x one can see slight differences in the content of registers. The main differences worth attention are:</p> <ol> <li> <p>Watch Dog Control And Status Register(PCI dev 11 fun 0 offset 0x44):</p> <ul> <li>Watchdog disabled in 4.6.x</li> <li>Watchdog counter not set properly (reset state) in 4.6.x</li> </ul> </li> <li> <p>PHY Core Control 2 Register (PCI dev 11 fun 0 offset 0x84):</p> <ul> <li>PHY PLL Dynamic Shutdown enabled (reset state) in 4.6.x (disabled in legacy)</li> </ul> </li> <li> <p>HBA Capabilities Register (SATA Memory Mapped AHCI Registers offset 0x0):</p> <ul> <li>Command Completion Coalescing Supported bit set (reset state) in 4.6.x   (disabled in legacy) - this bit is read-only so its state depends on AGESA</li> </ul> </li> </ol> <p>Even if these differences are eliminated, the problem still occurs. This may lead to a conclusion, that AGESA code part that was ported from <code>3rdparty/blobs</code> to <code>src/vendorcode</code> does not behave exactly as in legacy.</p> <p>Checking the disk with <code>smartctl</code> command does not give any clue too:</p> <pre><code>SMART Error Log Version: 1\nATA Error Count: 1\n    CR = Command Register [HEX]\n    FR = Features Register [HEX]\n    SC = Sector Count Register [HEX]\n    SN = Sector Number Register [HEX]\n    CL = Cylinder Low Register [HEX]\n    CH = Cylinder High Register [HEX]\n    DH = Device/Head Register [HEX]\n    DC = Device Command Register [HEX]\n    ER = Error register [HEX]\n    ST = Status register [HEX]\nPowered_Up_Time is measured from power on, and printed as\nDDd+hh:mm:SS.sss where DD=days, hh=hours, mm=minutes,\nSS=sec, and sss=millisec. It \"wraps\" after 49.710 days.\n\nError 1 occurred at disk power-on lifetime: 3920 hours (163 days + 8 hours)\n  When the command that caused the error occurred, the device was in an unknown state.\n\n  After command completion occurred, registers were:\n  ER ST SC SN CL CH DH\n  -- -- -- -- -- -- --\n  04 71 00 03 00 00 40  Device Fault; Error: ABRT\n\n  Commands leading to the command that caused the error were:\n  CR FR SC SN CL CH DH DC   Powered_Up_Time  Command/Feature_Name\n  -- -- -- -- -- -- -- --  ----------------  --------------------\n  00 00 00 00 00 00 00 ff      01:56:32.276  NOP [Abort queued commands]\n  00 00 00 00 00 00 00 ff      01:56:26.955  NOP [Abort queued commands]\n  ea 00 00 00 00 00 a0 00      01:56:22.973  FLUSH CACHE EXT\n  61 00 08 ff ff ff 4f 00      01:56:22.973  WRITE FPDMA QUEUED\n  ea 00 00 00 00 00 a0 00      01:56:22.962  FLUSH CACHE EXT\n</code></pre> <p>Digging in the FreeBSD forums gave me a hint that migration from kernel 10.x to 11.x, which takes place between pfSense versions 2.3.x and 2.4.x, caused many problems with hard disk. There were major changes to AHCI and many users complained at the same issue mentioned in this paper. I have read that customizing the installation may solve this issue.</p>"},{"location":"debug/pfsense-ahci-issue/#solution-and-tests","title":"Solution and tests","text":"<p>I have found many possible solutions on FreeBSd forums:</p> <ul> <li>change power saving policy for AHCI: <code>hint.ahcich.x.pm_level=\"y\"</code>   (x - channel, y - level [0-5])</li> <li>disable ATA DMA <code>hint.ata.0.mode=PIO4</code></li> <li>disable Message Signaled Interrupts (MSI) for ATA <code>hint.ahci.x.msi=\"0\"</code>   (x - SATA controller)</li> </ul> <p>I have tested few BIOS versions like 4.0.11, 4.0.14, 4.6.1, 4.6.4. I have used the SATA port available on port and Seagate HDD:</p> <pre><code>Model Family:     Seagate Laptop SSHD\nDevice Model:     ST1000LM014-SSHD-8GB\nSerial Number:    W380YWQN\nLU WWN Device Id: 5 000c50 06e82fb73\nFirmware Version: LVD3\nUser Capacity:    1,000,204,886,016 bytes [1.00 TB]\nSector Sizes:     512 bytes logical, 4096 bytes physical\nRotation Rate:    5400 rpm\nForm Factor:      2.5 inches\nDevice is:        In smartctl database [for details use: -P show]\nATA Version is:   ACS-2, ACS-3 T13/2161-D revision 3b\nSATA Version is:  SATA 3.1, 6.0 Gb/s (current: 6.0 Gb/s)\nLocal Time is:    Wed Feb  7 11:06:32 2018 GMT\nSMART support is: Available - device has SMART capability.\nSMART support is: Enabled\n</code></pre> <p>The 4.0.x versions did not need any modifications. After performing over 15 installations no error occured.</p> <p>Problems only appeared in 4.6.x versions.</p> BIOS version clean PM level 0 DMA disabled MSI disabled v4.6.1 FAIL FAIL FAIL PASS v4.6.4 FAIL FAIL FAIL PASS <p><code>PASS</code> - over 15 installations finished without errors</p> <p>As the name of modification says, it is a hint for installer to not use such features. Tests show that when installer is not using MSI the installation goes without errors. In other cases installation fails after 0-5 good installations in a row.</p> <p>I have found answers on FreeBSD forums that signal races occur and this leads to timeouts on disk operations. Disabling MSI seems to solve this problem.</p> <p>The same solution can be utilized in the installed system. Appending <code>hint.ahci.0.msi=\"0\"</code> to <code>/boot/loader.conf.local</code> should prevent system hang.</p>"},{"location":"debug/sd_registers_bad/","title":"Sd registers bad","text":""},{"location":"debug/sd_registers_bad/#change-sd-controller-registers","title":"Change SD controller registers","text":"<p>BAD card acts like there is no card (logs <code>BAD from cold boot</code> vs <code>no card and Card Detect tied to ground</code> are the same in terms of command flow)</p> <p>Results of below test are the same: GOOD appears in bootmenu after coldboot, BAD doesn't.</p> <p>SDHC registers values in release v4.0.1.1:</p> <pre><code>pci_write_config32(dev, 0xA4, 0x21FE32B2); //0b 0010 0001 1101 1110 0011 0010 1011 0010\npci_write_config32(dev, 0xA8, 0x00000070); //0b 0000 0000 0000 0000 0000 0000 0111 0000\npci_write_config32(dev, 0xB0, 0x01180C01); //0b 0000 0001 0001 1000 0000 1100 0000 0001\npci_write_config32(dev, 0xD0, 0x0000078B); //0b 0000 0000 0000 0000 0000 0111 1000 1011\n</code></pre> <ol> <li> <p>Change from <code>Removable card slot</code> to <code>Embedded slot for one device</code></p> <pre><code>pci_write_config32(dev, 0xA4, 0x61FE32B2); //0b 0110 0001 1111 1110 0011 0010 1011 0010\n</code></pre> </li> <li> <p>Disable: Suspend/resume support, DMA support, High speed support, ADMA    support, ADMA2 support, MMC8-bit support</p> <pre><code>pci_write_config32(dev, 0xA4, 0x210232B2); //0b 0010 0001 0000 0010 0011 0010 1011 0010\n</code></pre> </li> <li> <p>Combination of 1. and 2. (disabled features and <code>embedded slot</code>)</p> <pre><code>pci_write_config32(dev, 0xA4, 0x610232B2); //0b 0110 0001 0000 0010 0011 0010 1011 0010\n</code></pre> </li> <li> <p>Disabled features and <code>Shared Bus Slot</code> instead:</p> <pre><code>pci_write_config32(dev, 0xA4, 0xA10232B2); //0b 1010 0001 0000 0010 0011 0010 1011 0010\n</code></pre> </li> <li> <p>Disabled features +  <code>TimeOut clock from internal</code></p> <pre><code>pci_write_config32(dev, 0xA4, 0xA1023232); //0b 1010 0001 0000 0010 0011 0010 0011 0010\n</code></pre> </li> <li> <p>Change <code>TmoFreq</code> from 0x32 to 0x02:</p> <pre><code>pci_write_config32(dev, 0xA4, 0xA1023202); //0b 1010 0001 0000 0010 0011 0010 0000 0010\n</code></pre> </li> <li> <p>Disable features from <code>0xB0</code> register: Memory deep sleep mode, memory shutdown     mode, Master Read prefetch:</p> <pre><code>pci_write_config32(dev, 0xB0, 0x01180000); //0b 0000 0001 0001 1000 0000 0000 0000 0000\n</code></pre> </li> <li> <p>Force 3.3V:</p> <pre><code>pci_write_config32(dev, 0xD0, 0x0004078B); //0b 0000 0000 0000 0100 0000 0111 1000 1011\n</code></pre> </li> <li> <p>SD Power pin disable:</p> <pre><code>pci_write_config32(dev, 0xD0, 0x0004070B);\n</code></pre> <p>Voltage on TP27 drops from 3.3V to 0.25V</p> </li> <li> <p>Change driver strength value:</p> <p>Initially <code>0xB8</code> register value was:</p> <p><pre><code>REGISTER B8  = 0x88000400\n</code></pre> two first bytes are:</p> <pre><code>Specifies the SN driver strength value for 3.3V.\nSpecifies the SP driver strength value for 3.3V.\n</code></pre> <p>changes:</p> <pre><code>pci_write_config32(dev, 0xB8, 0xFF000400);\npci_write_config32(dev, 0xB8, 0xAA000400);\npci_write_config32(dev, 0xB8, 0x55000400);\npci_write_config32(dev, 0xB8, 0x00000400);\n</code></pre> </li> </ol>"},{"location":"debug/sdcard_debug/","title":"Sdcard debug","text":""},{"location":"debug/sdcard_debug/#bad-vs-good-card-in-debian","title":"BAD vs GOOD card in debian","text":"<ol> <li> <p>No card inserted - coldboot</p> <pre><code>root@debian:~# cat /proc/interrupts | grep mmc\n  16:         13         13         13         13   IO-APIC-fasteoi   mmc0\n</code></pre> <pre><code>root@debian:~# cat /sys/kernel/debug/mmc0/ios\nclock:          0 Hz\nvdd:            0 (invalid)\nbus mode:       1 (open drain)\nchip select:    0 (don't care)\npower mode:     0 (off)\nbus width:      0 (1 bits)\ntiming spec:    0 (legacy)\nsignal voltage: 0 (3.30 V)\n</code></pre> <pre><code>root@debian:~# cat /sys/kernel/debug/mmc0/clock\n0\n</code></pre> </li> <li> <p>BAD card inserted - coldboot</p> <pre><code>root@debian:~# cat /proc/interrupts | grep mmc\n  16:         13         13         13         13   IO-APIC-fasteoi   mmc0\n</code></pre> <p>after card removal:</p> <pre><code>root@debian:~# cat /proc/interrupts | grep mmc\n  16:         13         14         13         13   IO-APIC-fasteoi   mmc0\n</code></pre> <pre><code>root@debian:~# cat /sys/kernel/debug/mmc0/ios\nclock:          0 Hz\nvdd:            0 (invalid)\nbus mode:       1 (open drain)\nchip select:    0 (don't care)\npower mode:     0 (off)\nbus width:      0 (1 bits)\ntiming spec:    0 (legacy)\nsignal voltage: 0 (3.30 V)\n</code></pre> <pre><code>root@debian:~# cat /sys/kernel/debug/mmc0/clock\n0\n</code></pre> </li> <li> <p>BAD card inserted - coldboot</p> <pre><code>root@debian:~# cat /proc/interrupts | grep mmc\n  16:        187        197        197        204   IO-APIC-fasteoi   mmc0\n</code></pre> <pre><code>root@debian:~# cat /sys/kernel/debug/mmc0/ios\nclock:          50000000 Hz\nactual clock:   50000000 Hz\nvdd:            21 (3.3 ~ 3.4 V)\nbus mode:       2 (push-pull)\nchip select:    0 (don't care)\npower mode:     2 (on)\nbus width:      2 (4 bits)\ntiming spec:    2 (sd high-speed)\nsignal voltage: 0 (3.30 V)\n</code></pre> <pre><code>cat /sys/kernel/debug/mmc0/clock\n50000000\n</code></pre> </li> </ol>"},{"location":"debug/sdcard_test/","title":"Sdcard test","text":""},{"location":"debug/sdcard_test/#good-inserted","title":"GOOD-inserted","text":"<ul> <li>Card is inserted into slot before power on.</li> <li>Check if card appears as a bootitem in bootmenu. (IT IS)</li> </ul>"},{"location":"debug/sdcard_test/#good-not-inserted","title":"GOOD-not-inserted","text":"<ul> <li>Card is not inserted into slot</li> <li>Enter boot menu and insert card</li> <li>Go to setup, exit without save (<code>x</code>).</li> <li>Go to boot menu again and check if card appears as a bootitem (IT IS)</li> </ul>"},{"location":"debug/sdcard_test/#bad-inserted","title":"BAD-inserted","text":"<ul> <li>Card is inserted into slot before power on.</li> <li>Check if card appears as a bootitem in bootmenu. (IT IS NOT)</li> </ul>"},{"location":"debug/sdcard_test/#bad-not-inserted","title":"BAD-not-inserted","text":"<ul> <li>Card is not inserted into slot.</li> <li>Enter boot menu and insert card.</li> <li>Go to setup, exit without save (<code>x</code>).</li> <li>Go to boot menu again and check if card appears as a bootitem. (IT IS)</li> </ul>"},{"location":"debug/sdcard_test/#diff-analyze","title":"Diff analyze","text":"<ol> <li> <p><code>GOOD-not-inserted.cap</code> vs <code>BAD-not-inserted.cap</code></p> <p>No differences other than timing differences such as:</p> <pre><code>BS: BS_PAYLOAD_LOAD times (us): entry 0 run 48848 exit 0\n\nvs\n\nBS: BS_PAYLOAD_LOAD times (us): entry 0 run 48978 exit 0\n</code></pre> </li> <li> <p><code>GOOD-inserted.cap</code> vs <code>BAD-inserted.cap</code></p> <p><code>77f59000</code> is card initialization thread</p> <pre><code>|77f5d000| phys_alloc zone=0x77f6df10 size=4096 align=1000 ret=77f59000 (detail=0x77f5eb80)\n</code></pre> <p>GOOD:</p> <pre><code>phys_alloc zone=0x77f6df10 size=4096 align=1000 ret=77f59000 (detail=0x77f61110)\n/77f59000\\ Start thread\n|77f59000| Searching bootorder for: /pci@i0cf8/*@14,7\n|77f59000| sdhci@0xfeb25500 ver=1001 cap=21fe32b2 70\n|77f59000| phys_alloc zone=0x77f6df18 size=44 align=10 ret=f0920 (detail=0x77f5eef0)\n|77f59000| sdcard_set_frequency 50 400 4000\n|77f59000| sdcard_set_frequency 50 200000 0\n|77f59000| host_control contains 0x00000f04\n|77f59000| phys_alloc zone=0x77f6df10 size=80 align=10 ret=77f5ef30 (detail=0x77f611e0)\n|77f59000| Found sdcard at 0xfeb25500: SD card SS08G 7580MiB\n|77f59000| phys_alloc zone=0x77f6df10 size=24 align=10 ret=77f61140 (detail=0x77f5ee90)\n|77f59000| Registering bootable: SD card SS08G 7580MiB (type:2 prio:5 data:f0920)\n\\77f59000/ End thread\nphys_free 77f59000 (detail=0x77f61110)\n\n|77f5d000| phys_alloc zone=0x77f6df10 size=4096 align=1000 ret=77f59000 (detail=0x77f5eca0)\n/77f59000\\ Start thread\n|77f59000| ehci_send_pipe qh=0x77f5ef80 dir=128 data=0x77f59f64 size=4\n|77f59000| ehci_send_pipe qh=0x77f5ef80 dir=128 data=0x77f59f64 size=4\n|77f59000| ehci_send_pipe qh=0x77f5ef80 dir=128 data=0x77f59f64 size=4\n|77f59000| ehci_send_pipe qh=0x77f5ef80 dir=128 data=0x77f59f64 size=4\n|77f59000| phys_free 77f5ed00 (detail=0x77f5ecd0)\n\\77f59000/ End thread\nphys_free 77f59000 (detail=0x77f5eca0)\n</code></pre> <p>BAD:</p> <pre><code>phys_alloc zone=0x77f6df10 size=4096 align=1000 ret=77f59000 (detail=0x77f61110)\n/77f59000\\ Start thread\n|77f59000| Searching bootorder for: /pci@i0cf8/*@14,7\n|77f59000| sdhci@0xfeb25500 ver=1001 cap=21fe32b2 70\n|77f59000| phys_alloc zone=0x77f6df18 size=44 align=10 ret=f0920 (detail=0x77f5ecc0)\n|77f59000| sdcard_set_frequency 50 400 4000\n|77f59000| sdcard_pio command stop (code=1)\n|77f59000| sdcard_pio command stop (code=1)\n|77f59000| sdcard_pio command stop (code=1)\n|77f59000| phys_free f0920 (detail=0x77f5ecc0)\n\\77f59000/ End thread\nphys_free 77f59000 (detail=0x77f61110)\n\n|77f5d000| phys_alloc zone=0x77f6df10 size=4096 align=1000 ret=77f59000 (detail=0x77f5eb80)\n/77f59000\\ Start thread\n|77f59000| ehci_send_pipe qh=0x77f5ed80 dir=128 data=0x77f59f64 size=4\n|77f59000| ehci_send_pipe qh=0x77f5ed80 dir=128 data=0x77f59f64 size=4\n|77f59000| ehci_send_pipe qh=0x77f5ed80 dir=128 data=0x77f59f64 size=4\n|77f59000| ehci_send_pipe qh=0x77f5ed80 dir=128 data=0x77f59f64 size=4\n|77f59000| ehci_send_pipe qh=0x77f5ed80 dir=128 data=0x77f59f64 size=4\n|77f59000| phys_free 77f5ebe0 (detail=0x77f5ebb0)\n\\77f59000/ End thread\nphys_free 77f59000 (detail=0x77f5eb80)\n</code></pre> </li> <li> <p>BAD-not-inserted</p> </li> </ol> <p>proper initializaton of <code>bad</code> card:</p> <pre><code>phys_alloc zone=0x77f6df10 size=4096 align=1000 ret=77f59000 (detail=0x77f61110)\n/77f59000\\ Start thread\n|77f59000| Searching bootorder for: /pci@i0cf8/*@14,7\n|77f59000| sdhci@0xfeb25500 ver=1001 cap=21fe32b2 70\n|77f59000| phys_alloc zone=0x77f6df18 size=44 align=10 ret=f0920 (detail=0x77f5eef0)\n|77f59000| sdcard_set_frequency 50 400 4000\n|77f59000| sdcard_set_frequency 50 200000 0\n|77f59000| host_control contains 0x00000f04\n|77f59000| phys_alloc zone=0x77f6df10 size=80 align=10 ret=77f5ef30 (detail=0x77f611e0)\n|77f59000| Found sdcard at 0xfeb25500: SD card SS08G 7580MiB\n|77f59000| phys_alloc zone=0x77f6df10 size=24 align=10 ret=77f61140 (detail=0x77f5ee90)\n|77f59000| Registering bootable: SD card SS08G 7580MiB (type:2 prio:5 data:f0920)\n\\77f59000/ End thread\nphys_free 77f59000 (detail=0x77f61110)\n\n|77f5d000| phys_alloc zone=0x77f6df10 size=4096 align=1000 ret=77f59000 (detail=0x77f5eca0)\n/77f59000\\ Start thread\n|77f59000| ehci_send_pipe qh=0x77f5ef80 dir=128 data=0x77f59f64 size=4\n|77f59000| ehci_send_pipe qh=0x77f5ef80 dir=128 data=0x77f59f64 size=4\n|77f59000| ehci_send_pipe qh=0x77f5ef80 dir=128 data=0x77f59f64 size=4\n|77f59000| ehci_send_pipe qh=0x77f5ef80 dir=128 data=0x77f59f64 size=4\n|77f59000| phys_free 77f5ed00 (detail=0x77f5ecd0)\n\\77f59000/ End thread\nphys_free 77f59000 (detail=0x77f5eca0)\n</code></pre> <p>It is exactly the same as GOOD</p> <p>BAD card does not respond to CMD8 - timeout</p> <pre><code>|77f59000| sdcard_pio cmd 0 0 1ff0000\n|77f59000| sdcard cmd 0 response 0 0 0 0\n|77f59000| Reset card. ret = 0\n|77f59000| param[0] = 0\n|77f59000| error irq status =  0\n|77f59000| sdcard_pio cmd 81a 1aa 1ff0000\n|77f59000| sdcard_pio command stop (code=1)\n</code></pre> <p>GOOD card responds to CMD8 properly</p> <pre><code>|77f59000| sdcard_pio cmd 0 0 1ff0000\n|77f59000| sdcard cmd 0 response 0 0 0 0\n|77f59000| Reset card. ret = 0\n|77f59000| param[0] = 0\n|77f59000| error irq status =  0\n|77f59000| sdcard_pio cmd 81a 1aa 1ff0000\n|77f59000| sdcard cmd 81a response 1aa 0 0 0\n</code></pre> <ol> <li>When <code>BAD</code> card is inserted before powering on platform, it does not respond    to any command. If it is being inserted during boot (or reinserted after    boot) it responds to commands properly.</li> <li>Cards that are in <code>inactive state</code> does not respond to any command. This may    suggest that <code>BAD</code> card is for some reason in <code>inactive state</code> after    power-on.</li> <li><code>CMD0</code> makes card to go into <code>idle state</code> from any other state (except from    <code>inactive state</code>).</li> <li>According to specification there should be no need to check if card is in    fact in <code>idle state</code>. In this state only a few commands can be executed. We    can send <code>CMD55</code> (which serves for prepending application-specific command).    It responds with <code>R1</code> type response, which contains information about card's    current state. <code>GOOD</code> card was in fact in <code>idle state</code> after reboot. <code>BAD</code>    card has not been responding to this command even in case of multiple <code>CMD0</code>    prepending it, no matter how long the time before those two commands was.    Note that there is no specified time for entering in <code>idle state</code> so card    should be ready to respond right after receiving <code>CMD0</code>and no additional    time window should be necessary.</li> <li>There is no software way (no command) that forces the card to change state    from <code>inactive state</code> to any other.</li> <li>It can change state from <code>inactive</code> to <code>idle</code> after <code>Power Cycle</code> - drop    voltage below 0.5V for at least 1ms or hot-plug (<code>BAD</code> card responds    properly after reinsert). But the same (entering <code>idle state</code>) should take    place during powering on a board.</li> <li>We are up-to-date with mainline SeaBIOS when it comes to sdcard service.</li> </ol>"},{"location":"debug/tplink_hg/","title":"Tplink hg","text":""},{"location":"debug/tplink_hg/#tp-link-stick-test","title":"TP-LInk stick test","text":"<ol> <li> <p>Power on with WLAN stick attached:</p> <p>*SeaBIOS logs:</p> <pre><code>/dff5b000\\ Start thread\n/dff5a000\\ Start thread\n|dff5e000| sdcard_set_frequency 50 400 4000\n/dff59000\\ Start thread\n**|dff59000| xhci_hub_reset port #3: 0x000202e1, powered, pls 7, speed 0 [ - ]\n|dff5d000| set_address 0xdff616a0\n/dff58000\\ Start thread\n|dff5d000| config_usb: 0xdff57fd0\n|dff5d000| device rev=0200 cls=09 sub=00 proto=01 size=64\n/dff56000\\ Start thread\n/dff55000\\ Start thread\n/dff54000\\ Start thread\n/dff53000\\ Start thread\n**|dff59000| XHCI port #3: 0x00200e03, powered, enabled, pls 0, speed 3 [High]\n**|dff59000| set_address 0xdffadfb0\n**|dff59000| xhci_alloc_pipe: usbdev 0xdff61130, ring 0xdffad900, slotid 0, epid 1\n|dff59000| xhci_cmd_enable_slot:\n|dff59000| xhci_process_events port #3: 0x00200e03, powered, enabled, pls 0, speed 3 [High]\n|dff59000| xhci_pross_events port #3: 0x00000e03, powered, enabled, pls 0, speed 3 [High]\n|dff59000| xhci_alloc_pipe: enable slot: got slotid 1\n|dff59000| xhci_cmd_address_device: slotid 1\ndff59000| xhci_realloc_pipe: usbdev 0xdff61130, ring 0xdffad900, slotid 1, epid 1\n|dff59000| config_usb: 0xdffada20\n|dff59000| device rev=0200 cls=ff sub=ff proto=ff size=64\n|dff59000| xhci_realloc_pipe: usbdev 0xdff61130, ring 0xdffad900, slotid 1, epid 1\n\\dff59000/ End thread\n|dff5e000| sdcard_set_frequency 50 200000 0\n|dff5e000| host_control contains 0x00000f04\n|dff5e000| Found sdcard at 0xfeb25500: SD card SD8GB 7600MiB\n|dff5e000| Registering bootable: SD card SD8GB 7600MiB (type:2 prio:5 data:f14e0)\\dff5e000/ End thread\ndff5b000/ End thread\n\\dff58000/ End thread\n\\dff5a000/ End thread\n\\dff5c000/ End thread\n**|dff60000| XHCI no devices found\n\\dff60000/ End thread\ndff53000/ End thread\n\\dff54000/ End thread\n\\dff55000/ End thread\n\\dff56000/ End thread\n**|dff5d000| Initialized USB HUB (0 ports used)\n\\dff5d000/ End thread\n\\dff5f000/ End thread\n</code></pre> <p>*dmesg log after power on:</p> <pre><code>[    6.191070] usb 2-1: ath9k_htc: Firmware htc_9271.fw requested\n[    6.191152] usb 2-1: firmware: failed to load htc_9271.fw (-2)\n[    6.197100] usb 2-1: Direct firmware load failed with error -2\n[    6.197110] usb 2-1: Falling back to user helper\n[    6.197515] usbcore: registered new interface driver ath9k_htc\n[    6.199886] kvm: Nested Virtualization enabled\n[    6.199898] kvm: Nested Paging enabled\n[    6.204528] usb 2-1: ath9k_htc: USB layer deinitialized\n</code></pre> <p>*dmesg log after reattach stick:</p> <pre><code>[  729.384964] usb 2-1: USB disconnect, device number 2\n[  745.206019] usb 2-1: new high-speed USB device number 3 using xhci_hcd\n[  745.353530] usb 2-1: New USB device found, idVendor0cf3, idProduct=9271\n[  745.353546] usb 2-1: New USB device strings: Mfr=16, Product=32, SerialNumber=48\n[  745.353558] usb 2-1: Product: USB2.0 WLAN\n[  745.353568] usb 2-1: Manufacturer: ATHEROS\n[  745.353578] usb 2-1: SerialNumber: 12345\n[  745.355595] usb 2-1: ath9k_htc: Firmware htc_9271.fw requested\n[  745.356341] usb 2-1: firmware: failed to load htc_9271.fw (-2)\n[  745.362233] usb 2-1: Direct firmware load failed with error -2\n[  745.362254] usb 2-1: Falling back to user helper\n[  745.364167] usb 2-1: ath9k_htc: USB layer deinitialized\n</code></pre> <p>It seems that there is no driver. Solution:</p> <pre><code>wget http://linuxwireless.org/download/htc_fw/1.3/htc_9271.fw\nmv htc_9271.fw /lib/firmware\n</code></pre> <p>*dmesg output after getting driver:</p> <pre><code>[ 1341.890122] usb 2-1: USB disconnect, device number 8\n[ 1341.997705] usb 2-1: ath9k_htc: USB layer deinitialized\n[ 1345.673776] usb 2-1: new high-speed USB device number 9 using xhci_hcd\n[ 1345.821304] usb 2-1: New USB device found, idVendor=0cf3, idProduct=9271\n[ 1345.821320] usb 2-1: New USB device strings: Mfr=16, Product=32, SerialNumber=48\n[ 1345.821332] usb 2-1: Product: USB2.0 WLAN\n[ 1345.821342] usb 2-1: Manufacturer: ATHEROS\n[ 1345.821352] usb 2-1: SerialNumber: 12345\n[ 1345.823393] usb 2-1: ath9k_htc: Firmware htc_9271.fw requested\n[ 1345.824238] usb 2-1: firmware: direct-loading firmware htc_9271.fw\n[ 1346.286718] usb 2-1: ath9k_htc: Transferred FW: htc_9271.fw, size: 51272\n[ 1346.522733] ath9k_htc 2-1:1.0: ath9k_htc: HTC initialized with 33 credits\n[ 1346.749872] ath9k_htc 2-1:1.0: ath9k_htc: FW Version: 1.3\n[ 1346.749884] ath: EEPROM regdomain: 0x809c\n[ 1346.749890] ath: EEPROM indicates we should expect a country code\n[ 1346.749898] ath: doing EEPROM country-&gt;regdmn map search\n[ 1346.749907] ath: country maps to regdmn code: 0x52\n[ 1346.749913] ath: Country alpha2 being used: CN\n[ 1346.749920] ath: Regpair used: 0x52\n[ 1346.754781] ieee80211 phy3: Atheros AR9271 Rev:1\n[ 1346.754850] cfg80211: Calling CRDA to update world regulatory domain\n[ 1346.786394] systemd-udevd[818]: renamed network interface wlan0 to wlan1\n</code></pre> </li> <li> <p>Reboot with WLAN stick attached</p> <pre><code>/dff5b000\\ Start thread\n/dff5a000\\ Start thread\n|dff5e000| sdcard_set_frequency 50 400 4000\n/dff59000\\ Start thread\n|dff59000| xhci_hub_reset port #3: 0x000202e1, powered, pls 7, speed 0 [ - ]\n|dff5d000| set_address 0xdff616a0\n/dff58000\\ Start thread\n|dff5e000| sdcard_set_frequency 50 200000 0\n|dff5e000| host_control contains 0x00000f04\n|dff5e000| Found sdcard at 0xfeb25500: SD card SD8GB 7600MiB\n|dff5e000| Registering bootable: SD card SD8GB 7600MiB (type:2 prio:5 data:f14e0)\n\\dff5e000/ End thread\n|dff5d000| config_usb: 0xdff57fd0\n|dff5d000| device rev=0200 cls=09 sub=00 proto=01 size=64\n/dff56000\\ Start thread\n/dff55000\\ Start thread\n/dff54000\\ Start thread\n/dff53000\\ Start thread\n**|dff59000| XHCI port #3: 0x00200e03, powered, enabled, pls 0, speed 3 [High]\n**|dff59000| set_address 0xdffadfb0\n|dff59000| xhci_alloc_pipe: usbdev 0xdff61130, ring 0xdffad900, slotid 0,epid 1\n|dff59000| xhci_cmd_enable_slot:\n|dff59000| xhci_process_events port #3: 0x00200e03, powered, enabled, pls 0, speed 3 [High]\n|dff59000| xhci_process_events port #3: 0x00000e03, powered, enabled, pls 0, speed 3 [High]\n|dff59000| xhci_alloc_pipe: enable slot: got slotid 1\n|dff59000| xhci_cmd_address_device: slotid 1\ndff5b000/ End thread\n\\dff58000/ End thread\n\\dff5a000/ End thread\n\\dff5c000/ End thread\ndff53000/ End thread\n\\dff54000/ End thread\n\\dff55000/ End thread\n\\dff56000/ End thread\n**|dff5d000| Initialized USB HUB (0 ports used)\n\\dff5d000/ End thread\n\\dff5f000/ End thread\n****\ndff59000| WARNING - Timeout at xhci_event_wait:701!\n|dff59000| xhci_alloc_pipe: address device: failed (cc -1)\n|dff59000| xhci_cmd_disable_slot: slotid 1\n|dff59000| WARNING - Timeout at xhci_event_wait:701!\n|dff59000| xhci_alloc_pipe: disable failed (cc -1)\n\\dff59000/ End thread\n|dff60000| XHCI no devices found\ndff60000| WARNING - Timeout at wait_bit:295!\n****\n\\dff60000/ End thread\n</code></pre> </li> </ol>"},{"location":"debug/tpm/","title":"TPM support for apu platforms","text":""},{"location":"debug/tpm/#mainline-tpm-status","title":"Mainline TPM status","text":"<p>Recently sent patches regarding TPM2.0 support for apu2 boards have been merged:</p> <ul> <li>https://review.coreboot.org/c/coreboot/+/21983</li> <li>https://review.coreboot.org/c/coreboot/+/28000</li> </ul> <p>The Infineon SLB9665 TT 2.0 was not detected properly in coreboot, which caused wrong TPM startup procedure for this particular chip to be invoked.</p>"},{"location":"debug/tpm/#tpm-enabling-in-coreboot-for-apu2","title":"TPM enabling in coreboot for apu2","text":"<p>Currently TPM2.0 can be enabled in mainline menuconfig by selecting option:</p> <p>Security -&gt; Trusted Platform Module -&gt; Trusted Platform Module -&gt; 2.0</p> <p>With this setting TPM is initialized properly now and can be used in OS.</p>"},{"location":"debug/tpm/#issues","title":"Issues","text":"<p>SeaBIOS does not display the TPM configuration menu despite coreboot initialize the TPM properly and creates TCPA ACPI table. It looks like SeaBIOS sees it as TPM 1.2:</p> <pre><code>TCGBIOS: Detected a TPM 1.2.\nTCGBIOS: Starting with TPM_Startup(ST_CLEAR)\nReturn from tpm_simple_cmd(99, 1) = 1e\nTCGBIOS: TPM malfunctioning (line 874).\nReturn from tpm_simple_cmd(73, 0) = 1e\n</code></pre> <p>Issusng wrong TPM startup leads to TPM malfunctioning output. After investigating the code which determines the TPM version, one can see, that if certain field in TPM register is 0, then it is TPM 2.0, TPM 1.2 otherwise:</p> <pre><code>    /* TPM 2 has an interface register */\n    u32 ifaceid = readl(TIS_REG(0, TIS_REG_IFACE_ID));\n\n    if ((ifaceid &amp; 0xf) == 0) {\n        /* TPM 2 */\n        return TPM_VERSION_2;\n    }\n    return TPM_VERSION_1_2;\n</code></pre> <p>The first condition fails and code falls down to TPM 1.2.</p>"},{"location":"debug/tpm/#fix","title":"Fix","text":"<p>According to Infineon datasheet, the CHIP complies to TPM Main Specification, Family \"2.0\", Level 00, Revision 01.16. However I could nto find there any information about hardware registers.</p> <p>After digging in TPM PTP specification it turns out, that it is not only method to identificate TPM2.0.</p> <p>Looking at Interface Identifier register (which is used to identify TPM on SeaBIOS rel-1.11.2) we can see that Interface Type must be 0 for TPM2.0 (page 54).</p> <p>But...</p> <pre><code>1. A value of 1111b in this field SHALL be interpreted to mean the TPM supports a PC\nClient TPM Interface Specification v1.3 compliant FIFO interface.\n2. If the TPM supports this specification, the value of this field SHALL NOT be 1111b.\n...\n4. If this field is set to 0000b:\na. The TPM SHALL correctly report all other capabilities for TPM_INTERFACE_ID_x\nfields\nb. The TPM SHALL support TPM_INTERFACE_ID_x.InterfaceVersion, which SHALL\nbe defined for the FIFO interface as 0h.\n</code></pre> <p>And note 925:</p> <pre><code>TPMs implemented to support PC Client Specific TPM Interface Specification 1.3 or\nearlier will return 1111b for InterfaceType. If this field returns 1111b, a TPM may be a\nTPM family 2.0 implemented with a FIFO interface compliant with TIS 1.3. If this is\nthe case, PTP specific features will be implemented as part of the\nTPM_INTF_CAPABILITY_x register, not this register.\n</code></pre> <p>That means there is also Interface Capability register which reports interface version. See page 100 of PTP specification, bits 28:30:</p> <p><code>011: Interface 1.3 for TPM 2.0 as defined in this specification.</code></p> <p>After correcting the conditions, the TPM should work fine. See work on SeaBIOS repository</p> <p>Utilizing <code>TPM_INTF_CAPABILITY_x</code> leads to proper initialization of TPM2.0.</p> <pre><code>TPM ifaceid: ffffffff\nTPM ifacecap: 300000ff\nTCGBIOS: Detected a TPM 2.\nReturn from tpm_simple_cmd(144, 0) = 100\nTCGBIOS: Return value from sending TPM2_CC_Startup(SU_CLEAR) = 0x00000100\nReturn from tpm_simple_cmd(143, 1) = 0\nTCGBIOS: Return value from sending TPM2_CC_SelfTest = 0x00000000\nTCGBIOS: Return value from sending TPM2_CC_GetCapability = 0x00000000\nTCGBIOS: LASA = 0xcfe9a000, next entry = 0xcfe9a000\nTCGBIOS: SMBIOS at 0x000f6ee0\nTCGBIOS: LASA = 0xcfe9a000, next entry = 0xcfe9a048\nTCGBIOS: LASA = 0xcfe9a000, next entry = 0xcfe9a0ac\n</code></pre> <p>One can see that Interface Identifier register value is completely invalid. SeaBIOS must rely on <code>TPM_INTF_CAPABILITY_x</code> register.</p> <p>NOTE: unfortunately this fix is already present in SeaBIOS mainline repository, but still on master branch. It is not available on rel-1.11.2 or 1.11-stable</p> <p>This and few other commits extending TPM support are present:</p> <ul> <li>d1343e6 tpm: Request access to locality 0</li> <li>4922d6c tpm: when CRB is active, select, lock it, and check addresses</li> <li>8bd306e tpm: revert return values for successful/failed CRB probing</li> <li>408630e tpm: Wait for tpmRegValidSts flag on CRB interface before probing</li> <li>5adc8bd tpm: Handle unimplemented TIS_REG_IFACE_ID in tis_get_tpm_version()</li> <li>96060ad tpm: Wait for interface startup when probing</li> <li>559b3e2 tpm: Refactor duplicated wait code in tis_wait_sts() &amp; crb_wait_reg()</li> <li>9c6e73b tpm: add TPM CRB device support</li> <li>a197e20 tpm: use get_tpm_version() callback</li> <li>c75d45a tpm: generalize init_timeout()</li> </ul>"},{"location":"debug/tpm/#conclusion","title":"Conclusion","text":"<p>To use Infineon SLB9665 TPM2.0 in SeaBIOS, one should use master branch to get it working.</p>"},{"location":"debug/usb-debugging/","title":"apu2 USB xHCi debugging","text":""},{"location":"debug/usb-debugging/#seabios-debug-output","title":"SeaBIOS debug output","text":"<p>The first step was to analyze verbose output on SeaBIOS. The minimal necessary debug level is 5 to get the xHCI verbosity.</p> <p>The first thing which can be noticed is:</p> <pre><code>|cff49000| xhci_process_events port #2: 0x00021203, powered, enabled, pls 0, speed 4 [Super]\n|cff49000| WARNING - Timeout at xhci_event_wait:743!\n|cff49000| xhci_alloc_pipe: address device: failed (cc -1)\n|cff49000| xhci_cmd_disable_slot: slotid 1\n|cff49000| xhci_trb_queue: ring 0xcff9ed00 [nidx 3, len 0]\n|cff49000| xhci_doorbell: slotid 0, epid 0\n|cff49000| WARNING - Timeout at xhci_event_wait:743!\n|cff49000| xhci_alloc_pipe: disable failed (cc -1)\n</code></pre> <p>According to xHCI specification, the proper initialization procedure is as follows:</p> <ol> <li>Reset the device on the hub</li> <li>Perform enable slot</li> <li>Send adress device command</li> <li>Configure the device</li> </ol> <p>As seen above in the log, adress command fails with timeout. After adjusting the timeouts to get rid of these problems:</p> <pre><code>|cff47000| XHCI port #2: 0x00001203, powered, enabled, pls 0, speed 4 [Super]\n|cff47000| set_address 0xcff9efb0\n|cff47000| xhci_alloc_pipe: usbdev 0xcff4dc60, ring 0xcff9e200, slotid 0, epid 1\n|cff47000| xhci_cmd_enable_slot:\n|cff47000| xhci_trb_queue: ring 0xcff9ed00 [nidx 7, len 0]\n|cff47000| xhci_doorbell: slotid 0, epid 0\n|cff47000| xhci_process_events: ring 0xcff9ed00 [trb 0xcff9ed60, evt 0xcff9ee00, type 33, eidx 7, cc 1]\n|cff47000| xhci_alloc_pipe: enable slot: got slotid 2\n|cff47000| xhci_cmd_address_device: slotid 2\n|cff47000| xhci_trb_queue: ring 0xcff9ed00 [nidx 8, len 0]\n|cff47000| xhci_doorbell: slotid 0, epid 0\n|cff47000| xhci_process_events: ring 0xcff9ed00 [trb 0xcff9ed70, evt 0xcff9ee00, type 33, eidx 8, cc 4]\n|cff47000| xhci_alloc_pipe: address device: failed (cc 4)\n|cff47000| xhci_cmd_disable_slot: slotid 2\n|cff47000| xhci_trb_queue: ring 0xcff9ed00 [nidx 9, len 0]\n|cff47000| xhci_doorbell: slotid 0, epid 0\n|cff47000| xhci_process_events: ring 0xcff9ed00 [trb 0xcff9ed80, evt 0xcff9ee00, type 33, eidx 9, cc 1]\n</code></pre> <p>This time the address command returned status 4 which stands for Transaction Error.</p> <p>xHCI specification says:</p> <pre><code>If the SET_ADDRESS request was unsuccessful, system software may issue a\nDisable Slot Command for the slot or reset the device and attempt the Address\nDevice Command again. An unsuccessful Address Device Command shall leave\nthe Device Slot in the Default state.\n\nA USB Transaction Error Completion Code for an Address Device Command may\nbe due to a Stall response from a device. Software should issue a Disable Slot\nCommand for the Device Slot then an Enable Slot Command to recover from this\nerror.\n</code></pre> <p>Tried both approaches without success. The result is the same, device respond with Transaction Error (<code>cc 4</code>).</p>"},{"location":"debug/usb-debugging/#usb-protocol-30-vs-31","title":"USB protocol 3.0 vs 3.1","text":"<p>I have accidentally discovered that some sticks are properly detected regardless of the warmboot or coldboot. I started wondering what is the difference between them (price, quality?). So I had two different sticks:</p> <pre><code>Device Descriptor:\n  bLength                18\n  bDescriptorType         1\n  bcdUSB               3.10\n  bDeviceClass            0 (Defined at Interface level)\n  bDeviceSubClass         0\n  bDeviceProtocol         0\n  bMaxPacketSize0         9\n  idVendor           0x0951 Kingston Technology\n  idProduct          0x1666\n  bcdDevice            0.01\n  iManufacturer           1 Kingston\n  iProduct                2 DataTraveler 3.0\n  iSerial                 3 60A44C4252A8F17059930048\n  bNumConfigurations      1\n</code></pre> <pre><code>Device Descriptor:\n  bLength                18\n  bDescriptorType         1\n  bcdUSB               3.00\n  bDeviceClass            0 (Defined at Interface level)\n  bDeviceSubClass         0\n  bDeviceProtocol         0\n  bMaxPacketSize0         9\n  idVendor           0x054c Sony Corp.\n  idProduct          0x09c2\n  bcdDevice            1.10\n  iManufacturer           1 Sony\n  iProduct                2 Storage Media\n  iSerial                 3 5C0710618C3915CF56\n  bNumConfigurations      1\n</code></pre> <p>The one that had problem with detection in SeaBIOS is Kingston which supports USB 3.1 protocol. On the contrary the Sony stick was always detected and supports USB 3.0 protocol.</p> <p>Although USB 3.1 should be back-compatible with USB 3.0, I have dug a little bit into the changes between 3.0 and 3.1 and found that:</p> <pre><code>USB 3.1 brings changes in every layer for both the host and device, including\nhubs that are in-between. But one of the ideas in USB 3.1 is to not require\nchanges to the software, so a hardware-based, enhanced SuperSpeed device\nnotification mechanism was introduced so that devices can communicate with hosts\nat a lower layer and report that they are operating at this higher rate. New\nSuperSpeedPlus host controllers must utilize this extra bandwidth without\nrequiring changes to the existing host drivers.\n\nThe higher frequency involved with the 10 Gbps data rate means that there is a\ngood chance that system designers will need to include repeaters. If the host or\ndevice loss is greater than 7dB at 5GHz, a repeater may be necessary on both the\nhost and the device to travel across the cable.\n\nSuperSpeed posed a problem because a single bit error could cause the link to go\ninto recovery in two cases: with skip ordered sets or with start link commands.\nThis caused an error rate of up to 5.7^-15.\n\nUSB 3.1 introduces a new start-up speed negotiation protocol. The goal of this\nprotocol is to get the link up to the highest rate supported by both devices.\nThe way this works is that it uses the low frequency periodic signal (LFPS) that\nwas introduced in USB 3.0 and it changes it slightly to turn into a pulse width\nmodulation message, called the LFPS-Based PWM Messaging (LBPM).\n</code></pre> <p>That made me a hint, what if USB 3.1 memsticks respond in a slightly different way causing SeaBIOS to fail to initialize them?</p> <p>Another test I did was coldboot tests. I have noticed that USB 3.1 stick was detected properly after coldbooting the platform in 1 minute interval. That leads to a conclusion that some capacitance or even impedance is making the device respone stall (as xHCI spec says). Comparing the temperture of stick connectors I also noticed that 3.1 stick emits much more heat than 3.0 stick. This can have significant impact on the electrical characteristics of the hub.</p> <p>Another thing that is worth mentioning is that SeaBIOS recognizes only two types of USB protocol on xHCI, 3.0 and 2.0:</p> <pre><code>XHCI init on dev 00:10.0: regs @ 0xf7f22000, 4 ports, 32 slots, 32 byte contexts\nXHCI    extcap 0x1 @ 0xf7f22500\nXHCI    protocol USB  3.00, 2 ports (offset 1), def 0\nXHCI    protocol USB  2.00, 2 ports (offset 3), def 10\nXHCI    extcap 0xa @ 0xf7f22540\n</code></pre> <p>Unfortunately these aspects need much more investigation with many more different USB sticks 3.0 and 3.1.</p> <p>Another problem is I have no idea why the Transaction Error code is received (no possibility to look at the lwo level signals on the USB lines). What does xHCI spec mean by stall? To answer that question, maybe much more specialized hardware and tools would be required.</p>"},{"location":"debug/usb-debugging/#test-results","title":"Test results","text":"<p>I have run a RF test on the USB 3.0 stick and it survived 50 coldboots. The interval between relay switching was 5 seconds on coldboots. It could not pass the warmboot test, although it survived only 7 cycles (still better than 0 cycles in case of USB 3.1).</p> <p>The same test on the USB3.1 stick did not pass the 50 warmboots. I achieved a pass on coldboots when I was waiting between relay switches for 30 seconds. That leads to conclusion that the platform needs to \"cool down\" before it will attempt to initialize USB 3.1 stick (maybe some capacitance discharging or wire impedance fall because of the temperature fall).</p>"},{"location":"debug/usb-debugging/#apu4-and-xhci-problems","title":"apu4 and xHCI problems","text":"<p>apu4 boards seem to have problems with detecting two USB 3.x sticks simultaneously. To ensure repeatable results, identical sticks with identical content were used in the tests:</p> <pre><code>Device Descriptor:\n  bLength                18\n  bDescriptorType         1\n  bcdUSB               3.00\n  bDeviceClass            0 (Defined at Interface level)\n  bDeviceSubClass         0\n  bDeviceProtocol         0\n  bMaxPacketSize0         9\n  idVendor           0x0951 Kingston Technology\n  idProduct          0x1666\n  bcdDevice            1.10\n  iManufacturer           1 Kingston\n  iProduct                2 DataTraveler 3.0\n  iSerial                 3 0015F284C2ADB04189554426\n  bNumConfigurations      1\n</code></pre> <p>In the first place it is worth mentioning that xHCI initialisation is done in coreboot by setting just one boolean variable to TRUE. AGESA handles out the rest (xHCI fimrware loading, setting port routing, power management etc.) as specified in BKDG. Used xHCI firmware is the newest available.</p> <p>Interfacing with with USB devices is done in SeaBIOS via dedicated xHCI PCI registers and xHCI memory mapped IO configuration registers, so there is no mistake in the implementation (however not all registers are documented in BKDG, we had to assume some register content according to Intel e8000 SoC datasheet which described every register and every bit, example: BKDG describes only 1 bit in port status and control register, rest is \"reserved\").</p> <p>After deep investigation with verbose debug output in SeaBIOS we have discovered that one port is not functioning properly (bottom one). It turned out that after a hub reset, when SeaBIOS is polling <code>USB Port Status and Control</code> register for <code>Current Connect Status</code> bit (device detection procedure), this bit is not being asserted even if polling time is significantly increased (this bit is updated by hardware). If this bit is not asserted, USB 3.0 protocol can not kick in. Given that we suspect an electrical issue on the Super Speed TX and RX lines which are used in the device detection procedure. USB2.0 sticks does not have such problems because they do not use Super Speed TX and RX lines.</p> <p>When the device is detected the USB protocol kicks in and USB stick is configured properly (although a KINGSTON USB3.1 stick gives weird responses during adress command which were described earlier in this document).</p> <p>SeaBIOS has also implemented a delay called <code>XHCI_TIME_POST_POWER</code> defined as 100ms. After host controller reset, platform waits 100ms for power stabilization on USB hub. Unfortunately increasing the delay to 200 or 250 seconds does not make any difference in device detection.</p> <p>We did some improvements in the terms of timings again, increased slightly the detection maximum time etc. As a result we were able to improve the detection rate slightly and even make two ports work on the apu4b Serial Number: WN1226344_1749. But still the other two apu4a boards we had available do not detect USB stick in bottom port (<code>Current Connect Status</code> bit not asserted).</p> <p>We have carried out some test on the debug binary to show the statistics of detection and <code>Current Connect Status</code> bit assertion. The problem exists only on apu4 boards, so to compare the results, apu2 board was used too:</p> port\\board apu2c apu4a apu4b top 100% 100% 100% bottom 100% 0% 100% <p>apu4a Serial Number: WN1142380_1708 apu4b Serial Number: WN1226344_1749 apu2c Serial Number: WN1101743_1629</p> <p>Both boards used the same coreboot base v4.6.8 and the same SeaBIOS version. The table shows the rate of <code>Current Connect Status</code> bit assertion in corresponding hub ports. The table clearly shows the \"toxic\" port, but it is not affecting the neighbouring port.</p> <p>What is interesting, on the apu4a board when cross-swapped the sticks, the top port started to be \"toxic\". It turned out that one stick is not detected on any port on that particular apu4a board (however it is detected on apu4b and apu2c tested boards). Despite identical manufacturer, product id and content the sticks behave in different way on this particular board. To confirm it, a not working stick was exchanged with following stick:</p> <pre><code>Device Descriptor:\n  bLength                18\n  bDescriptorType         1\n  bcdUSB               3.00\n  bDeviceClass            0 (Defined at Interface level)\n  bDeviceSubClass         0\n  bDeviceProtocol         0\n  bMaxPacketSize0         9\n  idVendor           0x090c Silicon Motion, Inc. - Taiwan (formerly Feiya Technology Corp.)\n  idProduct          0x1000 Flash Drive\n  bcdDevice           11.00\n  iManufacturer           1 Intenso\n  iProduct                2 Intenso Premium Line\n  iSerial                 3 0130000000021889\n</code></pre> <p>Now both ports detected USB3.0 sticks:</p> <pre><code>Select boot device:\n\n1. USB MSC Drive Kingston DataTraveler 3.0 PMAP\n2. USB MSC Drive Intenso Premium Line 1100\n3. AHCI/0: SATA SSD ATA-10 Hard-Disk (15272 MiBytes)\n4. Payload [memtest]\n5. Payload [setup]\n</code></pre> <p>Taking all results above into consideration, we suspect an eletrical problems on the USB3.0 lines or on the physical connection. After looking onto not-working USB3.0 stick I noticed that SSTX+ line was a little bit curved downside, which could possibly prevent the stick from proper detection. After manual lifting the SSTX+ pin upside the stick was suddenly detected properly. Proper detection has been confirmed with automated validation test with apu4_v4.6.8 image:</p> port\\board apu4a 1 apu4a 2 apu4b top cold:54%, warm:OK, reset:OK cold:OK, warm:OK, reset:OK cold:OK, warm:OK, reset:OK bottom cold:OK, warm:OK, reset:OK cold:OK, warm:OK, reset:68% cold:OK, warm:OK, reset:OK <p>Test conditions: - 2x same USB3.0 sticks <code>Kingston DataTraveler 3.0</code> - 50x coldboot, warmboot, reset cycles - two USB entries should appear in boot menu - apu4a 1 Serial Number: WN1142380_1708 - apu4a 2 Serial Number: WN1142383_1708 - apu4b Serial Number: WN1226344_1749</p> <p>apu4a 1 has a 46% detection rate of two sticks after coldboot(1 stick sometimes do not appear in boot menu). apu4a 2 has a 68% detection rate of two sticks after shorting reset pin (1 stick sometimes do not appear in boot menu).</p> <p>Taking all results above into consideration, we still suspect an eletrical problem on the USB3.0 lines. The eletrical level detection according to USB3.x spec is as follows:</p> <pre><code>The Rx detection operates on the principle of the RC time constant of the\ncircuit. This time constant changes based on the presence of the receiver\ntermination.\n\n1. A Transmitter must start at a stable voltage prior to the detect common mode\nshift.\n2. A Transmitter changes the common mode voltage on Txp and Txn consistent with\ndetection of Receiver high impedance which is bounded by parameter\nZ_RX-HIGH-IMP-DC-POS listed in Table 6-13.\n3. A Receiver is detected based on the rate that the lines change to the new\nvoltage:\n\n- The Receiver is not present if the voltage at the Transmitter charges at a\nrate dictated only by the Transmitter impedance and the capacitance of the\ninterconnect and series capacitor.\n\n- The Receiver is present if the voltage at the Transmitter charges at a rate\ndictated by the Transmitter impedance, the series capacitor, the interconnect\ncapacitance, and the Receiver termination.\n</code></pre> <p>So basically if impedance of the USB3.x lines does not change due to stick presence, the charge time will remain the same, causing hardware be unable to detect device. Eletrical engineer should investigate the USB3.0 lines and check them on apu4 board (the not-working scenario) and other working board like apu2 in order to exclude the possibility of wrong board layout, wiring etc. Without a report we can not possibly make any step further.</p>"},{"location":"debug/usb-debugging/#testing-uefi-tianocore-stack","title":"Testing UEFI (Tianocore) stack","text":"<p>Similar tests were performed with debug <code>tianocore</code> payload. First of all, USB sticks rarely were detected as SuperSpeed (3.0) devices, usually only in a few boots after platform was turned off for some time.</p> <p>This is log from first boot:</p> <pre><code>XhcClearRootHubPortFeature: status Success\nUsbEnumeratePort: port 1 state - 803, change - 01 on CF71FD18\nUsbEnumeratePort: Device Connect/Disconnect Normally\nUsbEnumeratePort: new device connected at port 1\nXhcUsbPortReset!\nXhcSetRootHubPortFeature: status Success\nXhcClearRootHubPortFeature: status Success\nXhcClearRootHubPortFeature: status Success\nEnable Slot Successfully, The Slot ID = 0x2\n    Address 2 assigned successfully\nUsbEnumerateNewDev: hub port 1 is reset\nUsbEnumerateNewDev: PortStatus - 803 PortChangeStatus - 0\nUsbEnumerateNewDev: device is of 3 speed\nUsbEnumerateNewDev: device uses translator (0, 0)\nUsbEnumerateNewDev: device is now ADDRESSED at 2\nUsbEnumerateNewDev: max packet size for EP 0 is 512\nEvaluate context\nUsbBuildDescTable: device has 1 configures\nUsbGetOneConfig: total length is 44\nUsbParseConfigDesc: config 1 has 1 interfaces\nUsbParseInterfaceDesc: interface 0(setting 0) has 2 endpoints\nEndpoint[81]: Created BULK ring [CF729200~CF72A200)\nEndpoint[2]: Created BULK ring [CF72A200~CF72B200)\nConfigure Endpoint\nUsbEnumerateNewDev: device 2 is now in CONFIGED state\nUsbSelectConfig: config 1 selected for device 2\nUsbSelectSetting: setting 0 selected for interface 0\n</code></pre> <p>This is from another boot:</p> <pre><code>XhcClearRootHubPortFeature: status Success\nUsbEnumeratePort: port 3 state - 01, change - 01 on CF71FD18\nUsbEnumeratePort: Device Connect/Disconnect Normally\nUsbEnumeratePort: new device connected at port 3\nXhcUsbPortReset!\nXhcSetRootHubPortFeature: status Success\nXhcClearRootHubPortFeature: status Success\nXhcClearRootHubPortFeature: status Success\nEnable Slot Successfully, The Slot ID = 0x2\n    Address 2 assigned successfully\nUsbEnumerateNewDev: hub port 3 is reset\nUsbEnumerateNewDev: device is of 2 speed\nUsbEnumerateNewDev: device uses translator (0, 0)\nUsbEnumerateNewDev: device is now ADDRESSED at 2\nUsbEnumerateNewDev: max packet size for EP 0 is 64\nEvaluate context\nUsbBuildDescTable: device has 1 configures\nUsbGetOneConfig: total length is 32\nUsbParseConfigDesc: config 1 has 1 interfaces\nUsbParseInterfaceDesc: interface 0(setting 0) has 2 endpoints\nEndpoint[81]: Created BULK ring [CF729200~CF72A200)\nEndpoint[2]: Created BULK ring [CF72A200~CF72B200)\nConfigure Endpoint\nUsbEnumerateNewDev: device 2 is now in CONFIGED state\nUsbSelectConfig: config 1 selected for device 2\nUsbSelectSetting: setting 0 selected for interface 0\n</code></pre> <p>These are taken from the same platform and stick, nothing was changed between them, but device speed is different. This could point to hardware problem, either thermal issue or some parasite capacitance. When a stick isn't recognized as a SuperSpeed one, it is initialized as HighSpeed device usually, but not always. <code>lsusb</code> started from Debian seems to match the speed detected by UEFI, but not much tests from Linux were done. For some reason hot-plug was not working, it is unclear if this issue is connected.</p> <p>Total detection rate is about 80% for cold boot (success means that both sticks were detected). It gets lower for longer tests, down to 70% for 1000 iterations. Warm boot and reset results are better, but it is possible that these depend on initial cold boot result. Most runs for warm boot and reboot showed 100% success rate, while for a few this rate was significantly lower (about 40-50%), intermediate values were not observed.</p> <p>In very rare cases firmware hang during boot process. This is an example of such a hang:</p> <pre><code>(...)\nUsbSelectSetting: setting 0 selected for interface 0\nInstallProtocolInterface: 09576E91-6D3F-11D2-8E39-00A0C969723B CF71F598\nInstallProtocolInterface: 2B2F68D6-0CD2-44CF-8E8B-BBA20B1B5B75 CF71EEC0\nUsbConnectDriver: TPL before connect is 8, CF71F398\nStop Slot = 1,Dci = 3\nXhcStopEndpoint: Slot = 0x1, Dci = 0x3\nXhcSetTrDequeuePointer: Slot = 0x1, Dci = 0x3, Urb = 0xCF71DD98\nXhcBulkTransfer: error - Time out, transfer - 40\nUsbBotDataTransfer: (Time out)\nStop Slot = 1,Dci = 3\nXhcStopEndpoint: Slot = 0x1, Dci = 0x3\nXhcSetTrDequeuePointer: Slot = 0x1, Dci = 0x3, Urb = 0xCF71DD98\nXhcBulkTransfer: error - Time out, transfer - 40\nStop Slot = 1,Dci = 3\nXhcStopEndpoint: Slot = 0x1, Dci = 0x3\nXhcSetTrDequeuePointer: Slot = 0x1, Dci = 0x3, Urb = 0xCF71DD98\nXhcBulkTransfer: error - Time out, transfer - 40\n</code></pre> <p>Last lines are repeated every 60 seconds or so. This particular log is from reboot test immediately after failed cold boot (only one stick was detected).</p> <p>Full boot logs:</p> <ul> <li>tiano.log - both sticks detected</li> <li>tiano2.log - one stick detected</li> </ul> <p>The stick that was not detected for some reason is still visible as a boot option in the second log, but boot order was changed. Note that there are more USB devices connected to mPCIe connectors, they are also visible in log files, along with <code>Device Error</code>:</p> <pre><code>UsbBuildDescTable: device has 1 configures\nUsbGetOneConfig: total length is 25\nUsbParseConfigDesc: config 1 has 1 interfaces\nUsbParseInterfaceDesc: interface 0(setting 0) has 1 endpoints\nEhcExecTransfer: transfer failed with 2\nEhcControlTransfer: error - Device Error, transfer - 2\nUsbBuildDescTable: get language ID table Unsupported\nUsbEnumerateNewDev: device 1 is now in CONFIGED state\nUsbSelectConfig: config 1 selected for device 1\nUsbSelectSetting: setting 0 selected for interface 0\n</code></pre> <p>Turning off all EHCI controllers doesn't affect USB stick detection rate.</p>"},{"location":"debug/usb-sticks/","title":"USB sticks","text":""},{"location":"debug/usb-sticks/#intenso","title":"Intenso","text":"<pre><code>Device Descriptor:\n  bLength                18\n  bDescriptorType         1\n  bcdUSB               3.00\n  bDeviceClass            0 (Defined at Interface level)\n  bDeviceSubClass         0\n  bDeviceProtocol         0\n  bMaxPacketSize0         9\n  idVendor           0x090c Silicon Motion, Inc. - Taiwan (formerly Feiya Technology Corp.)\n  idProduct          0x1000 Flash Drive\n  bcdDevice           11.00\n  iManufacturer           1 Intenso\n  iProduct                2 Intenso Premium Line\n  iSerial                 3 0130000000020180\n  bNumConfigurations      1\n  Configuration Descriptor:\n    bLength                 9\n    bDescriptorType         2\n    wTotalLength           44\n    bNumInterfaces          1\n    bConfigurationValue     1\n    iConfiguration          0\n    bmAttributes         0x80\n      (Bus Powered)\n    MaxPower               76mA\n    Interface Descriptor:\n      bLength                 9\n      bDescriptorType         4\n      bInterfaceNumber        0\n      bAlternateSetting       0\n      bNumEndpoints           2\n      bInterfaceClass         8 Mass Storage\n      bInterfaceSubClass      6 SCSI\n      bInterfaceProtocol     80 Bulk-Only\n      iInterface              0\n      Endpoint Descriptor:\n        bLength                 7\n        bDescriptorType         5\n        bEndpointAddress     0x01  EP 1 OUT\n        bmAttributes            2\n          Transfer Type            Bulk\n          Synch Type               None\n          Usage Type               Data\n        wMaxPacketSize     0x0400  1x 1024 bytes\n        bInterval               0\n        bMaxBurst               8\n      Endpoint Descriptor:\n        bLength                 7\n        bDescriptorType         5\n        bEndpointAddress     0x82  EP 2 IN\n        bmAttributes            2\n          Transfer Type            Bulk\n          Synch Type               None\n          Usage Type               Data\n        wMaxPacketSize     0x0400  1x 1024 bytes\n        bInterval               0\n        bMaxBurst               8\nBinary Object Store Descriptor:\n  bLength                 5\n  bDescriptorType        15\n  wTotalLength           22\n  bNumDeviceCaps          2\n  USB 2.0 Extension Device Capability:\n    bLength                 7\n    bDescriptorType        16\n    bDevCapabilityType      2\n    bmAttributes   0x00000002\n      Link Power Management (LPM) Supported\n  SuperSpeed USB Device Capability:\n    bLength                10\n    bDescriptorType        16\n    bDevCapabilityType      3\n    bmAttributes         0x00\n    wSpeedsSupported   0x000c\n      Device can operate at High Speed (480Mbps)\n      Device can operate at SuperSpeed (5Gbps)\n    bFunctionalitySupport   2\n      Lowest fully-functional device speed is High Speed (480Mbps)\n    bU1DevExitLat           4 micro seconds\n    bU2DevExitLat           4 micro seconds\nDevice Status:     0x0000\n  (Bus Powered)\n</code></pre>"},{"location":"debug/usb-sticks/#kingston-data-traveler","title":"Kingston Data Traveler","text":"<pre><code>Device Descriptor:\n  bLength                18\n  bDescriptorType         1\n  bcdUSB               3.00\n  bDeviceClass            0 (Defined at Interface level)\n  bDeviceSubClass         0\n  bDeviceProtocol         0\n  bMaxPacketSize0         9\n  idVendor           0x0951 Kingston Technology\n  idProduct          0x1666\n  bcdDevice            1.10\n  iManufacturer           1 Kingston\n  iProduct                2 DataTraveler 3.0\n  iSerial                 3 0015F284C2ADB04189554426\n  bNumConfigurations      1\n  Configuration Descriptor:\n    bLength                 9\n    bDescriptorType         2\n    wTotalLength           44\n    bNumInterfaces          1\n    bConfigurationValue     1\n    iConfiguration          0\n    bmAttributes         0x80\n      (Bus Powered)\n    MaxPower              126mA\n    Interface Descriptor:\n      bLength                 9\n      bDescriptorType         4\n      bInterfaceNumber        0\n      bAlternateSetting       0\n      bNumEndpoints           2\n      bInterfaceClass         8 Mass Storage\n      bInterfaceSubClass      6 SCSI\n      bInterfaceProtocol     80 Bulk-Only\n      iInterface              0\n      Endpoint Descriptor:\n        bLength                 7\n        bDescriptorType         5\n        bEndpointAddress     0x81  EP 1 IN\n        bmAttributes            2\n          Transfer Type            Bulk\n          Synch Type               None\n          Usage Type               Data\n        wMaxPacketSize     0x0400  1x 1024 bytes\n        bInterval               0\n        bMaxBurst               3\n      Endpoint Descriptor:\n        bLength                 7\n        bDescriptorType         5\n        bEndpointAddress     0x02  EP 2 OUT\n        bmAttributes            2\n          Transfer Type            Bulk\n          Synch Type               None\n          Usage Type               Data\n        wMaxPacketSize     0x0400  1x 1024 bytes\n        bInterval               0\n        bMaxBurst               3\nBinary Object Store Descriptor:\n  bLength                 5\n  bDescriptorType        15\n  wTotalLength           22\n  bNumDeviceCaps          2\n  USB 2.0 Extension Device Capability:\n    bLength                 7\n    bDescriptorType        16\n    bDevCapabilityType      2\n    bmAttributes   0x00000006\n      Link Power Management (LPM) Supported\n  SuperSpeed USB Device Capability:\n    bLength                10\n    bDescriptorType        16\n    bDevCapabilityType      3\n    bmAttributes         0x00\n    wSpeedsSupported   0x000e\n      Device can operate at Full Speed (12Mbps)\n      Device can operate at High Speed (480Mbps)\n      Device can operate at SuperSpeed (5Gbps)\n    bFunctionalitySupport   2\n      Lowest fully-functional device speed is High Speed (480Mbps)\n    bU1DevExitLat          10 micro seconds\n    bU2DevExitLat        2047 micro seconds\nDevice Status:     0x0000\n  (Bus Powered)\n</code></pre>"},{"location":"debug/usb-sticks/#corsair-voyager-vega","title":"Corsair Voyager Vega","text":"<pre><code>Device Descriptor:\n  bLength                18\n  bDescriptorType         1\n  bcdUSB               3.10\n  bDeviceClass            0 (Defined at Interface level)\n  bDeviceSubClass         0 \n  bDeviceProtocol         0 \n  bMaxPacketSize0         9\n  idVendor           0x1b1c Corsair\n  idProduct          0x1a14 \n  bcdDevice            1.10\n  iManufacturer           1 \n  iProduct                2 \n  iSerial                 3 \n  bNumConfigurations      1\n  Configuration Descriptor:\n    bLength                 9\n    bDescriptorType         2\n    wTotalLength           44\n    bNumInterfaces          1\n    bConfigurationValue     1\n    iConfiguration          0 \n    bmAttributes         0x80\n      (Bus Powered)\n    MaxPower              126mA\n    Interface Descriptor:\n      bLength                 9\n      bDescriptorType         4\n      bInterfaceNumber        0\n      bAlternateSetting       0\n      bNumEndpoints           2\n      bInterfaceClass         8 Mass Storage\n      bInterfaceSubClass      6 SCSI\n      bInterfaceProtocol     80 Bulk-Only\n      iInterface              0 \n      Endpoint Descriptor:\n        bLength                 7\n        bDescriptorType         5\n        bEndpointAddress     0x81  EP 1 IN\n        bmAttributes            2\n          Transfer Type            Bulk\n          Synch Type               None\n          Usage Type               Data\n        wMaxPacketSize     0x0400  1x 1024 bytes\n        bInterval               0\n        bMaxBurst               3\n      Endpoint Descriptor:\n        bLength                 7\n        bDescriptorType         5\n        bEndpointAddress     0x02  EP 2 OUT\n        bmAttributes            2\n          Transfer Type            Bulk\n          Synch Type               None\n          Usage Type               Data\n        wMaxPacketSize     0x0400  1x 1024 bytes\n        bInterval               0\n        bMaxBurst               3\n</code></pre>"},{"location":"debug/usb-sticks/#adata-dashdrive-uv131","title":"ADATA DashDrive UV131","text":"<pre><code>Device Descriptor:\n  bLength                18\n  bDescriptorType         1\n  bcdUSB               3.00\n  bDeviceClass            0 (Defined at Interface level)\n  bDeviceSubClass         0 \n  bDeviceProtocol         0 \n  bMaxPacketSize0         9\n  idVendor           0x125f A-DATA Technology Co., Ltd.\n  idProduct          0xdd1a \n  bcdDevice           11.00\n  iManufacturer           1 \n  iProduct                2 \n  iSerial                 3 \n  bNumConfigurations      1\n  Configuration Descriptor:\n    bLength                 9\n    bDescriptorType         2\n    wTotalLength           44\n    bNumInterfaces          1\n    bConfigurationValue     1\n    iConfiguration          0 \n    bmAttributes         0x80\n      (Bus Powered)\n    MaxPower              126mA\n    Interface Descriptor:\n      bLength                 9\n      bDescriptorType         4\n      bInterfaceNumber        0\n      bAlternateSetting       0\n      bNumEndpoints           2\n      bInterfaceClass         8 Mass Storage\n      bInterfaceSubClass      6 SCSI\n      bInterfaceProtocol     80 Bulk-Only\n      iInterface              0 \n      Endpoint Descriptor:\n        bLength                 7\n        bDescriptorType         5\n        bEndpointAddress     0x01  EP 1 OUT\n        bmAttributes            2\n          Transfer Type            Bulk\n          Synch Type               None\n          Usage Type               Data\n        wMaxPacketSize     0x0400  1x 1024 bytes\n        bInterval               0\n        bMaxBurst               8\n      Endpoint Descriptor:\n        bLength                 7\n        bDescriptorType         5\n        bEndpointAddress     0x82  EP 2 IN\n        bmAttributes            2\n          Transfer Type            Bulk\n          Synch Type               None\n          Usage Type               Data\n        wMaxPacketSize     0x0400  1x 1024 bytes\n        bInterval               0\n        bMaxBurst               8\n</code></pre>"},{"location":"debug/usb-sticks/#sandisk-ultra-flair","title":"SanDisk Ultra Flair","text":"<pre><code>Device Descriptor:\n  bLength                18\n  bDescriptorType         1\n  bcdUSB               3.00\n  bDeviceClass            0 (Defined at Interface level)\n  bDeviceSubClass         0 \n  bDeviceProtocol         0 \n  bMaxPacketSize0         9\n  idVendor           0x0781 SanDisk Corp.\n  idProduct          0x5591 \n  bcdDevice            1.00\n  iManufacturer           1 \n  iProduct                2 \n  iSerial                 3 \n  bNumConfigurations      1\n  Configuration Descriptor:\n    bLength                 9\n    bDescriptorType         2\n    wTotalLength           44\n    bNumInterfaces          1\n    bConfigurationValue     1\n    iConfiguration          0 \n    bmAttributes         0x80\n      (Bus Powered)\n    MaxPower              224mA\n    Interface Descriptor:\n      bLength                 9\n      bDescriptorType         4\n      bInterfaceNumber        0\n      bAlternateSetting       0\n      bNumEndpoints           2\n      bInterfaceClass         8 Mass Storage\n      bInterfaceSubClass      6 SCSI\n      bInterfaceProtocol     80 Bulk-Only\n      iInterface              0 \n      Endpoint Descriptor:\n        bLength                 7\n        bDescriptorType         5\n        bEndpointAddress     0x81  EP 1 IN\n        bmAttributes            2\n          Transfer Type            Bulk\n          Synch Type               None\n          Usage Type               Data\n        wMaxPacketSize     0x0400  1x 1024 bytes\n        bInterval               0\n        bMaxBurst               1\n      Endpoint Descriptor:\n        bLength                 7\n        bDescriptorType         5\n        bEndpointAddress     0x02  EP 2 OUT\n        bmAttributes            2\n          Transfer Type            Bulk\n          Synch Type               None\n          Usage Type               Data\n        wMaxPacketSize     0x0400  1x 1024 bytes\n        bInterval               0\n        bMaxBurst              15\n</code></pre>"},{"location":"debug/usb-tests/","title":"USB tests","text":"<p>Tested 3 sticks:</p> <ol> <li>Intenso x2</li> <li>Kingston Data Traveler</li> </ol> <p>Tested coreboot v4.6.4 with SeaBIOS 1.11.0.3:</p> <p>50x coldboots USB detection 50x warmboots USB detection 50x boot Voyage Linux 0.11 and reboot USB detection</p> Stick no. Coldboot Warmboot Reboot 1 PASS PASS PASS 2 PASS PASS PASS <p>Tested coreboot v4.0.14 with SeaBIOS 1.11.0.3:</p> <p>50x coldboots USB detection 50x warmboots USB detection 50x boot Voyage Linux 0.11 and reboot USB detection</p> Stick no. Coldboot Warmboot Reboot 1 PASS PASS PASS 2 PASS PASS PASS <p>Other results of not-working sticks are presented in this document</p>"},{"location":"debug/usb-tests/#next-test-iteration","title":"Next test iteration","text":"<p>Test date: 29.05.2018 Firmware version: v4.6.9 Platforms:</p> <ol> <li>apu4a S/N: WN1142383_1708</li> <li>apu4a S/N: WN1142380_1708</li> </ol> <p>Sticks:</p> <ol> <li>Corsair Voyager Vega</li> <li>ADATA DashDrive UV131</li> <li>SanDisk Ultra Flair</li> </ol> <p>Test conditions:</p> <ul> <li>coldboot x50</li> <li>warmboot x50</li> <li>boot Debian over PXE and reboot then check USB presence x50</li> <li>two identical USB 3.x sticks plugged simultaneously in both slots</li> </ul> <p>Detection rate:</p> Stick no./ platform. no Coldboot Warmboot Reboot 1/1 100% 100% unable to test (platform hangs after few reboots) 2/2 92% 96% unable to test (platform hangs after few reboots) 3/1 0% 0% unable to test (platform hangs after few reboots) <p>Other observations:</p> <p>Sticks no. 1 and 2 work pretty good. They advertise as USB 3.x sticks almost immediately after host controller reset and seem to not collide with corresponding USB 2.0 ports.</p> <p>Stick no. 3 when plugged causes the reset of the host controller to fail (timeout). It is necessary to increase the timeout value for host controller reset. Even if the timeout is increased, the sticks do not advertise as USB 3.x. The are handled the same as USB 2.0 sticks.</p> <p>Stick no. 2 was not detected with 100% accuracy, i.e. sometimes only one of two sticks were detected in one boot iteration. Issue related to port \"toxicity\" observed on apu4.</p> <p>Results for stick no 3. after timeout adjustment:</p> Stick no./ platform. no Coldboot Warmboot Reboot 3/2 80% 100% unable to test (platform hangs after few reboots) <p>Stick no. 3 was not detected with 100% accuracy, i.e. sometimes only one of two sticks were detected in one boot iteration. Issue related to port \"toxicity\" observed on apu4.</p>"},{"location":"debug/warmboot_reset/","title":"Doubled sign of life","text":""},{"location":"debug/warmboot_reset/#problem-description","title":"Problem description","text":"<p>Sometimes sign of life happens twice. It is caused by reset of platform during warmboot (doing <code>rte_ctrl -pon</code> when the platform is in S5). Problem does not occur when doing coldboot or reboot.</p>"},{"location":"debug/warmboot_reset/#initial-ideas","title":"Initial ideas","text":"<p>AGESA specification 44065 Rev. 3.04 on page 38 and followings in the operational overview says:</p> <p>E \u2014 Main boot path. Proceed with full hardware initialization. Warm reset may be needed to instantiate new values into some registers.</p> <p>Page 40, about AGESA software call entry points' duties:</p> <pre><code>AmdInitReset\n    initialize heap ctl\n    Primary ncHt link initialization\n    SB initialization @ reset\n    NB after HT\n\nAmdInitEarly\n    register load\n    full HT initialization\n    uCode patch load\n    AP launch\n    PwrMgmt Init\n    NB post initialization\n    Detect need for warm reset\n</code></pre> <p>It looks like moving SOL after call to <code>AmdInitEarly()</code> would fix the issue, but then it gets printed after a relatively long period - user might think that platform isn't booting, also it almost immediately disappears.</p>"},{"location":"debug/warmboot_reset/#pmxc0-s5reset-status","title":"PMxC0 S5/Reset Status","text":"<p>As the issue depends on state from which platform is booted I looked through power management registers in BKDG for AMD Family 16h Models 30h-3Fh Processors, 52740 Rev 3.06. Registers of interest were those with <code>Cold reset</code> value, as they were remembered through resets and transitions to/from S5, but not after full power cycle. The most important one is PMxC0 S5/Reset Status:</p> <p>This register shows the source of previous reset.</p> <p>This register is also defined in AGESA headers in coreboot repository:</p> <pre><code>#define FCH_PMIOxC0_S5ResetStatus          0xFED803C0ul\n</code></pre> <p>Reading content of PMxC0 right before printing sign of life after different ways of (re)booting the platform resulted in the following values:</p> Entering/leaving S5 PMxC0 during SOL Bits set full power cycle * 0x00000800 SlpS3ToLtdPwrGdEn hold PWR button ** 0x40200402 SleepReset, FourSecondPwrBtn thermal/power on ** 0x40200401 SleepReset, ThermalTrip reboot 0x40080400 DoReset reset button 0x40010400 UsrReset halt/power on 0x40200400 SleepReset 0x001003FF S5ResetStatus_All_Status <p>*) not S5, included for completeness</p> <p>**) results in doubled SOL. Value in table corresponds to first iteration, then platform is reset and during second boot PMxC0 has the same value as after <code>reboot</code></p> <p>Table is stripped from some common bits that don't seem to affect the problem: - 0x40000000 - reserved - 0x00000400 - PwrGdDwnBeforeSlp3 - BKDG, p. 932:</p> <p>PwrGdDwnBeforeSlpS3. Read-write. Cold reset: 0. BIOS: 1. 1=Delay SLP_S3 by 64 \u03bcs and also qualify the FCH PwrGood with SLP_S3; This allows internal logic to put signals into correct states before turning off the S0 power.</p> <p>Last row shows value of <code>FCH_PMIOxC0_S5ResetStatus_All_Status</code>, which is what AGESA checks when deciding whether platform needs a reset or not.</p>"},{"location":"research/Orange_Pi_flasher/","title":"Orange Pi flasher","text":""},{"location":"research/Orange_Pi_flasher/#contents","title":"Contents","text":"<ul> <li>Orange Pi flasher<ul> <li>Contents</li> <li>Installing armbian on Orange Pi</li> <li>Installing flashrom on Orange Pi</li> <li>Connection</li> <li>Flashing</li> <li>Customizing kernel for armbian</li> <li>Updating kernel on Orange Pi Zero</li> </ul> </li> </ul>"},{"location":"research/Orange_Pi_flasher/#installing-armbian-on-orange-pi","title":"Installing armbian on Orange Pi","text":"<p>Prepare a SD card with armbian image on it first. Download the image from here and extract it to your SD card.</p>"},{"location":"research/Orange_Pi_flasher/#installing-flashrom-on-orange-pi","title":"Installing flashrom on Orange Pi","text":"<p>Put the SD card into Orange Pi and boot it. Then install flashrom using the following commands: <pre><code>git clone https://github.com/flashrom/flashrom.git\ncd flashrom\nmake CONFIG_ENABLE_LIBPCI_PROGRAMMERS=no install\n</code></pre></p> <p>Enable SPI on Orange Pi: <pre><code>echo \"overlays=spi-spidev\" &gt;&gt; /boot/armbianEnv.txt\necho \"param_spidev_spi_bus=1\" &gt;&gt; /boot/armbianEnv.txt\nreboot\n</code></pre></p> <p>Important! Put these lines in armbianEnv.txt file only once. This file contains overall system configuration and should not contain duplicates.</p>"},{"location":"research/Orange_Pi_flasher/#connection","title":"Connection","text":"<p>Orange Pi pinout:</p> <p></p> Orange Pi pins APU2 pin J6 GND 2 SPI1_CS 3 SPI1_CLK 4 SPI1_MISO 5 SPI1_MOSI 6 <p>Also shorten 2-3 pins on APU2 J2 to enable S5 state.</p>"},{"location":"research/Orange_Pi_flasher/#flashing","title":"Flashing","text":"<p>Make sure that APU2 was powered up with shortened 2-3 pins on J2. After Orange Pi reboot type following command:</p> <pre><code>flashrom -p linux_spi:dev=/dev/spidev1.0 -w coreboot.rom\n</code></pre> <p>Note that coreboot.rom should be the rom file You are trying to write.</p> <p>Correct output should look like this: <pre><code>root@orangepizero:~# flashrom -w ./apu2_v4.6.0.rom -p linux_spi:dev=/dev/spidev1.0\nflashrom 0.9.9-45-g4d440a7 on Linux 4.11.3-sun8i (armv7l)\nflashrom is free software, get the source code at https://flashrom.org\n\nUsing clock_gettime for delay loops (clk_id: 1, resolution: 1ns).\nFound Winbond flash chip \"W25Q64.V\" (8192 kB, SPI) on linux_spi.\nReading old flash chip contents... done.\nErasing and writing flash chip...\nWarning: Chip content is identical to the requested image.\nErase/write done.\n</code></pre></p> <p>Be sure to use stable power supply. Do no supply OrangePi from PC USB. Its efficiency is not enough for proper operating of Orange Pi. It is strongly recommended to use 5V power supply connected to microUSB socket (a trusted USB charger will make it too). Using uncertain power supply leads to flash writing errors, which may brick your target device.</p>"},{"location":"research/Orange_Pi_flasher/#customizing-kernel-for-armbian","title":"Customizing kernel for armbian","text":"<p>Clone the repository first and then run script <code>compile.sh</code> (must run as root): <pre><code>git clone --depth 1 https://github.com/armbian/build\ncd build\nsudo ./compile.sh\n</code></pre></p> <p><code>compile.sh</code> takes care of everything. Downloads cross compilation toolchain and all necessary tools.</p> <p>It works only with Ubuntu Xenial (16.04), other distros are supposed to be not supported. Refer to README</p> <p>This command will pop up a menu. Many options can be chosen there, but the most important options are:</p> <ol> <li>Select to build only kernel and uboot packages</li> <li>Show a kernel configuration menu before compilation</li> <li>Choose target board (in this case <code>orangepizero</code>)</li> <li>Select the target kernel branch as <code>dev</code> for newest development version</li> <li>Accept to enter export mode</li> </ol> <p>I followed this approach and I strongly recommend to use it this way.</p> <p>Now the kernel menuconfig should pop up and the customization process begin. Make changes here for Your use case and needs, then save the changes and exit.</p> <p>If do not want to make changes, just leave <code>menuconfig</code> by saving the configuration and exiting. Kernel will be built with default configuration.</p> <p>After saving config and exiting, the kernel compilation will start.</p>"},{"location":"research/Orange_Pi_flasher/#updating-kernel-on-orange-pi-zero","title":"Updating kernel on Orange Pi Zero","text":"<p>Debian packages created after compilation are in <code>/repodir/build/output/debs</code>.</p> <p><pre><code>build/output/debs$ ls\nextra\nlinux-firmware-image-dev-sun8i_5.32_armhf.deb\nlinux-image-dev-sun8i_5.32_armhf.deb\nlinux-u-boot-dev-orangepizero_5.32_armhf.deb\nlinux-dtb-dev-sun8i_5.32_armhf.deb\nlinux-headers-dev-sun8i_5.32_armhf.deb\nlinux-source-dev-sun8i_5.32_all.deb\n</code></pre> There are also headers and source packages which are not necessary to update the Orange Pi. Send the following four packages to Orange Pi, via SCP for example:</p> <pre><code>scp linux-image-dev-sun8i_5.32_armhf.deb root@192.168.0.112:/root/\nscp linux-dtb-dev-sun8i_5.32_armhf.deb root@192.168.0.112:/root/\nscp linux-firmware-image-dev-sun8i_5.32_armhf.deb root@192.168.0.112:/root/\nscp linux-u-boot-dev-orangepizero_5.32_armhf.deb root@192.168.0.112:/root/\n</code></pre> <p>Now connect to Orange Pi, via SSH for example, as root. Default password is <code>armbian1234</code>. Install the packages:</p> <pre><code>cd\ndpkg -i linux-firmware-image-dev-sun8i_5.32_armhf.deb\ndpkg -i linux-dtb-dev-sun8i_5.32_armhf.deb\ndpkg -i linux-image-dev-sun8i_5.32_armhf.deb\ndpkg -i linux-u-boot-dev-orangepizero_5.32_armhf.deb\n</code></pre> <p>I recommend to install them one by one, because the operation takes some time and happens to hang.</p>"},{"location":"research/ROCA/","title":"ROCA TPM vulnerability verification and status","text":"<p>ROCA vulnerability was discovered (October 2017) in a software library, RSALib, provided by Infineon Technologies. That library is also used in TPM modules. When this vulnerability is present, a pair of prime numbers used for generating RSA keys is chosen from a small subset of all available prime numbers. This results in a great loss of entropy. Details and exact numbers can be found here.</p>"},{"location":"research/ROCA/#generating-rsa-key-pairs-with-tpm","title":"Generating RSA key pairs with TPM","text":"<p>RSA keys can be generated with tpm2-tools. SLB 9665 used in TPM module doesn't support 512-bit RSA, so either 1024 or 2048-bit keys must be used. Context is used for key generation, so it must be generated first:</p> <pre><code>tpm2_createprimary -g 'sha1' -G 'rsa1024:null:aes128cfb' -o tpm.ctx\ntpm2_create -C tpm.ctx -Grsa1024 -u key.pub -r key.priv\n</code></pre> <p>Only the public key is actually required by vulnerability check. It is a good idea to generate more than one pair, probably using different key sizes - chances for false positives are extremely low, but not zero.</p> <p>TPM has limited internal RAM and runs out of memory after 3 operations with error:</p> <pre><code>ERROR: Tss2_Sys_CreatePrimary(0x902) - tpm:warn(2.0): out of memory for object contexts\n</code></pre> <p>In this case either rebooting or flushing open handles manually helps. Only <code>handles-transient</code> need to be flushed:</p> <pre><code>$ tpm2_getcap -c handles-transient\n- 0x80000000\n- 0x80000001\n- 0x80000002\n$ tpm2_flushcontext -c 0x80000000\n$ tpm2_flushcontext -c 0x80000001\n$ tpm2_flushcontext -c 0x80000002\n</code></pre>"},{"location":"research/ROCA/#extracting-keys-hashes","title":"Extracting keys hashes","text":"<p>File <code>key.pub</code> is a binary file with a TPM-specific header. It is not supported by the tool for checking for ROCA vulnerability, so the key needs to be extracted and saved in one of the supported formats, e.g. hex coded number. This can be done with the following script:</p> <pre><code>#!/bin/bash\n\nrm -f keys.txt\n\nfor file in *.pub\ndo\n    dd if=${file} bs=1 skip=24 | hexdump -v -e '/1 \"%02x\"' &gt;&gt; keys.txt\n    echo \"\" &gt;&gt; keys.txt\ndone\n</code></pre>"},{"location":"research/ROCA/#testing-for-roca-vulnerability","title":"Testing for ROCA vulnerability","text":"<p>A tool for checking for ROCA TPM vulnerability can be found here. The easiest way is to install it with <code>pip</code>:</p> <pre><code>pip install roca-detect\n</code></pre> <p>All parsed keys can be checked using just one command:</p> <pre><code>roca-detect keys.txt\n</code></pre> <p>More use cases can be found on the main page of this tool, including tests for saved SSH hosts keys.</p> <p>This operation should take no more than a couple of seconds, as it only checks if the key was generated from insecure prime numbers, without finding the exact numbers used. It does not generate private keys.</p>"},{"location":"research/ROCA/#results","title":"Results","text":"<p>This is output from test run on 2 different modules, with both 1024 and 2048-bit keys generated on each of them:</p> <pre><code>2019-03-25 18:31:17 [11915] WARNING Fingerprint found in modulus keys.txt idx 0\n{\"type\": \"mod-hex\", \"fname\": \"keys.txt\", \"idx\": 0, \"aux\": null,\n  \"n\": \"0x94b79a35a5d47040df1503670080a7714ae1ee751aeb32071b3db388b3bf80b11f661c4b8819ebd1c716239c9ec5a202b08a2aa3c17ad6cd17075ba49fcd005d8b8fa50c29433db35c1421727472deddd77bced7e6438db4d447008b11cdb018139bfef2e06c4b4a3e672543a7e9333040fd881815e14b1f1338e90180fd0865\",\n  \"marked\": true, \"time_years\": 0.16104529886799998, \"price_aws_c4\": 70.5861544938444}\n(...)\n2019-03-25 18:31:17 [11915] INFO ### SUMMARY ####################\n2019-03-25 18:31:17 [11915] INFO Records tested: 8\n2019-03-25 18:31:17 [11915] INFO .. PEM certs: . . . 0\n2019-03-25 18:31:17 [11915] INFO .. DER certs: . . . 0\n2019-03-25 18:31:17 [11915] INFO .. RSA key files: . 0\n2019-03-25 18:31:17 [11915] INFO .. PGP master keys: 0\n2019-03-25 18:31:17 [11915] INFO .. PGP total keys:  0\n2019-03-25 18:31:17 [11915] INFO .. SSH keys:  . . . 0\n2019-03-25 18:31:17 [11915] INFO .. APK keys:  . . . 0\n2019-03-25 18:31:17 [11915] INFO .. JSON keys: . . . 0\n2019-03-25 18:31:17 [11915] INFO .. LDIFF certs: . . 0\n2019-03-25 18:31:17 [11915] INFO .. JKS certs: . . . 0\n2019-03-25 18:31:17 [11915] INFO .. PKCS7: . . . . . 0\n2019-03-25 18:31:17 [11915] INFO Fingerprinted keys found: 4\n2019-03-25 18:31:17 [11915] INFO WARNING: Potential vulnerability\n2019-03-25 18:31:17 [11915] INFO ################################\n</code></pre> <p>It shows that ROCA vulnerability is present on this TPM module model. TPM firmware update will be required.</p> <p>Note that ROCA is connected only with RSA, it doesn't affect any other security functions, as long as they don't use RSALib.</p>"},{"location":"research/ROCA/#updating-tpm-firmware","title":"Updating TPM firmware","text":"<p>Tools for updating Infineon TPM firmware can be easily found, unfortunately, most of them are either UEFI or Windows applications. A Linux port of them can be found here.</p> <p>First, check if <code>TPMFactoryUpd</code> was built successfully and TPM is detected properly:</p> <pre><code>$ ./TPMFactoryUpd -info\n  **********************************************************************\n  *    Infineon Technologies AG   TPMFactoryUpd   Ver 01.01.2459.00    *\n  **********************************************************************\n\n       TPM information:\n       ----------------\n       Firmware valid                    :    Yes\n       TPM family                        :    2.0\n       TPM firmware version              :    5.61.2785.0\n       TPM platformAuth                  :    Empty Buffer\n       Remaining updates                 :    64\n</code></pre> <p>Remember the current firmware version number, it will be needed later. Also note what is the value of <code>TPM platformAuth</code> - it must be <code>Empty Buffer</code> in order to perform an update. To do this, build and flash coreboot with TPM disabled in config menu, or use older version of BIOS - none of the v4.8.0.* versions have TPM support enabled. SeaBIOS doesn't need any modifications, it will not initialize TPM unless coreboot does.</p> <p>TPM firmwares are available with some of the UEFI and Windows images, like these. Only <code>9665FW update package_1.5/Firmware/TPM20_&lt;old_version&gt;_to_TPM20_5.63.3144.0.BIN</code> file is required. Extract this file to the same directory as the <code>TPMFactoryUpd</code> and run:</p> <pre><code>$ ./TPMFactoryUpd -update tpm20-emptyplatformauth -firmware TPM20_&lt;old_version&gt;_to_TPM20_5.63.3144.0.BIN\n  **********************************************************************\n  *    Infineon Technologies AG   TPMFactoryUpd   Ver 01.01.2459.00    *\n  **********************************************************************\n\n       TPM update information:\n       -----------------------\n       Firmware valid                    :    Yes\n       TPM family                        :    2.0\n       TPM firmware version              :    5.61.2785.0\n       TPM platformAuth                  :    Empty Buffer\n       Remaining updates                 :    64\n       New firmware valid for TPM        :    Yes\n       TPM family after update           :    2.0\n       TPM firmware version after update :    5.63.3144.0\n\n       Preparation steps:\n       TPM2.0 policy session created to authorize the update.\n\n    DO NOT TURN OFF OR SHUT DOWN THE SYSTEM DURING THE UPDATE PROCESS!\n\n       Updating the TPM firmware ...\n       Completion: 100 %\n       TPM Firmware Update completed successfully.\n</code></pre> <p>This can take 3-5 minutes, depending on the firmware update size. After it completes, TPM is not useful until the next reboot:</p> <pre><code>$ ./TPMFactoryUpd -info\n  **********************************************************************\n  *    Infineon Technologies AG   TPMFactoryUpd   Ver 01.01.2459.00    *\n  **********************************************************************\n\n       TPM information:\n       ----------------\n       Firmware valid                    :    Yes\n       TPM family                        :    2.0\n       TPM firmware version              :    5.63.3144.0\n       TPM platformAuth                  :    N/A - System restart required\n       Remaining updates                 :    N/A - System restart required\n</code></pre> <p>Reboot platform immediately. Using TPM functions in this state isn't safe. After successful reboot and flashing original coreboot firmware the result should be:</p> <pre><code>$ ./TPMFactoryUpd -info\n  **********************************************************************\n  *    Infineon Technologies AG   TPMFactoryUpd   Ver 01.01.2459.00    *\n  **********************************************************************\n\n       TPM information:\n       ----------------\n       Firmware valid                    :    Yes\n       TPM family                        :    2.0\n       TPM firmware version              :    5.63.3144.0\n       TPM platformAuth                  :    Not Empty Buffer\n       Remaining updates                 :    63\n</code></pre>"},{"location":"research/ROCA/#updating-tpm-firmware-automatic-version-detection","title":"Updating TPM firmware - automatic version detection","text":"<p>Assuming that a whole <code>Firmware</code> directory was extracted to directory containing <code>TPMFactoryUpd</code> from the update package, one can use single command to do the update. Appropriate file is chosen automatically, depending on the old version. The command is:</p> <pre><code>$ ./TPMFactoryUpd -update config-file -config Firmware/TPM20_latest.cfg\n  **********************************************************************\n  *    Infineon Technologies AG   TPMFactoryUpd   Ver 01.01.2459.00    *\n  **********************************************************************\n\n       TPM update information:\n       -----------------------\n       Firmware valid                    :    Yes\n       TPM family                        :    2.0\n       TPM firmware version              :    5.51.2098.0\n       TPM platformAuth                  :    Empty Buffer\n       Remaining updates                 :    64\n       New firmware valid for TPM        :    Yes\n       TPM family after update           :    2.0\n       TPM firmware version after update :    5.63.3144.0\n\n       Selected firmware image:\n       TPM20_5.51.2098.0_to_TPM20_5.63.3144.0.BIN\n\n       Preparation steps:\n       TPM2.0 policy session created to authorize the update.\n\n    DO NOT TURN OFF OR SHUT DOWN THE SYSTEM DURING THE UPDATE PROCESS!\n\n       Updating the TPM firmware ...\n       Completion: 100 %\n       TPM Firmware Update completed successfully.\n</code></pre> <p>Remember to use BIOS with TPM disabled, and re-flash newer BIOS firmware afterwards.</p>"},{"location":"research/ROCA/#results-from-new-version-of-tpm-firmware","title":"Results from new version of TPM firmware","text":"<p>Repeating all steps from generating TPM context to using <code>roca-detect</code> shows that the vulnerability is no longer present:</p> <pre><code>2019-03-26 18:40:42 [4325] INFO ### SUMMARY ####################\n2019-03-26 18:40:42 [4325] INFO Records tested: 8\n2019-03-26 18:40:42 [4325] INFO .. PEM certs: . . . 0\n2019-03-26 18:40:42 [4325] INFO .. DER certs: . . . 0\n2019-03-26 18:40:42 [4325] INFO .. RSA key files: . 0\n2019-03-26 18:40:42 [4325] INFO .. PGP master keys: 0\n2019-03-26 18:40:42 [4325] INFO .. PGP total keys:  0\n2019-03-26 18:40:42 [4325] INFO .. SSH keys:  . . . 0\n2019-03-26 18:40:42 [4325] INFO .. APK keys:  . . . 0\n2019-03-26 18:40:42 [4325] INFO .. JSON keys: . . . 0\n2019-03-26 18:40:42 [4325] INFO .. LDIFF certs: . . 0\n2019-03-26 18:40:42 [4325] INFO .. JKS certs: . . . 0\n2019-03-26 18:40:42 [4325] INFO .. PKCS7: . . . . . 0\n2019-03-26 18:40:42 [4325] INFO No fingerprinted keys found (OK)\n2019-03-26 18:40:42 [4325] INFO ################################\n</code></pre>"},{"location":"research/RPI_SPI_flasher/","title":"RPI flasher","text":""},{"location":"research/RPI_SPI_flasher/#contents","title":"Contents","text":"<ul> <li>RPI flasher<ul> <li>Contents</li> <li>Installing flashrom on RPi</li> <li>First approach<ul> <li>Connection</li> <li>Hexdumps of binaries:</li> <li>Problems</li> <li>Conclusion</li> </ul> </li> <li>Second approach<ul> <li>Connection</li> <li>Flashing</li> <li>Conclusion</li> </ul> </li> </ul> </li> </ul>"},{"location":"research/RPI_SPI_flasher/#installing-flashrom-on-rpi","title":"Installing flashrom on RPi","text":"<p>Assuming Raspberry Jassie is running on RPi</p> <ol> <li> <p>Getting the latest flashrom source code:</p> <pre><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade\nsudo apt-get install build-essential pciutils usbutils libpci-dev \\\nlibusb-dev libftdi1 libftdi-dev zlib1g-dev subversion libusb-1.0-0-dev\nsvn co https://code.coreboot.org/svn/flashrom/trunk ~/flashrom\ncd ~/flashrom\nmake\nsudo make install\n</code></pre> </li> <li> <p>Flashing:</p> <p>If SPI device is not visible, enable SPI in:</p> <pre><code>sudo raspi-config\n</code></pre> <p>spi_bcmxxxx modules may differ on different RPi's</p> <pre><code>sudo modprobe spi_bcm2835\nsudo modprobe spidev\n</code></pre> <p>Read from flash:</p> <pre><code>sudo flashrom -V -p linux_spi:dev=/dev/spidev0.0 -r coreboot.rom\n</code></pre> </li> </ol>"},{"location":"research/RPI_SPI_flasher/#first-approach","title":"First approach","text":""},{"location":"research/RPI_SPI_flasher/#connection","title":"Connection","text":"RPI3 pin GPIO APU2 pin J6 25 GND 2 24 /CS 3 23 SCK 4 21 DO 5 19 DI 6 17 VCC 1"},{"location":"research/RPI_SPI_flasher/#hexdumps-of-binaries","title":"Hexdumps of binaries:","text":"<ul> <li>original   binary</li> <li>binary read by   RPI</li> </ul>"},{"location":"research/RPI_SPI_flasher/#problems","title":"Problems","text":"<ul> <li>Programming takes a lot of time (~30min.)</li> <li>ERASE problems</li> </ul> <pre><code>time ./flashrom -p linux_spi:dev=/dev/spidev0.0 -w ../apu2_v4.0.10.rom\n\nflashrom v0.9.9-r1954 on Linux 4.9.28+ (armv6l)\nflashrom is free software, get the source code at https://flashrom.org\n\nCalibrating delay loop... OK.\nFound Winbond flash chip \"W25Q64.V\" (8192 kB, SPI) on linux_spi.\nReading old flash chip contents... done.\nErasing and writing flash chip... FAILED at 0x0002b000! Expected=0xff, Found=0x00, failed byte count from 0x0002b000-0x0002bfff: 0x800\nERASE FAILED!\nReading current flash chip contents... done. Looking for another erase function.\nFAILED at 0x0002c73c! Expected=0xff, Found=0xf0, failed byte count from 0x00028000-0x0002ffff: 0x4c4\nERASE FAILED!\nReading current flash chip contents... done. Looking for another erase function.\nFAILED at 0x00020000! Expected=0xff, Found=0x00, failed byte count from 0x00020000-0x0002ffff: 0x10000\nERASE FAILED!\nReading current flash chip contents... done. Looking for another erase function.\nFAILED at 0x00000000! Expected=0xff, Found=0x00, failed byte count from 0x00000000-0x007fffff: 0x800000\nERASE FAILED!\nReading current flash chip contents... done. Looking for another erase function.\nFAILED at 0x00000000! Expected=0xff, Found=0x00, failed byte count from 0x00000000-0x007fffff: 0x800000\nERASE FAILED!\nLooking for another erase function.\nNo usable erase functions left.\nFAILED!\nUh oh. Erase/write failed. Checking if anything has changed.\nReading current flash chip contents... done.\nApparently at least some data has changed.\nYour flash chip is in an unknown state.\nPlease report this on IRC at chat.freenode.net (channel #flashrom) or\nmail flashrom@flashrom.org, thanks!\n\nreal    30m5.560s\nuser    0m5.320s\nsys 0m37.830s\n</code></pre>"},{"location":"research/RPI_SPI_flasher/#conclusion","title":"Conclusion","text":"<ul> <li>problems with WP and HOLD pins. Pull-up is not strong enough.</li> </ul>"},{"location":"research/RPI_SPI_flasher/#second-approach","title":"Second approach","text":""},{"location":"research/RPI_SPI_flasher/#connection_1","title":"Connection","text":"<p>VCC is not connected!</p> RPI3 pin GPIO APU2 pin J6 25 GND 2 24 /CS 3 23 SCK 4 21 DO 5 19 DI 6 <p>Power supply needs to be connected to APU2, but device needs to be powered off. It can be done by shorting pins 2-3 on J2 connector</p>"},{"location":"research/RPI_SPI_flasher/#flashing","title":"Flashing","text":"<pre><code>pi@raspberrypi:~/flashrom $ time ./flashrom -p linux_spi:dev=/dev/spidev0.0 -w ../apu2_v4.0.10.rom\nflashrom v0.9.9-r1954 on Linux 4.9.28+ (armv6l)\nflashrom is free software, get the source code at https://flashrom.org\n\nCalibrating delay loop... OK.\nFound Winbond flash chip \"W25Q64.V\" (8192 kB, SPI) on linux_spi.\nReading old flash chip contents... done.\nErasing and writing flash chip... Erase/write done.\nVerifying flash... VERIFIED.\n\nreal    8m27.989s\nuser    0m18.760s\nsys    0m11.140s\npi@raspberrypi:~/flashrom $ time ./flashrom -p linux_spi:dev=/dev/spidev0.0 -r coreboot2.rom\nflashrom v0.9.9-r1954 on Linux 4.9.28+ (armv6l)\nflashrom is free software, get the source code at https://flashrom.org\n\nCalibrating delay loop... OK.\nFound Winbond flash chip \"W25Q64.V\" (8192 kB, SPI) on linux_spi.\nReading flash... done.\n\nreal    3m46.537s\nuser    0m0.830s\nsys    0m4.940s\npi@raspberrypi:~/flashrom $ md5sum coreboot2.rom ../apu2_v4.0.10.rom\ncf0b80e2a51a28a57bf91540bdbf957c  coreboot2.rom\ncf0b80e2a51a28a57bf91540bdbf957c  ../apu2_v4.0.10.rom\n</code></pre> <p>After flash, <code>spidev</code> and <code>spi_bcm2835</code> need to be unloaded and then APU2 can be powered on.</p>"},{"location":"research/RPI_SPI_flasher/#conclusion_1","title":"Conclusion","text":"<p>Flashing is possible, but could take a while. Need to follow the procedure to flash the device and boot it after the process.</p>"},{"location":"research/USB_compliance_test/","title":"USB compliance tests","text":"<p>This document contains research about USB tests compliance which allow to analyze USB device detection process. Mostly it references to USB 3.0.</p>"},{"location":"research/USB_compliance_test/#related-documents","title":"Related documents","text":"<ul> <li>Universal Serial Bus 3.0 Specification</li> <li>USB 3.0 Electrical Compliance Test Specification</li> <li>USB 3.1 Link Layer Test Specification</li> <li>USB 3.0 Electrical Test Fixture Topologies</li> <li>Universal Serial Bus 2.0 Specification</li> <li>USB 2.0 Electrical Compliance Tests Specification</li> <li>eXtensible Host Controller Interface for Universal Serial Bus</li> </ul>"},{"location":"research/USB_compliance_test/#list-of-abbreviations","title":"List of abbreviations","text":"<ul> <li><code>HS</code> - High Speed USB (USB 2.0)</li> <li><code>SS</code> - Super Speed USB (USB 3.0)</li> <li><code>LFPS</code> - Low Frequency Periodic Signaling</li> <li><code>LTSSM</code> - Link Training and Status State Machine</li> </ul>"},{"location":"research/USB_compliance_test/#usb-standards-comparison","title":"USB Standards comparison","text":"Power Speed PHY Layer USB 1.1 Low Speed 5V @500mA 1,5 Mbps VCC, GND, D+, D- USB 1.1 Full Speed 5V @500mA 12 Mbps VCC, GND, D+, D- USB 2.0 High Speed 5V @500mA 480 Mbps VCC, GND, D+, D- USB 3.0 SuperSpeed 5V @900mA 5 Gbps VCC, GND, D+, D-, Rx+, Rx-, Tx+, Tx- USB 3.1 SuperSpeed+ 5V @900mA 10 Gbps VCC, GND, D+, D-, Rx+, Rx-, Tx+, Tx-"},{"location":"research/USB_compliance_test/#device-detection-process-debugging","title":"Device detection process debugging","text":""},{"location":"research/USB_compliance_test/#usb-30-device-enumeration-process","title":"USB 3.0 device enumeration process","text":"<p>USB enumeration process lets a host determine if USB device was plugged into USB port and what kind of device is that. Enumeration process could be divided into multiple stages proceeded after previous one if there were no errors:</p> <ol> <li>RxDetect mode (USB 3.0 Specification Section 6.11)</li> <li>Polling LFPS (USB 3.0 Specification Section 6.9.2)</li> <li>TSEQ Ordered Sets (USB 3.0 Specification Section 6.4.1.1.3 and Table 6-3)</li> <li>TS1 Ordered Sets (USB 3.0 Specification Section 6.4.1.1.3 and Table 6-4)</li> <li>TS2 Ordered Sets (USB 3.0 Specification Section 6.4.1.1.3 and Table 6-5)</li> <li>Logical idle (sending idle data)</li> <li>Exit Initialization to U0 state</li> </ol> <p>NOTE: Link Initialization and Training (stages 3,4,5) could be different   depending on USB 3.0 (Gen 1) or USB 3.1 (Gen 2) devices. More details are   available in USB 3.0 Specification Section 6.4.</p> <p>After last stage device should be recognized by host and communication between them is opened. To test device detection in system it should be checked if all above stages are performed correctly. Hence electrical compliance tests and link layer tests should be performed to compare data, timing and electrical values with Specification requirements (tables with reference values are available in Specification under mentioned above sections which corresponds to specific stage).</p>"},{"location":"research/USB_compliance_test/#link-training-and-status-state-machine-ltssm-in-usb-30","title":"Link Training and Status State Machine (LTSSM) in USB 3.0","text":"<p>Link Training and Status State Machine (LTSSM) is a state machine consists of 12 link states. It is described in USB 3.0 Specification Section 7.5. LTSSM diagram is presented in figure 7.14. During USB device detection process LTSSM changes stages according to diagram flow. To test if device detection process is done correctly state machine analyze should be done.</p>"},{"location":"research/USB_compliance_test/#compliance-tests","title":"Compliance tests","text":""},{"location":"research/USB_compliance_test/#usb-30-testing","title":"USB 3.0 testing","text":""},{"location":"research/USB_compliance_test/#electrical-compliance-tests","title":"Electrical compliance tests","text":"<p>Electrical compliance tests verify that electrical signals sent between host and device meet USB 3.0 requirements which are described in USB 3.0 Specification Document. To correctly capture these data high-class oscilloscope is required (with minimum 13 GHz bandwidth) with high-class cables and probes. Also Test Fixtures are needed to separate signals from USB data lines and dedicated software installed on oscilloscope.</p> <p>Proposed tool kit: - Teledyne LeCroy SDA 813Zi-A Oscilloscope - QualiPHY Software - SigTest software v.3.2.1 - TF-USB3 Test Fixture - SMA cables - PeRT3 Phoenix System (for Receiver tests)</p> <p>All tools are listed in QPHY-USB3.2-TX-RX Manual in section Introduction/Required Equipment. That document contains also guide how to perform electrical tests with QualiPHY Software.</p> <p>From QPHY-USB3.2-TX-RX Manual those tests should be carried out: - in section USB 3.1/3.2 Transmitter Testing:   - TD 1.1 Low Frequency Periodic Signaling Test   - TD 1.6 Spread Spectrum Test - in section USB 3.1/3.2 Transmitter Testing:   - TD 1.2 Low Frequency Periodic Signaling Test   - TD 1.8 and 1.9 Receiver Jitter Tolerance Tests</p> <p>Electrical compliance tests tool kit is rather expensive and those tests don't guaranty that stick detection problem will be resolved. My advice is to first carry out link layer tests because they can give more information and benefits about problem.</p> <p>Proposed tests are compatible with USB-IF official Electrical Compliance Tests Program. All tests are listed in Electrical Compliance Test Specification SuperSpeed Universal Serial Bus.</p>"},{"location":"research/USB_compliance_test/#link-layer-compliance-tests","title":"Link layer compliance tests","text":"<p>Link layer compliance tests can be performed with USB Analyzers. USB Analyzers capture USB traffic and with dedicated software it is possible to find and resolve problems caused by errors in link layer during enumeration process, i.e. data packets missing, states are not proceed in exact way, errors between process stages etc.</p> <p>Examples of USB 3.0 Analyzers with dedicated software: - Beagle USB 5000 v2 SuperSpeed Protocol Analyzer | Data Center Software - Ellisys Explorer 280 | Analyzer Software - Teledyne LeCroy Advisor T3 | USB Protocol Suite - Teledyne LeCroy Voyager M3 | USB Protocol Suite</p> <p>NOTE: From mentioned above analyzers only Beagle USB 5000's software is supported on Linux. Another ones are supported only in Windows.</p> <p>Should be considered to carry out tests: - analyze LFPS at communication initialization - analyze Training Sequences TSEQ, TS1, TS2 Ordered Sets - analyze State Machine (check if states proceed according to Specification) - checking if USB Port/Device ends in U0 mode - checking packets between host and recognized device</p> <p>USB-IF has its own Link Layer Compliance Tests program. However, to carry out those tests it is required to use their hardware and software tools. In my opinion, good enough alternative is to use one of mentioned above devices, because they have features which are sufficient to resolve stick detection problems.</p> <p>If mentioned above analyses aren't sufficient, tests from sections 7.5.1 to 7.5.5 from USB 3.1 Link Layer Test Specification can be performed.</p>"},{"location":"research/USB_compliance_test/#additional-conclusions","title":"Additional conclusions","text":""},{"location":"research/USB_compliance_test/#usb-30-analyze","title":"USB 3.0 analyze","text":"<p>Mentioned above equipment is necessary to carry out electrical and link layer tests. Due to its high price it's rather impossible to perform such tests now. So far I couldn't find any alternate solutions which will meet the requirements and will be low-price devices. It results from the fact, that to test USB 3.0 protocol, high frequency devices are needed and such devices are rather expensive. Most of available instruments are suitable only for USB 2.0 testing.</p>"},{"location":"research/USB_compliance_test/#usb-20-analyze","title":"USB 2.0 analyze","text":"<p>USB 2.0 Analyzer's principles of operation is exactly the same as USB 3.0 Analyzer and it is described above in that document.</p> <p>Proposed USB 2.0 Analyzers with dedicated software: - OpenVizsla | Wireshark - Beagle USB 480 | Data Center Software</p> <p>Both analyzers are perfectly good to capture and investigate USB data. However, OpenVizsla is an open-source solution which can easily handle with USB analysis within low price. In combination with Wireshark (or any other program which can descramble USB data) it doesn't stand out from any other available solutions. On the other hand, Beagle's software has feature which analyze state machine and show current state in LTSSM.</p> <p>Those devices can't be extended to analyze USB 3.0/3.1 transmission.</p>"},{"location":"research/USB_compliance_test/#rxdetect-state","title":"RxDetect state","text":"<p>Detailed description of <code>RxDetect</code> machine state (with substates) is available in Section 7.5.3 in USB 3.0 Specification.</p> <p>Initially USB ports are in <code>SS.Disabled</code> state (SuperSpeed connection is cut off). <code>RxDetect</code> state (in fact <code>RxDetect.Reset</code>) is reached after Power On Reset or Directed Warm Reset.</p> <p>Let's look how machine substate sequence looks like depending on scenarios:</p> <ul> <li>RxDetect.Reset</li> </ul> <p>If it was reached by power on reset it transit directly to <code>RxDetect.Active</code>.</p> <p>If it was reached by warm reset it transmits LFPS sequence (warm reset   sequence) and goes to <code>RxDetect.Active</code>.</p> <ul> <li>RxDetect.Active</li> </ul> <p>In this state receiver termination (detecting termination at line) is   performed. If it is detected (USB 3.0 device is at the end) then   <code>Polling.LFPS</code> state is reached. If it is not detected then <code>RxDetect.Quiet</code>   state is reached and after 12ms it gets back to <code>RxDetect.Active</code> state and   try procedure again. It can move to <code>RxDetect.Quiet</code> state only 8 times in a   row. Next time if no termination is detected it goes to <code>SS.Disabled</code>.</p> <ul> <li>RxDetect.Quiet</li> </ul> <p>Wait 12 ms timeout and go to <code>RxDetect.Active</code> state.</p> <p>Maybe the problem with USB 3.0 stick detection is caused by not detecting Rx termination for 8 times in a row. Host will not get back to detecting USB 3.x device no more and will start procedure of detecting USB 2.0 device.</p>"},{"location":"research/apu_bios_write_protect/","title":"BIOS write protect","text":""},{"location":"research/apu_bios_write_protect/#rationale","title":"Rationale","text":"<p>Enabling of the SPI flash locking on APU2/3 boards could prove to be useful, in order to prevent BIOS updates and/or malicious binary injection to the BIOS flash memory during system runtime and/or remotely.</p>"},{"location":"research/apu_bios_write_protect/#documents-used","title":"Documents used","text":""},{"location":"research/apu_bios_write_protect/#bkdg-no1","title":"BKDG no.1","text":"<ul> <li>BKDG for family 16h model 30h processor</li> </ul>"},{"location":"research/apu_bios_write_protect/#bkdg-no2","title":"BKDG no.2","text":"<ul> <li>BKDG for family 16h models 00h-0Fh processors</li> </ul>"},{"location":"research/apu_bios_write_protect/#initial-investigation","title":"Initial investigation","text":"<p>At first, BKDG for processor family 16h model 30h, as stated in <code>/proc/cpuinfo</code> of used Linux distribution, was used as a reference:</p> <pre><code>$ cat /proc/cpuinfo\n...\n\nprocessor       : 3\nvendor_id       : AuthenticAMD\ncpu family      : 22\nmodel           : 48\nmodel name      : AMD GX-412TC SOC\n...\n</code></pre> <p>There is a possibility to block the writes (and reads) to flash using the registers described in paragraph 3.26.9.2 SPIx1D Alt_SPI_CS (<code>SpiProtectEn0</code>, <code>SpiProtectLock</code>). Definition of address ranges, that are to be blocked, is described in paragraph 3.26.9.1 D14F3x[5C,58,54,50] ROM Protect 3, 2, 1, 0</p> <p>SPI WP# is on the J2 header (page 12 on the board schematics). This signal is connected to the dedicated SPI WP# pin of the APU chip and can't be controlled like a GPIO.</p> <p>First test was done checking the behavior of the SPI WP# pin, when shorted to ground. No change was noticed. Flashing was still possible using <code>flashrom</code> application on Voyage Linux distribution.</p>"},{"location":"research/apu_bios_write_protect/#flash-writes-blocking-using-register-definitions-in-bkdg-no1","title":"Flash writes blocking using register definitions in BKDG no.1","text":"<p>PCI config registers for device 14h function 3h (offset 50h) was set according to BKDG no.1.</p> <ul> <li><code>RomBase</code> was set to 0 (as for the start of the flash addressing),</li> <li><code>WriteProtect</code> was set to 1,</li> <li><code>ReadProtect</code> was set to 0,</li> <li><code>RangeUnit</code> was set to 1 (64kB unit size),</li> <li><code>Range</code> was set to <code>0x80</code> (8MB flash locked)</li> </ul> <p>SPI device memory mapped register (<code>BAR</code> for this device is set using PCI config register <code>0xA0</code> of the device 14h, function 3h), offset <code>0x1D</code> was set:</p> <ul> <li><code>SpiProtectEn0</code> to 1,</li> <li><code>SpiProtectLock</code> to 1.</li> </ul> <p><code>lspci</code> output:</p> <pre><code>$ lspci -s 14.3 -xxx\n00:14.3 ISA bridge: Advanced Micro Devices, Inc. [AMD] FCH LPC Bridge (rev 11)\n00: 22 10 0e 78 0f 00 20 02 11 00 01 06 00 00 80 00\n10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n20: 00 00 00 00 00 00 00 00 00 00 00 00 22 10 0e 78\n30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n40: 04 00 00 00 d5 ff 03 ff 07 ff 20 03 00 00 00 00\n50: 80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n60: 00 00 00 00 00 0e f8 03 0e 00 0f 00 00 ff ff ff\n70: 67 45 23 00 0c 00 00 00 90 00 00 00 05 0b 00 00\n80: 08 00 03 a8 00 00 00 00 00 00 00 00 00 00 00 00\n90: e8 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00\na0: 02 00 c1 fe 2f 01 00 00 00 00 00 00 00 00 00 00\nb0: 00 00 00 00 00 00 00 00 04 00 e9 3d 00 00 00 00\nc0: 00 00 00 00 00 00 00 00 00 00 00 80 47 10 82 ff\nd0: 86 ff ff 08 42 00 00 00 00 00 00 00 00 00 00 00\ne0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n</code></pre> <p>Using <code>flashrom</code> utility, flash was still somewhat writeable, but returned errors during verification process.</p> <pre><code>$ flashrom -w coreboot.rom -p internal:boardmismatch=force\nflashrom v0.9.9-r1954 on Linux 3.16.7-ckt9-voyage (x86_64)\nflashrom is free software, get the source code at https://flashrom.org\n\nCalibrating delay loop... delay loop is unreliable, trying to continue OK.\ncoreboot table found at 0xdffae000.\nFound chipset \"AMD FCH\".\nEnabling flash write... OK.\nFound Winbond flash chip \"W25Q64.V\" (8192 kB, SPI) mapped at physical address 0x00000000ff800000.\nReading old flash chip contents... done.\nErasing and writing flash chip... Reading current flash chip contents... FAILED at 0x00060000! Expected=0xff, Found=0x55, failed byte count from 0x00060000-0x00060fff: 0xfdf\nERASE FAILED!\ndone. Looking for another erase function.\nErase/write done.\nVerifying flash... FAILED at 0x00060000! Expected=0x55, Found=0xff, failed byte count from 0x00000000-0x007fffff: 0x14500\nYour flash chip is in an unknown state.\nGet help on IRC at chat.freenode.net (channel #flashrom) or\nmail flashrom@flashrom.org with the subject \"FAILED: &lt;your board name&gt;\"!\n-------------------------------------------------------------------------------\nDO NOT REBOOT OR POWEROFF!\n</code></pre> <p>Platform was not booting anymore.</p>"},{"location":"research/apu_bios_write_protect/#flash-writes-blocking-using-register-definitions-in-bkdg-no2","title":"Flash writes blocking using register definitions in BKDG no.2","text":"<p>In BKDG no.2 definition of the PCI config registers for device 14h function 3h is different (paragraph 3.25.9.1 D14F3x[5C,58,54,50] ROM Protect 3, 2, 1, 0).</p> <p>According to the document above, registers were set like this:</p> <p>Offset <code>0x50</code>:</p> <ul> <li><code>RomBase</code> was set to <code>0</code> (as for the start of the flash addressing),</li> <li><code>RomOffset</code> was set to <code>1ff</code> (512kB),</li> <li><code>ReadProtect</code> was set to <code>1</code>,</li> <li><code>WriteProtect</code> was set to <code>1</code>.</li> </ul> <p>Offset <code>0x54</code>:</p> <ul> <li><code>RomBase</code> was set to <code>0x005ff800</code> (as for the AGESA fw offset in flash),</li> <li><code>RomOffset</code> was set to <code>1ff</code> (512kB),</li> <li><code>ReadProtect</code> was set to <code>1</code>,</li> <li><code>WriteProtect</code> was set to <code>1</code>.</li> </ul> <p>SPI device memory mapped register, offset <code>0x1D</code> was set as in the test before.</p> <p><code>lspci</code> output:</p> <pre><code>$ lspci -s 14.3 -xxx\n00:14.3 ISA bridge: Advanced Micro Devices, Inc. [AMD] FCH LPC Bridge (rev 11)\n00: 22 10 0e 78 0f 00 20 02 11 00 01 06 00 00 80 00\n10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n20: 00 00 00 00 00 00 00 00 00 00 00 00 22 10 0e 78\n30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n40: 04 00 00 00 d5 ff 03 ff 07 ff 20 03 00 00 00 00\n50: ff 07 00 00 ff ff 5f 00 00 00 00 00 00 00 00 00\n60: 00 00 00 00 00 0e f8 03 0e 00 0f 00 00 ff ff ff\n70: 67 45 23 00 0c 00 00 00 90 00 00 00 05 0a 00 00\n80: 08 00 03 a8 00 00 00 00 00 00 00 00 00 00 00 00\n90: e8 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00\na0: 02 00 c1 fe 2f 01 00 00 00 00 00 00 00 00 00 00\nb0: 00 00 00 00 00 00 00 00 04 00 e9 3d 00 00 00 00\nc0: 00 00 00 00 00 00 00 00 00 00 00 80 47 10 82 ff\nd0: 86 ff ff 08 42 00 00 00 00 00 00 00 00 00 00 00\ne0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n</code></pre> <p>Using <code>flashrom</code> utility flashing the vital areas is not possible.</p> <pre><code>$ flashrom -w coreboot.rom -p internal:boardmismatch=force\nflashrom v0.9.9-r1954 on Linux 3.16.7-ckt9-voyage (x86_64)\nflashrom is free software, get the source code at https://flashrom.org\n\nCalibrating delay loop... OK.\ncoreboot table found at 0xdffae000.\nFound chipset \"AMD FCH\".\nEnabling flash write... OK.\nDisabling read write protection of flash addresses from 0x00000000 to 0x0007ffff failed.\nDisabling read write protection of flash addresses from 0x005ff800 to 0x0067f7ff failed.\nFound Winbond flash chip \"W25Q64.V\" (8192 kB, SPI) mapped at physical address 0x00000000ff800000.\nReading old flash chip contents... done.\nErasing and writing flash chip... Erase/write done.\nVerifying flash... FAILED at 0x00000000! Expected=0x4c, Found=0xff, failed byte count from 0x00000000-0x007fffff: 0x167107\nYour flash chip is in an unknown state.\nGet help on IRC at chat.freenode.net (channel #flashrom) or\nmail flashrom@flashrom.org with the subject \"FAILED: &lt;your board name&gt;\"!\n-------------------------------------------------------------------------------\nDO NOT REBOOT OR POWEROFF!\n</code></pre> <p>Despite the warning, board was still bootable and contained old firmware.</p>"},{"location":"research/apu_bios_write_protect/#conclusions","title":"Conclusions","text":"<p>BKDG for processor family/model used in APU2/3 platform is not correct. One has to use the BKDG for older processor family/models.</p> <p>Blocking the flash writes/reads on APU2/3 boards is certainly possible, but according to research done, it's not possible to lock the full 8MB of flash memory (only 2MB at most using all 4 blockable regions). Unfortunately choosing the vital areas of flash to be blocked, is also very difficult as coreboot creates layout in a dynamic way, so it could vary between versions (e.g. legacy vs mainline).</p>"},{"location":"research/early-cbmem-implementation/","title":"Early cbmem implementation","text":""},{"location":"research/early-cbmem-implementation/#early-cbmem-support","title":"Early CBMEM support","text":"<p>By the 4.7 release (October) support for <code>cbmem</code> in romstage is required for all platforms. Original message from mailing list can be found there</p> <p>Following mail gives some insight on what needs to be done to satisfy the romstage <code>cbmem</code> requirement.</p> <p>Essential extract from above message:</p> <pre><code>&gt; In preparation to remove the static CBMEM allocator, tag the chipsets\n&gt; that still do not implement get_top_of_ram() for romstage.\n\nSo you need to implement that function for your chipset, remove the\nKconfig selection, and if I remember correctly, everything else should\nthen start working nicely.\n</code></pre> <p>The next step is then to also add time-stamps to CBMEM, that can be read out with <code>cbmem -t</code>.</p> <p>It looks that implementation in northbridge is necessary. For <code>apu2</code> it will be in <code>src/northbridge/amd/pi/00730F01</code>.</p> <p>Few more useful links below:</p> <ul> <li> <p>Chipsets that are marked as missing EARLY_CBMEM implementation</p> </li> <li> <p>One example of Intel chipset implementation</p> </li> <li> <p>Another example of Intel chipset implementation</p> </li> </ul> <p>There is much work already done by Kyosti Malkki for AGESA here I recommend to look at related topics too.</p> <p>This can be an inspiring source AGESA: Add romstage timestamps</p> <p>I also advise to contact Kyosti and ask about the progress of his work. Maybe there is something we could do to help.</p>"},{"location":"research/fast_boot/","title":"PC Engines fast boot","text":""},{"location":"research/fast_boot/#long-boot-time","title":"Long boot time","text":"<p>PC Engines apu2 platforms are booting coreboot in approximately 2.6s while the memory training takes over 2s. Dump of cbmem timestamps on v4.9.0.2 firmware on apu:</p> <pre><code>   0:1st timestamp                                     18,886\n   1:start of romstage                                 18,958 (71)\n   2:before ram initialization                         46,334 (27,376)\n   3:after ram initialization                          2,225,788 (2,179,453)\n   4:end of romstage                                   2,298,974 (73,185)\n   8:starting to load ramstage                         2,299,924 (949)\n  15:starting LZMA decompress (ignore for x86)         2,300,264 (340)\n  16:finished LZMA decompress (ignore for x86)         2,341,499 (41,234)\n   9:finished loading ramstage                         2,343,593 (2,094)\n  10:start of ramstage                                 2,343,929 (335)\n  30:device enumeration                                2,343,937 (8)\n  40:device configuration                              2,347,291 (3,354)\n  50:device enable                                     2,349,098 (1,806)\n  60:device initialization                             2,381,455 (32,356)\n  70:device setup done                                 2,452,309 (70,853)\n  75:cbmem post                                        2,472,769 (20,460)\n  80:write tables                                      2,472,773 (3)\n  85:finalize chips                                    2,475,425 (2,652)\n  90:load payload                                      2,475,637 (211)\n  15:starting LZMA decompress (ignore for x86)         2,475,906 (269)\n  16:finished LZMA decompress (ignore for x86)         2,514,778 (38,871)\n  99:selfboot jump                                     2,514,808 (30)\n</code></pre>"},{"location":"research/fast_boot/#memory-context-restore","title":"Memory Context Restore","text":"<p>AGESA has an option called Memory Context Restore which restores the configuration of the memory controller from non-volatile storage. The feature should dramatically reduce of memory training time after first boot.</p> <pre><code>  IN BOOLEAN MemRestoreCtl;        ///&lt; Memory context restore control\n                                   ///&lt;   FALSE = perform memory init as normal (AMD default)\n                                   ///&lt;   TRUE = restore memory context and skip training. This requires\n                                   ///&lt;          MemContext is valid before AmdInitPost\n                                   ///&lt;\n  IN BOOLEAN SaveMemContextCtl;    ///&lt; Control switch to save memory context at the end of MemAuto\n                                   ///&lt;   TRUE = AGESA will setup MemContext block before exit AmdInitPost\n                                   ///&lt;   FALSE = AGESA will not setup MemContext block. Platform is\n                                   ///&lt;           expected to call S3Save later in POST if it wants to\n                                   ///&lt;           use memory context restore feature.\n                                   ///&lt;\n  IN OUT AMD_S3_PARAMS MemContext; ///&lt; Memory context block describes the data that platform needs to\n                                   ///&lt; save and restore for memory context restore feature to work.\n                                   ///&lt; It uses the subset of S3Save block to save/restore. Hence platform\n                                   ///&lt; may save only S3 block and uses it for both S3 resume and\n                                   ///&lt; memory context restore.\n                                   ///&lt;  - If MemRestoreCtl is TRUE, platform needs to pass in MemContext\n                                   ///&lt;    before AmdInitPost.\n                                   ///&lt;  - If SaveMemContextCtl is TRUE, platform needs to save MemContext\n                                   ///&lt;    right after AmdInitPost.\n</code></pre>"},{"location":"research/fast_boot/#implementation-and-testing","title":"Implementation and testing","text":"<p>Implementation of memory context restore feature contained:</p> <ul> <li>passsing correct values to <code>MemRestoreCtl</code> and <code>SaveMemContextCtl</code> in   following manner:<ul> <li>set <code>MemRestoreCtl</code> to TRUE</li> <li>set <code>SaveMemContextCtl</code> to TRUE if memory context present and valid;       FALSE otherwise</li> </ul> </li> <li>obtain memory context from AGESA in <code>MemContext</code> structure and save it in SPI   flash</li> </ul>"},{"location":"research/fast_boot/#results","title":"Results","text":"<p>At first boot platform behaved correctly, the booting contained normal memory training. However, after a reboot or second boot, the platform began to reset unexpectedly during iPXE booting or normal kernel loading from storage. Such behaviour could point to incorrect memory initialization.</p> <p>Further debugging of the memory context restoring revealed that the memory context returned by AGESA is inconsistent across boots. The test conditions were as follows:</p> <ul> <li>set <code>MemRestoreCtl</code> to TRUE</li> <li>do not save <code>MemContext</code> in SPi flash in order to force memory training after   each boot</li> </ul> <p>Dumps of the memory context showed that the content is different each time platform boots. The differences always occurred on fixed offsets in the structure:</p> <ul> <li>0x220 (single byte changes)</li> <li>0x300 (multiple byte changes in 80-byte long block)</li> <li>0x390 (multiple byte changes in 80-byte long block)</li> </ul> <p>Example diff of offset 0x300 across two random boots:</p> <pre><code>00 52 4a 00 00 00 00 00 00 5c 00 5d 00 60 00 62  .RJ......\\.].`.b\n00 65 00 00 00 70 00 6e 00 77 00 78 00 1b 1c 25  .e...p.n.w.x...%\n24 32 30 37 35 2b 00 00 00 14 14 14 14 14 14 14  $2075+..........\n14 0b 00 0a 00 13 00 11 00 19 00 00 00 20 00 20  ............. . \n00 25 00 23 00 38 03 38 03 00 00 00 00 03 00 00  .%.#.8.8........\n=================\n00 52 4a 00 00 00 00 00 00 5c 00 5d 00 60 00 62  .RJ......\\.].`.b\n00 64 00 00 00 70 00 6e 00 76 00 78 00 1a 1c 24  .d...p.n.v.x...$\n24 32 30 37 35 2c 00 00 00 14 14 14 14 14 14 14  $2075,..........\n14 0a 00 0a 00 12 00 11 00 1a 00 00 00 20 00 20  ............. . \n00 25 00 23 00 38 03 38 03 00 00 00 00 03 00 00  .%.#.8.8........\n</code></pre> <p>The conclusion is that restoring the memory context from non-volatile storage is not reliable. Platform skipped training and initialized memory controller with wrong values taken from context. Without correctly initialized memory the platform could not load any kernel, thus kept resetting unexpectedly.</p>"},{"location":"research/fast_boot/#amd-and-community-statement","title":"AMD and community statement","text":"<p>The fast boot topic has been also touched by coreboot community:</p> <p>https://review.coreboot.org/c/coreboot/+/22727</p> <p>The most interesting are the comments:</p> <pre><code>Unfortunately, according to AMD, we can only use the saved training results for S3 resume, and not as part of a fastboot path...\n</code></pre> <pre><code>AMD has taken a pretty strong position that an Intel-like \"fast boot\" is not practical to develop.\n</code></pre> <p>Given that it is impossible to use available AGESA binary to implement fast boot feature.</p>"},{"location":"research/fast_boot/#providing-initial-training-data","title":"Providing initial training data","text":"<p>AGESA has more parameters that can be specified when calling AmdInitPost. Some of them are:</p> <pre><code>IN UINT8             *TableBasedAlterations;\nIN PSO_TABLE         *PlatformMemoryConfiguration;\nIN FORCE_TRAIN_MODE   ForceTrainMode;\n</code></pre> <p><code>PlatformMemoryConfiguration</code> is filled with a set of macros available in <code>AGESA.h</code>. Things like number of DIMMs or channels supported, motherboard layers and signal maps can be set, but it doesn't have any measurable effect. Format for <code>TableBasedAlterations</code> isn't specified in the available documentation, but can be read from source code available in coreboot repository, assuming that AGESA blob follows the same format. <code>ForceTrainMode</code> can force 1D training only, which is slightly faster.</p>"},{"location":"research/fast_boot/#results_1","title":"Results","text":"<p>Using all of those settings with data taken from full memory training seems to speed up that process, but the changes are minimal (less than 2%):</p> type of boot v4.9.0.2 with filled data cold 2,544,751 2,509,498 warm 2,529,474 2,484,815 reboot 2,494,380 2,470,353 <p>It is possible that there are more not documented, configurable options than those found which could give additional gain. Some of the entries to the <code>TableBasedAlterations</code> can override final data, but they are applied after the training finishes, not instead of the training.</p> <p>Initial data was obtained from one platform, data obtained from different platforms can be different. Because of that results on other platforms might differ too.</p>"},{"location":"research/freebsd_tpm_support/","title":"FreeBSD TPM2.0 support","text":""},{"location":"research/freebsd_tpm_support/#early-boot-process","title":"Early boot process","text":"<p>From: https://www.freebsd.org/doc/handbook/boot-introduction.html</p>"},{"location":"research/freebsd_tpm_support/#stage-one-and-stage-two","title":"Stage One and Stage Two","text":"<p>Conceptually, the first and second stages are part of the same program on the same area of the disk. Because of space constraints, they have been split into two, but are always installed together. They are copied from the combined /boot/boot by the FreeBSD installer or bsdlabel.</p> <p>These two stages are located outside file systems, in the first track of the boot slice, starting with the first sector. This is where boot0, or any other boot manager, expects to find a program to run which will continue the boot process.</p> <p>The first stage, boot1, is very simple, since it can only be 512 bytes in size. It knows just enough about the FreeBSD bsdlabel, which stores information about the slice, to find and execute boot2.</p> <p>Stage two, boot2, is slightly more sophisticated, and understands the FreeBSD file system enough to find files. It can provide a simple interface to choose the kernel or loader to run. It runs loader, which is much more sophisticated and provides a boot configuration file.</p> <p>So boot1 is equivalent of MBR code and boot2 is a simple command line interface to load kernel directly or a 3rd stage loader.</p>"},{"location":"research/freebsd_tpm_support/#stage-three","title":"Stage Three","text":"<p>The loader is the final stage of the three-stage bootstrap process. It is located on the file system, usually as /boot/loader.</p> <p>The loader is intended as an interactive method for configuration, using a built-in command set, backed up by a more powerful interpreter which has a more complex command set. Looks like stage three loader seem to be an equivalent of GRUB or other bootloader.</p>"},{"location":"research/freebsd_tpm_support/#last-stage","title":"Last stage","text":"<p>Kernel is loaded. It examines for boot flags and adjusts its behavior:</p> Option Description -a During kernel init, ask the device to mount as the rootfs. -C Boot the root file system from a CDROM. -s Boot into single-user mode. -v Be more verbose during kernel startup. <p>Once the kernel has finished booting, it passes control to the user process init(8), which is located at /sbin/init, or the program path specified in the <code>init_path</code> variable in loader. This is the last stage of the boot process.</p>"},{"location":"research/freebsd_tpm_support/#tpm-support-information","title":"TPM support information","text":"<p>From investigating the source, there is very little code for TPM 2.0 interaction. Also no information found on mailing lists about TPM 2.0 support in early boot process, verification, measurements etc. The only message found was related to tpm2-tools compatibility in FreeBSD.</p> <p>However I have found an interesting mail with guide to trusted gptboot (<code>tgptboot</code>). <code>gptboot</code> is a part of standard FreeBSD boot path that connects legacy MBR and GPT partitioning and <code>tgptboot</code> is its hardened version. First of all BIOS measures the PMBR (Protective Master Boot Record) code. Then PMBR measure <code>freebsd-boot</code> partition (most likely the stage two and/or stage three) and hand control over to trusted gptboot.</p> <p>tgptboot:</p> <ul> <li>select UFS partition (take gptboot(8) attributes into account)</li> <li>get KEY from TPM NVRAM</li> <li>get DATA_PATH from TPM NVRAM</li> <li>read and decrypt DATA at DATA_PATH using KEY</li> <li>set kernel environment (if specified in DATA)</li> <li>load and checksum kernel and modules (path, size and hash in DATA)</li> <li>load disk keys (if specified in DATA)</li> <li>execute kernel</li> </ul> <p>https://lists.freebsd.org/pipermail/freebsd-hackers/2015-March/047376.html</p> <p>Unfotunately it utilizes TPM1.2 only. The status of tgptboot development still needs to be researched.</p>"},{"location":"research/geode_lx/","title":"ALIX and AMD Geode LX","text":"<p>This paper contains research about Geode LX CAR and whole effort to implement <code>EARLY_CBMEM_INIT</code> in coreboot for PC Engines ALIX platforms.</p>"},{"location":"research/geode_lx/#table-of-contents","title":"Table of Contents","text":"<ul> <li>List of abbreviations</li> <li>Memory initialisation<ul> <li>Memory types and caching policies</li> <li>MTRRS<ul> <li>Fixed MTRRs</li> <li>Variable MTRRs</li> <li>Geode LX MTRRs</li> </ul> </li> </ul> </li> </ul>"},{"location":"research/geode_lx/#list-of-abbreviations","title":"List of abbreviations","text":"<ul> <li><code>SDM</code> - Software Developer Manual</li> <li><code>MTRR</code> - Memory Type Range Register</li> <li><code>MSR</code> - Model Specific Register</li> <li><code>CAR</code> - Cache-as-RAM</li> <li><code>UC</code> - Strong Uncacheable</li> <li><code>UC-</code> - Uncacheable</li> <li><code>WC</code> - Write Combining</li> <li><code>WT</code> - Write Through</li> <li><code>WB</code> - Write Back</li> <li><code>WP</code> - Write Protected</li> <li><code>SMM</code> - System Management Mode</li> <li><code>DMM</code> - Debug Management Mode</li> </ul>"},{"location":"research/geode_lx/#memory-initialisation","title":"Memory initialisation","text":"<p>Current ALIX platforms support in coreboot (state at the day of writing this document) lets user build a firmware capable to boot the platform without issues. However... With coreboot 4.7 version, new standards has been introduced which every platform must meet to be supported (to stay in the main branch). One of these standards (requirements) is <code>EARLY_CBMEM_INIT</code> to be used by platform. <code>EARLY_CBMEM_INIT</code> allows to save log to cbmem early in romstage, but that's not all about it. To get all benefits of <code>EARLY_CBMEM_INIT</code>, the main memory need to be initialised and addressable in romstage. Unfortunately ALIX platforms initialize memory in ramstage, which breaks the model proposed by coreboot project.</p> <p>In order to achieve the goal (move platform to <code>EARLY_CBMEM_INIT</code>), deeper understading of caching, memory initialisation and CAR is needed. Below sections describes steps needed to reach the goal.</p>"},{"location":"research/geode_lx/#memory-types-and-caching-policies","title":"Memory types and caching policies","text":"<p>Intel SDM is a good source of knowledge about caching and memory types. Detialed description is available in Intel SDM vol 3A Section 11.3.</p> <p>In brief Intel describes 6 memory types which are used in Intel's hardware:</p> <ul> <li><code>UC</code> - System memory locations are not cached. All reads and writes appear on   the system bus and are executed in program order without reordering.</li> <li><code>UC-</code> - Has same characteristics as the strong uncacheable (UC) memory type,   except that this memory type can be overridden by programming the MTRRs for   the WC memory type</li> <li><code>WC</code> - System memory locations are not cached (as with uncacheable memory) and   coherency is not enforced by the processor\u2019s bus coherency protocol.   Speculative reads are allowed. Writes may be delayed and combined in the write   combining buffer (WC buffer) to reduce memory accesses. If the WC buffer is   partially filled, the writes may be delayed until the next occurrence of a   serializing event</li> <li><code>WT</code> - Writes and reads to and from system memory are cached. Reads come from   cache lines on cache hits; read misses cause cache fills. Speculative reads   are allowed. All writes are written to a cache line (when possible) and   through to system memory. When writing through to memory, invalid cache lines   are never filled, and valid cache lines are either filled or invalidated.   Write combining is allowed.</li> <li><code>WB</code> - Writes and reads to and from system memory are cached. Reads come from   cache lines on cache hits; read misses cause cache fills. Speculative reads   are allowed. Write misses cause cache line fills, and writes are performed   entirely in the cache, when possible. Write combining is allowed. The   write-back memory type reduces bus traffic by eliminating many unnecessary   writes to system memory. Writes to a cache line are not immediately forwarded   to system memory; instead, they are accumulated in the cache. The modified   cache lines are written to system memory later, when a write-back operation   is performed.</li> <li><code>WP</code> - Reads come from cache lines when possible, and read misses cause cache   fills. Writes are propagated to the system bus and cause corresponding cache   lines on all processors on the bus to be invalidated. Speculative reads are   allowed.</li> </ul> <p>Section 11.2 describes the terms <code>cache line fill</code>, <code>cache hit</code> and <code>write hit</code>.</p>"},{"location":"research/geode_lx/#mtrrs","title":"MTRRS","text":"<p>MTRRs are registers responsible for setting memory type for given address ranges of physical memory. They are divided into two groups:</p> <ul> <li>fixed MTRRs</li> <li>variable MTRRs</li> </ul> <p>MTRR availability if identified by bit 12 in EDX register after issuing CPUID instruction. Additional information about MTRRs are stored in <code>IA32_MTRRCAP</code> MSR which is read-only. It defines variable MTRRs count, fixed MTRRs count etc.</p> <p>All MTRRs and <code>IA32_MTRRCAP</code> are described in Section 11.11 in Intel SDM vol 3A and subsequent subsections.</p>"},{"location":"research/geode_lx/#fixed-mtrrs","title":"Fixed MTRRs","text":"<p>Fixed MTRR allows to set memory type for region handled by corresponding MTRR. There are 3 types of fixed MTRRs based on address range covered:</p> <ul> <li>Register <code>IA32_MTRR_FIX64K_00000</code> \u2014 Maps the 512-KByte address range from 0H   to 7FFFFH. This range is divided into eight 64-KByte sub-ranges</li> <li>Registers <code>IA32_MTRR_FIX16K_80000</code> and <code>IA32_MTRR_FIX16K_A0000</code> \u2014 Maps the two   128-KByte address ranges from 80000H to BFFFFH. This range is divided into   sixteen 16-KByte sub-ranges, 8 ranges per register.</li> <li>Registers <code>IA32_MTRR_FIX4K_C0000</code> through <code>IA32_MTRR_FIX4K_F8000</code> \u2014 Maps eight   32-KByte address ranges from C0000H to FFFFFH. This range is divided into   sixty-four 4-KByte sub-ranges, 8 ranges per register.</li> </ul> <p>These registers can set memory type only for a <code>fixed</code> address range.</p>"},{"location":"research/geode_lx/#variable-mtrrs","title":"Variable MTRRs","text":"<p><code>IA32_MTRRCAP</code> MSR contains number of variable ranges supported by CPU (this number is also an upper limit of variable MTRRs). These MTRRs allow to define not only memory type, but also the address range it will be applied to.</p> <p>The range is defined by programming BASE and MASK registers.</p> <p>NOTE: all MTRRS must be consistent across all CPUs in multi-processor systems.</p>"},{"location":"research/geode_lx/#geode-lx-mtrrs","title":"Geode LX MTRRs","text":"<p>Geode LX registers does not have typical MTRRs as described in Intel SDM. Do not be surprised, it is quite old processor and created by AMD. It is obvious that registers will differ. However there is a set of MSRs which serve the same purpose as MTRRs.</p> <p>The equivalents of fixed MTRRs are described below.</p> <ul> <li><code>RCONF_A0_BF_MSR</code> - is a regions configuration register for address range   between 0xA0000 and 0xBFFFF (128 KByte). This range is divided into eight   16-KByte sub-ranges. Equivalent of <code>IA32_MTRR_FIX16K_A0000</code></li> <li><code>RCONF_C0_DF_MSR</code> - same as above for range 0xC0000 and 0xDFFFF (128 KByte).   There is no equivalent in Intel SDM (Intel's implementation for range   0xC0000 - 0xDFFFF is programmed via <code>IA32_MTRR_FIX4K_xxxxx</code> which are 32=KByte   address range registers with eight 4-Kbyte subranges)</li> <li><code>RCONF_E0_FF_MSR</code> - same as above for range 0xE0000 and 0xFFFFF (128 KByte).   No equivalents, this range is covered by <code>IA32_MTRR_FIX4K_xxxxx</code> registers in   Intel's implementations.</li> </ul> <p>The equivalents of variable MTRRs are <code>RCONF0_MSR</code> through <code>RCONF7_MSR</code>. Eight equivalents to Intel's variable MTRRs are available in Geode LX processor. Fields defined by these registers: top of range, range base address, enable/disable bit and 8 bits for region properties.</p> <p>Additionally there are separate range register for SMM (<code>RCONF_SMM_MSR</code>) and DMM (<code>RCONF_DMM_MSR</code>). They are defining SMM/DMM base address, top address, enable/disable bit and region properties when region is active or inactive (8 bits for each state).</p> <p>Region properties are described in detail in Geode LX databook and seem to be different than Intel's standard. Region properties are defined by 8 bits (64bit MSR divided into eight sub-rnages, 8 bits for each subrange properties).</p> Bit Property 7 Reserved 6 Reserved 5 <code>WS - Write-serialize</code> 4 <code>WC - Write-ombine</code> 3 <code>WT - Write-hrough</code> 2 <code>WP - Write-rotect</code> 1 <code>WA - Write-allocate</code> 0 <code>CD - Cache Disable</code> <p>Based on the setting, the properties can have different impact on read and write operations. AMD's implementations allow to set multiple bits allowing to set \"memory subtypes\" (page 170 of Geode LX databook):</p> Property Setting Read Operation behaviour WS=0 and CD=0, rest don't care Cacheable. Read misses cause a cache line to be allocated. WS=1 and CD=0, rest don't care Undefined State. Unpredictable behavior occurs. CD=1, rest don't care Uncacheable. Reads are sent unmodified to the bus. Equivalent to Intel's <code>UC</code> and <code>UC-</code> Property Setting Write Operation behaviour WP=1, rest don't care Write-protected. Writes to the region are discarded. Equivalent to Intel's <code>WP</code> WS=1, rest don't care Undefined. Unpredictable behavior occurs. WC=1 and CD=0, rest don't care Undefined. Unpredictable behavior occurs. WA=1 and CD=1, rest don't care Undefined. Unpredictable behavior occurs. 00h Write-back Cacheable. Write misses are sent to the bus, a cache line is not allocated on a write miss. 02h Write-back Cacheable/Write-allocate. Write misses allocate a line in the cache. Equivalent to Intel's <code>WB</code> 08h or 0Ah Write-through cacheable. Write misses do not allocate a line in the cache. Write hits update the cache but do not mark the line as dirty. All writes are sent to the bus. Similar to Intel's <code>WT</code> 01h Uncacheable. All writes are sent to the bus in strict program order without any combining. Write hits still update the cache. Equivalent to <code>UC</code> and <code>UC-</code> 21h Uncacheable as above. Additionally: Write-serialize. Limit the number of outstanding writes to the value of the WSREQ field in <code>DM_CONFIG0_MSR</code> 11h Write-combined (uncacheable). Writes to the same cache line may be combined. Multiple writes to the same byte results in a single write with the last value specified. Write order is not preserved. Similar to Intel's <code>WC</code> 31h Write-combined (uncacheable) as above. Additionally: <code>Write-serialize</code>. Limit the number of outstanding writes to the value of the WSREQ field in <code>DM_CONFIG0_MSR</code> 19h Write-burstable (uncacheable). Writes to the same cache line are combined as long as they are to increasing addresses and do not access a previously written byte. Multiple writes to the same byte results in multiple bytes on the bus. 31h Write-burstable (uncacheable) as above. Additionally: <code>Write-serialize</code>. Limit the number of outstanding writes to the value of the WSREQ field in <code>DM_CONFIG0_MSR</code>"},{"location":"research/power-consumption-tests/","title":"PC Engines apu3 power consumption tests","text":"<p>We have started research and measurements of power consumption on apu platforms. Our goal is to optimize (if possible) power management on coreboot level. First stage of work is to collect data from various tests and create reports. For that purpose we have used RTE with power monitor sensor. RTE stands for Remote Testing Environment and it is a tool which helps debugging and testing devices. RTE gathers all necessary interfaces and ports in one device. Therefore, it is very versatile and convenient to use. More information can be found on 3mdeb official website. It is also place where you can buy it.</p> <p>This document gathers all already carried out tests, their results and our conclusions. Over time, we will conduct next tests and hence extend this document with further reports.</p>"},{"location":"research/power-consumption-tests/#tests","title":"Tests","text":""},{"location":"research/power-consumption-tests/#apu3-stress-test-cpu","title":"apu3 stress-test cpu","text":"<p>Test case is following:</p> <ol> <li>Power on RTE and power on apu3.</li> <li>Boot to Debian 10 (buster) with kernel 4.19 on apu3.</li> <li>Start measurements on RTE: constantly measure bus voltage, current and    input power in 0.5 seconds time intervals and save them to text file.</li> <li>After 10 seconds from starting measurements, invoke <code>sysbench</code> command on apu3.</li> <li>When <code>sysbench</code> finished, wait ~25 seconds and invoke command again.</li> <li>When <code>sysbench</code> command was invoked 10 times, finish entire test.</li> </ol>"},{"location":"research/power-consumption-tests/#results-with-coreboot-v41104","title":"Results with coreboot v4.11.0.4","text":"<p>Above test was performed with <code>coreboot v4.11.0.4</code> which doesn't have ASPM (Active State Power Management) enabled. This feature was introduced in v4.11.0.5 release.</p> <pre><code>$ sysbench cpu run --threads=4 --events=10000 --cpu-max-prime=20000 --time=0 --validate\nsysbench 1.0.19 (using bundled LuaJIT 2.1.0-beta2)\n\nRunning the test with following options:\nNumber of threads: 4\nValidation checks: on.\n\nInitializing random number generator from current time\n\n\nPrime numbers limit: 20000\n\nInitializing worker threads...\n\nThreads started!\n\nCPU speed:\n    events per second:   539.76\n\nGeneral statistics:\n    total time:                          18.5220s\n    total number of events:              10000\n\nLatency (ms):\n         min:                                    6.40\n         avg:                                    7.41\n         max:                                    8.13\n         95th percentile:                        7.70\n         sum:                                74064.78\n\nThreads fairness:\n    events (avg/stddev):           2500.0000/18.61\n    execution time (avg/stddev):   18.5162/0.00\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"research/power-consumption-tests/#conclusions","title":"Conclusions","text":"<p>In idle state, when only Debian is running without any commands and applications, power consumption oscillates around 4W. It increases to almost 6W (~5.8W) when <code>sysbench</code> is running. That change is mainly caused by current rise. However, simultaneously there is a little voltage drop on the bus. As you can see it drops from about 12.18 V to 12.12 V. That behavior is normal - the greater the load, the greater voltage decrease can be observed. It is rather related to quality of power supply and wires than to end device. Moreover, as this voltage drop is slight, it can be omitted in analysis.</p>"},{"location":"research/power-consumption-tests/#results-with-coreboot-v41105","title":"Results with coreboot v4.11.0.5","text":"<p>Above test was repeated with <code>coreboot v4.11.0.5</code> which has ASPM (Active State Power Management) enabled. Exactly same test case was carried out and same measurements were taken.</p> <pre><code>$ sysbench cpu run --threads=4 --events=10000 --cpu-max-prime=20000 --time=0 --validate\nsysbench 1.0.19 (using bundled LuaJIT 2.1.0-beta2)\n\nRunning the test with following options:\nNumber of threads: 4\nValidation checks: on.\n\nInitializing random number generator from current time\n\n\nPrime numbers limit: 20000\n\nInitializing worker threads...\n\nThreads started!\n\nCPU speed:\n    events per second:   539.80\n\nGeneral statistics:\n    total time:                          18.5200s\n    total number of events:              10000\n\nLatency (ms):\n         min:                                    6.36\n         avg:                                    7.41\n         max:                                    8.17\n         95th percentile:                        7.70\n         sum:                                74053.97\n\nThreads fairness:\n    events (avg/stddev):           2500.0000/18.79\n    execution time (avg/stddev):   18.5135/0.00\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"research/power-consumption-tests/#coreboot-v41104-vs-v41105","title":"coreboot v4.11.0.4 vs v4.11.0.5","text":"<p>Comparing those results to previous one (with <code>coreboot v4.11.0.4</code>), following differences can be noticed:</p> <ul> <li>average bus voltage level in idle state and during stress-test is slightly   larger with <code>coreboot v4.11.0.5</code> than <code>coreboot v4.11.0.4</code>; however, those   differences are only about 0,01/0,02 V, which makes 0,17% measurement error.   As power monitor sensor accuracy is up to 1%, obtained error is within the   norm;</li> <li>in idle state, power consumption oscillates around 3.5W and when <code>sysbench</code> is   running it increases to 5.3W top; it is improvement by approximately 0.5W in   each state against <code>coreboot v4.11.0.4</code>;</li> </ul>"},{"location":"research/power-consumption-tests/#remarks","title":"Remarks","text":"<p>Carried out tests are definitely insufficient to draw far-reaching conclusions. There must be done more tests which involve another hardware components and operations. It is already on our roadmap and we should successively introduce more. Although it is beginning of research, we already have some remarks and leads:</p> <ul> <li>power monitor sensor seems to work fine, the more there are estimated   differences in power consumption with different coreboot versions;  </li> <li>before moving to optimization stage, we need to collect large enough and   diverse database - so far we have carried out only one test;</li> <li>we should setup exact same test suite (with the same apu platform, firmware, operating system and power monitor sensor) to confirm that results are repeatable;</li> </ul>"},{"location":"research/tpm2-triage/","title":"Report of TPM2 support","text":""},{"location":"research/tpm2-triage/#conclusion","title":"Conclusion","text":"<p>Works with <code>tpm_tis</code> module bypassing the BIOS in TPM setup. Verified on Voyage Linux 0.10.0 and Debian jessie.</p>"},{"location":"research/tpm2-triage/#actual-steps-taken","title":"Actual steps taken","text":"<p>HW used: APU2 with TPM LPC addon</p> <ol> <li>Install 4.13.0-rc6 kernel - config</li> <li> <p>Enable tpm2 module:</p> <pre><code>modprobe tpm_tis force=1 interrupts=0\n</code></pre> <p><code>/dev/tpm0</code> should appear</p> </li> <li> <p>Install packages:     <pre><code>apt -y install \\\n  autoconf-archive \\\n  libcmocka0 \\\n  libcmocka-dev \\\n  build-essential \\\n  git \\\n  pkg-config \\\n  gcc \\\n  g++ \\\n  m4 \\\n  libtool \\\n  automake \\\n  autoconf \\\n  libssl-dev \\\n  libssl1.0.0 \\\n  libcurl4-openssl-dev\n</code></pre></p> </li> <li> <p><code>git clone https://github.com/01org/tpm2-tss.git</code></p> </li> <li> <p>Build tpm2-tss lib (i.e. sapi)     <pre><code>./bootstrap\n./configure\nmake -j$(nproc)\nmake install\nldconfig\n</code></pre></p> </li> <li> <p><code>git clone https://github.com/01org/tpm2-tools</code></p> </li> <li> <p>Build tpm2-tools <pre><code>./bootstrap\n./configure\nmake -j$(nproc)\nmake install\n</code></pre></p> </li> <li> <p>Check the device:     <pre><code>$ tpm2_dump_capability -T device -c properties-fixed\nTPM_PT_FAMILY_INDICATOR:\n  as UINT32:                0x08322e3000\n  as string:                \"2.0\"\nTPM_PT_LEVEL:               0\nTPM_PT_REVISION:            1.16\nTPM_PT_DAY_OF_YEAR:         0x000000d1\nTPM_PT_YEAR:                0x000007df\nTPM_PT_MANUFACTURER:        0x49465800\nTPM_PT_VENDOR_STRING_1:\n  as UINT32:                0x534c4239\n  as string:                \"SLB9\"\nTPM_PT_VENDOR_STRING_2:\n  as UINT32:                0x36363500\n  as string:                \"665\"\nTPM_PT_VENDOR_STRING_3:\n  as UINT32:                0x00000000\n  as string:                \"\"\nTPM_PT_VENDOR_STRING_4:\n  as UINT32:                0x00000000\n  as string:                \"\"\nTPM_PT_VENDOR_TPM_TYPE:     0x00000000\nTPM_PT_FIRMWARE_VERSION_1:  0x00050033\nTPM_PT_FIRMWARE_VERSION_2:  0x00083200\nTPM_PT_INPUT_BUFFER:        0x00000400\nTPM_PT_HR_TRANSIENT_MIN:    0x00000003\nTPM_PT_HR_PERSISTENT_MIN:   0x00000007\nTPM_PT_HR_LOADED_MIN:       0x00000003\nTPM_PT_ACTIVE_SESSIONS_MAX: 0x00000040\nTPM_PT_PCR_COUNT:           0x00000018\nTPM_PT_PCR_SELECT_MIN:      0x00000003\nTPM_PT_CONTEXT_GAP_MAX:     0x0000ffff\nTPM_PT_NV_COUNTERS_MAX:     0x00000008\nTPM_PT_NV_INDEX_MAX:        0x00000680\nTPM_PT_MEMORY:              0x00000006\nTPM_PT_CLOCK_UPDATE:        0x00080000\nTPM_PT_CONTEXT_HASH:        0x0000000b\nTPM_PT_CONTEXT_SYM:         0x00000006\nTPM_PT_CONTEXT_SYM_SIZE:    0x00000080\nTPM_PT_ORDERLY_COUNT:       0x000000ff\nTPM_PT_MAX_COMMAND_SIZE:    0x00000500\nTPM_PT_MAX_RESPONSE_SIZE:   0x00000500\nTPM_PT_MAX_DIGEST:          0x00000020\nTPM_PT_MAX_OBJECT_CONTEXT:  0x00000396\nTPM_PT_MAX_SESSION_CONTEXT: 0x000000eb\nTPM_PT_PS_FAMILY_INDICATOR: 0x00000001\nTPM_PT_PS_LEVEL:            0x00000000\nTPM_PT_PS_REVISION:         0x00000100\nTPM_PT_PS_DAY_OF_YEAR:      0x00000000\nTPM_PT_PS_YEAR:             0x00000000\nTPM_PT_SPLIT_MAX:           0x00000080\nTPM_PT_TOTAL_COMMANDS:      0x0000005a\nTPM_PT_LIBRARY_COMMANDS:    0x00000058\nTPM_PT_VENDOR_COMMANDS:     0x00000002\nTPM_PT_NV_BUFFER_MAX:       0x00000300\n$ tpm2_getrandom -T device 10\n0x84 0xCF 0xA4 0xF8 0xEC 0x43 0x11 0xA4 0x7D 0xE8\n</code></pre></p> </li> </ol>"}]}